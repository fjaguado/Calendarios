if(function(t,e){"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(t,e){function n(t){var e=!!t&&"length"in t&&t.length,n=ot.type(t);return"function"===n||ot.isWindow(t)?!1:"array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t}function r(t,e,n){if(ot.isFunction(e))return ot.grep(t,function(t,r){return!!e.call(t,r,t)!==n});if(e.nodeType)return ot.grep(t,function(t){return t===e!==n});if("string"==typeof e){if(vt.test(e))return ot.filter(e,t,n);e=ot.filter(e,t)}return ot.grep(t,function(t){return Z.call(e,t)>-1!==n})}function i(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}function o(t){var e={};return ot.each(t.match(wt)||[],function(t,n){e[n]=!0}),e}function a(){K.removeEventListener("DOMContentLoaded",a),t.removeEventListener("load",a),ot.ready()}function s(){this.expando=ot.expando+s.uid++}function u(t,e,n){var r;if(void 0===n&&1===t.nodeType)if(r="data-"+e.replace(At,"-$&").toLowerCase(),n=t.getAttribute(r),"string"==typeof n){try{n="true"===n?!0:"false"===n?!1:"null"===n?null:+n+""===n?+n:kt.test(n)?ot.parseJSON(n):n}catch(i){}Tt.set(t,e,n)}else n=void 0;return n}function c(t,e,n,r){var i,o=1,a=20,s=r?function(){return r.cur()}:function(){return ot.css(t,e,"")},u=s(),c=n&&n[3]||(ot.cssNumber[e]?"":"px"),l=(ot.cssNumber[e]||"px"!==c&&+u)&&jt.exec(ot.css(t,e));if(l&&l[3]!==c){c=c||l[3],n=n||[],l=+u||1;do o=o||".5",l/=o,ot.style(t,e,l+c);while(o!==(o=s()/u)&&1!==o&&--a)}return n&&(l=+l||+u||0,i=n[1]?l+(n[1]+1)*n[2]:+n[2],r&&(r.unit=c,r.start=l,r.end=i)),i}function l(t,e){var n="undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e||"*"):"undefined"!=typeof t.querySelectorAll?t.querySelectorAll(e||"*"):[];return void 0===e||e&&ot.nodeName(t,e)?ot.merge([t],n):n}function f(t,e){for(var n=0,r=t.length;r>n;n++)Et.set(t[n],"globalEval",!e||Et.get(e[n],"globalEval"))}function p(t,e,n,r,i){for(var o,a,s,u,c,p,h=e.createDocumentFragment(),d=[],v=0,g=t.length;g>v;v++)if(o=t[v],o||0===o)if("object"===ot.type(o))ot.merge(d,o.nodeType?[o]:o);else if(Vt.test(o)){for(a=a||h.appendChild(e.createElement("div")),s=(It.exec(o)||["",""])[1].toLowerCase(),u=_t[s]||_t._default,a.innerHTML=u[1]+ot.htmlPrefilter(o)+u[2],p=u[0];p--;)a=a.lastChild;ot.merge(d,a.childNodes),a=h.firstChild,a.textContent=""}else d.push(e.createTextNode(o));for(h.textContent="",v=0;o=d[v++];)if(r&&ot.inArray(o,r)>-1)i&&i.push(o);else if(c=ot.contains(o.ownerDocument,o),a=l(h.appendChild(o),"script"),c&&f(a),n)for(p=0;o=a[p++];)Pt.test(o.type||"")&&n.push(o);return h}function h(){return!0}function d(){return!1}function v(){try{return K.activeElement}catch(t){}}function g(t,e,n,r,i,o){var a,s;if("object"==typeof e){"string"!=typeof n&&(r=r||n,n=void 0);for(s in e)g(t,s,n,r,e[s],o);return t}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),i===!1)i=d;else if(!i)return t;return 1===o&&(a=i,i=function(t){return ot().off(t),a.apply(this,arguments)},i.guid=a.guid||(a.guid=ot.guid++)),t.each(function(){ot.event.add(this,e,i,r,n)})}function m(t,e){return ot.nodeName(t,"table")&&ot.nodeName(11!==e.nodeType?e:e.firstChild,"tr")?t.getElementsByTagName("tbody")[0]||t.appendChild(t.ownerDocument.createElement("tbody")):t}function $(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function y(t){var e=Bt.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function b(t,e){var n,r,i,o,a,s,u,c;if(1===e.nodeType){if(Et.hasData(t)&&(o=Et.access(t),a=Et.set(e,o),c=o.events)){delete a.handle,a.events={};for(i in c)for(n=0,r=c[i].length;r>n;n++)ot.event.add(e,i,c[i][n])}Tt.hasData(t)&&(s=Tt.access(t),u=ot.extend({},s),Tt.set(e,u))}}function w(t,e){var n=e.nodeName.toLowerCase();"input"===n&&Dt.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function x(t,e,n,r){e=Y.apply([],e);var i,o,a,s,u,c,f=0,h=t.length,d=h-1,v=e[0],g=ot.isFunction(v);if(g||h>1&&"string"==typeof v&&!rt.checkClone&&Ut.test(v))return t.each(function(i){var o=t.eq(i);g&&(e[0]=v.call(this,i,o.html())),x(o,e,n,r)});if(h&&(i=p(e,t[0].ownerDocument,!1,t,r),o=i.firstChild,1===i.childNodes.length&&(i=o),o||r)){for(a=ot.map(l(i,"script"),$),s=a.length;h>f;f++)u=i,f!==d&&(u=ot.clone(u,!0,!0),s&&ot.merge(a,l(u,"script"))),n.call(t[f],u,f);if(s)for(c=a[a.length-1].ownerDocument,ot.map(a,y),f=0;s>f;f++)u=a[f],Pt.test(u.type||"")&&!Et.access(u,"globalEval")&&ot.contains(c,u)&&(u.src?ot._evalUrl&&ot._evalUrl(u.src):ot.globalEval(u.textContent.replace(Wt,"")))}return t}function S(t,e,n){for(var r,i=e?ot.filter(e,t):t,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||ot.cleanData(l(r)),r.parentNode&&(n&&ot.contains(r.ownerDocument,r)&&f(l(r,"script")),r.parentNode.removeChild(r));return t}function C(t,e){var n=ot(e.createElement(t)).appendTo(e.body),r=ot.css(n[0],"display");return n.detach(),r}function E(t){var e=K,n=Gt[t];return n||(n=C(t,e),"none"!==n&&n||(zt=(zt||ot("<iframe frameborder='0' width='0' height='0'/>")).appendTo(e.documentElement),e=zt[0].contentDocument,e.write(),e.close(),n=C(t,e),zt.detach()),Gt[t]=n),n}function T(t,e,n){var r,i,o,a,s=t.style;return n=n||Qt(t),a=n?n.getPropertyValue(e)||n[e]:void 0,""!==a&&void 0!==a||ot.contains(t.ownerDocument,t)||(a=ot.style(t,e)),n&&!rt.pixelMarginRight()&&Kt.test(a)&&Jt.test(e)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o),void 0!==a?a+"":a}function k(t,e){return{get:function(){return t()?void delete this.get:(this.get=e).apply(this,arguments)}}}function A(t){if(t in re)return t;for(var e=t[0].toUpperCase()+t.slice(1),n=ne.length;n--;)if(t=ne[n]+e,t in re)return t}function O(t,e,n){var r=jt.exec(e);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):e}function j(t,e,n,r,i){for(var o=n===(r?"border":"content")?4:"width"===e?1:0,a=0;4>o;o+=2)"margin"===n&&(a+=ot.css(t,n+Nt[o],!0,i)),r?("content"===n&&(a-=ot.css(t,"padding"+Nt[o],!0,i)),"margin"!==n&&(a-=ot.css(t,"border"+Nt[o]+"Width",!0,i))):(a+=ot.css(t,"padding"+Nt[o],!0,i),"padding"!==n&&(a+=ot.css(t,"border"+Nt[o]+"Width",!0,i)));return a}function N(t,e,n){var r=!0,i="width"===e?t.offsetWidth:t.offsetHeight,o=Qt(t),a="border-box"===ot.css(t,"boxSizing",!1,o);if(0>=i||null==i){if(i=T(t,e,o),(0>i||null==i)&&(i=t.style[e]),Kt.test(i))return i;r=a&&(rt.boxSizingReliable()||i===t.style[e]),i=parseFloat(i)||0}return i+j(t,e,n||(a?"border":"content"),r,o)+"px"}function R(t,e){for(var n,r,i,o=[],a=0,s=t.length;s>a;a++)r=t[a],r.style&&(o[a]=Et.get(r,"olddisplay"),n=r.style.display,e?(o[a]||"none"!==n||(r.style.display=""),""===r.style.display&&Rt(r)&&(o[a]=Et.access(r,"olddisplay",E(r.nodeName)))):(i=Rt(r),"none"===n&&i||Et.set(r,"olddisplay",i?n:ot.css(r,"display"))));for(a=0;s>a;a++)r=t[a],r.style&&(e&&"none"!==r.style.display&&""!==r.style.display||(r.style.display=e?o[a]||"":"none"));return t}function D(t,e,n,r,i){return new D.prototype.init(t,e,n,r,i)}function I(){return t.setTimeout(function(){ie=void 0}),ie=ot.now()}function P(t,e){var n,r=0,i={height:t};for(e=e?1:0;4>r;r+=2-e)n=Nt[r],i["margin"+n]=i["padding"+n]=t;return e&&(i.opacity=i.width=t),i}function _(t,e,n){for(var r,i=(q.tweeners[e]||[]).concat(q.tweeners["*"]),o=0,a=i.length;a>o;o++)if(r=i[o].call(n,e,t))return r}function V(t,e,n){var r,i,o,a,s,u,c,l,f=this,p={},h=t.style,d=t.nodeType&&Rt(t),v=Et.get(t,"fxshow");n.queue||(s=ot._queueHooks(t,"fx"),null==s.unqueued&&(s.unqueued=0,u=s.empty.fire,s.empty.fire=function(){s.unqueued||u()}),s.unqueued++,f.always(function(){f.always(function(){s.unqueued--,ot.queue(t,"fx").length||s.empty.fire()})})),1===t.nodeType&&("height"in e||"width"in e)&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],c=ot.css(t,"display"),l="none"===c?Et.get(t,"olddisplay")||E(t.nodeName):c,"inline"===l&&"none"===ot.css(t,"float")&&(h.display="inline-block")),n.overflow&&(h.overflow="hidden",f.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}));for(r in e)if(i=e[r],ae.exec(i)){if(delete e[r],o=o||"toggle"===i,i===(d?"hide":"show")){if("show"!==i||!v||void 0===v[r])continue;d=!0}p[r]=v&&v[r]||ot.style(t,r)}else c=void 0;if(ot.isEmptyObject(p))"inline"===("none"===c?E(t.nodeName):c)&&(h.display=c);else{v?"hidden"in v&&(d=v.hidden):v=Et.access(t,"fxshow",{}),o&&(v.hidden=!d),d?ot(t).show():f.done(function(){ot(t).hide()}),f.done(function(){var e;Et.remove(t,"fxshow");for(e in p)ot.style(t,e,p[e])});for(r in p)a=_(d?v[r]:0,r,f),r in v||(v[r]=a.start,d&&(a.end=a.start,a.start="width"===r||"height"===r?1:0))}}function M(t,e){var n,r,i,o,a;for(n in t)if(r=ot.camelCase(n),i=e[r],o=t[n],ot.isArray(o)&&(i=o[1],o=t[n]=o[0]),n!==r&&(t[r]=o,delete t[n]),a=ot.cssHooks[r],a&&"expand"in a){o=a.expand(o),delete t[r];for(n in o)n in t||(t[n]=o[n],e[n]=i)}else e[r]=i}function q(t,e,n){var r,i,o=0,a=q.prefilters.length,s=ot.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;for(var e=ie||I(),n=Math.max(0,c.startTime+c.duration-e),r=n/c.duration||0,o=1-r,a=0,u=c.tweens.length;u>a;a++)c.tweens[a].run(o);return s.notifyWith(t,[c,o,n]),1>o&&u?n:(s.resolveWith(t,[c]),!1)},c=s.promise({elem:t,props:ot.extend({},e),opts:ot.extend(!0,{specialEasing:{},easing:ot.easing._default},n),originalProperties:e,originalOptions:n,startTime:ie||I(),duration:n.duration,tweens:[],createTween:function(e,n){var r=ot.Tween(t,c.opts,e,n,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(r),r},stop:function(e){var n=0,r=e?c.tweens.length:0;if(i)return this;for(i=!0;r>n;n++)c.tweens[n].run(1);return e?(s.notifyWith(t,[c,1,0]),s.resolveWith(t,[c,e])):s.rejectWith(t,[c,e]),this}}),l=c.props;for(M(l,c.opts.specialEasing);a>o;o++)if(r=q.prefilters[o].call(c,t,l,c.opts))return ot.isFunction(r.stop)&&(ot._queueHooks(c.elem,c.opts.queue).stop=ot.proxy(r.stop,r)),r;return ot.map(l,_,c),ot.isFunction(c.opts.start)&&c.opts.start.call(t,c),ot.fx.timer(ot.extend(u,{elem:t,anim:c,queue:c.opts.queue})),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always)}function F(t){return t.getAttribute&&t.getAttribute("class")||""}function L(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var r,i=0,o=e.toLowerCase().match(wt)||[];if(ot.isFunction(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(t[r]=t[r]||[]).unshift(n)):(t[r]=t[r]||[]).push(n)}}function H(t,e,n,r){function i(s){var u;return o[s]=!0,ot.each(t[s]||[],function(t,s){var c=s(e,n,r);return"string"!=typeof c||a||o[c]?a?!(u=c):void 0:(e.dataTypes.unshift(c),i(c),!1)}),u}var o={},a=t===Te;return i(e.dataTypes[0])||!o["*"]&&i("*")}function U(t,e){var n,r,i=ot.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((i[n]?t:r||(r={}))[n]=e[n]);return r&&ot.extend(!0,t,r),t}function B(t,e,n){for(var r,i,o,a,s=t.contents,u=t.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=t.mimeType||e.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||t.converters[i+" "+u[0]]){o=i;break}a||(a=i)}o=o||a}return o?(o!==u[0]&&u.unshift(o),n[o]):void 0}function W(t,e,n,r){var i,o,a,s,u,c={},l=t.dataTypes.slice();if(l[1])for(a in t.converters)c[a.toLowerCase()]=t.converters[a];for(o=l.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!u&&r&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),u=o,o=l.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(a=c[u+" "+o]||c["* "+o],!a)for(i in c)if(s=i.split(" "),s[1]===o&&(a=c[u+" "+s[0]]||c["* "+s[0]])){a===!0?a=c[i]:c[i]!==!0&&(o=s[0],l.unshift(s[1]));break}if(a!==!0)if(a&&t["throws"])e=a(e);else try{e=a(e)}catch(f){return{state:"parsererror",error:a?f:"No conversion from "+u+" to "+o}}}return{state:"success",data:e}}function z(t,e,n,r){var i;if(ot.isArray(e))ot.each(e,function(e,i){n||je.test(t)?r(t,i):z(t+"["+("object"==typeof i&&null!=i?e:"")+"]",i,n,r)});else if(n||"object"!==ot.type(e))r(t,e);else for(i in e)z(t+"["+i+"]",e[i],n,r)}function G(t){return ot.isWindow(t)?t:9===t.nodeType&&t.defaultView}var J=[],K=t.document,Q=J.slice,Y=J.concat,X=J.push,Z=J.indexOf,tt={},et=tt.toString,nt=tt.hasOwnProperty,rt={},it="2.2.4",ot=function(t,e){return new ot.fn.init(t,e)},at=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,st=/^-ms-/,ut=/-([\da-z])/gi,ct=function(t,e){return e.toUpperCase()};ot.fn=ot.prototype={jquery:it,constructor:ot,selector:"",length:0,toArray:function(){return Q.call(this)},get:function(t){return null!=t?0>t?this[t+this.length]:this[t]:Q.call(this)},pushStack:function(t){var e=ot.merge(this.constructor(),t);return e.prevObject=this,e.context=this.context,e},each:function(t){return ot.each(this,t)},map:function(t){return this.pushStack(ot.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(Q.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(0>t?e:0);return this.pushStack(n>=0&&e>n?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:X,sort:J.sort,splice:J.splice},ot.extend=ot.fn.extend=function(){var t,e,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[s]||{},s++),"object"==typeof a||ot.isFunction(a)||(a={}),s===u&&(a=this,s--);u>s;s++)if(null!=(t=arguments[s]))for(e in t)n=a[e],r=t[e],a!==r&&(c&&r&&(ot.isPlainObject(r)||(i=ot.isArray(r)))?(i?(i=!1,o=n&&ot.isArray(n)?n:[]):o=n&&ot.isPlainObject(n)?n:{},a[e]=ot.extend(c,o,r)):void 0!==r&&(a[e]=r));return a},ot.extend({expando:"jQuery"+(it+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===ot.type(t)},isArray:Array.isArray,isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){var e=t&&t.toString();return!ot.isArray(t)&&e-parseFloat(e)+1>=0},isPlainObject:function(t){var e;if("object"!==ot.type(t)||t.nodeType||ot.isWindow(t))return!1;if(t.constructor&&!nt.call(t,"constructor")&&!nt.call(t.constructor.prototype||{},"isPrototypeOf"))return!1;for(e in t);return void 0===e||nt.call(t,e)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?tt[et.call(t)]||"object":typeof t},globalEval:function(t){var e,n=eval;t=ot.trim(t),t&&(1===t.indexOf("use strict")?(e=K.createElement("script"),e.text=t,K.head.appendChild(e).parentNode.removeChild(e)):n(t))},camelCase:function(t){return t.replace(st,"ms-").replace(ut,ct)},nodeName:function(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()},each:function(t,e){var r,i=0;if(n(t))for(r=t.length;r>i&&e.call(t[i],i,t[i])!==!1;i++);else for(i in t)if(e.call(t[i],i,t[i])===!1)break;return t},trim:function(t){return null==t?"":(t+"").replace(at,"")},makeArray:function(t,e){var r=e||[];return null!=t&&(n(Object(t))?ot.merge(r,"string"==typeof t?[t]:t):X.call(r,t)),r},inArray:function(t,e,n){return null==e?-1:Z.call(e,t,n)},merge:function(t,e){for(var n=+e.length,r=0,i=t.length;n>r;r++)t[i++]=e[r];return t.length=i,t},grep:function(t,e,n){for(var r,i=[],o=0,a=t.length,s=!n;a>o;o++)r=!e(t[o],o),r!==s&&i.push(t[o]);return i},map:function(t,e,r){var i,o,a=0,s=[];if(n(t))for(i=t.length;i>a;a++)o=e(t[a],a,r),null!=o&&s.push(o);else for(a in t)o=e(t[a],a,r),null!=o&&s.push(o);return Y.apply([],s)},guid:1,proxy:function(t,e){var n,r,i;return"string"==typeof e&&(n=t[e],e=t,t=n),ot.isFunction(t)?(r=Q.call(arguments,2),i=function(){return t.apply(e||this,r.concat(Q.call(arguments)))},i.guid=t.guid=t.guid||ot.guid++,i):void 0},now:Date.now,support:rt}),"function"==typeof Symbol&&(ot.fn[Symbol.iterator]=J[Symbol.iterator]),ot.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){tt["[object "+e+"]"]=e.toLowerCase()});var lt=function(t){function e(t,e,n,r){var i,o,a,s,u,c,f,h,d=e&&e.ownerDocument,v=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==v&&9!==v&&11!==v)return n;if(!r&&((e?e.ownerDocument||e:F)!==R&&N(e),e=e||R,I)){if(11!==v&&(c=mt.exec(t)))if(i=c[1]){if(9===v){if(!(a=e.getElementById(i)))return n;if(a.id===i)return n.push(a),n}else if(d&&(a=d.getElementById(i))&&M(e,a)&&a.id===i)return n.push(a),n}else{if(c[2])return X.apply(n,e.getElementsByTagName(t)),n;if((i=c[3])&&w.getElementsByClassName&&e.getElementsByClassName)return X.apply(n,e.getElementsByClassName(i)),n}if(w.qsa&&!W[t+" "]&&(!P||!P.test(t))){if(1!==v)d=e,h=t;else if("object"!==e.nodeName.toLowerCase()){for((s=e.getAttribute("id"))?s=s.replace(yt,"\\$&"):e.setAttribute("id",s=q),f=E(t),o=f.length,u=pt.test(s)?"#"+s:"[id='"+s+"']";o--;)f[o]=u+" "+p(f[o]);h=f.join(","),d=$t.test(t)&&l(e.parentNode)||e}if(h)try{return X.apply(n,d.querySelectorAll(h)),n}catch(g){}finally{s===q&&e.removeAttribute("id")}}}return k(t.replace(st,"$1"),e,n,r)}function n(){function t(n,r){return e.push(n+" ")>x.cacheLength&&delete t[e.shift()],t[n+" "]=r}var e=[];return t}function r(t){return t[q]=!0,t}function i(t){var e=R.createElement("div");try{return!!t(e)}catch(n){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function o(t,e){for(var n=t.split("|"),r=n.length;r--;)x.attrHandle[n[r]]=e}function a(t,e){var n=e&&t,r=n&&1===t.nodeType&&1===e.nodeType&&(~e.sourceIndex||G)-(~t.sourceIndex||G);if(r)return r;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function s(t){return function(e){var n=e.nodeName.toLowerCase();return"input"===n&&e.type===t}}function u(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function c(t){return r(function(e){return e=+e,r(function(n,r){for(var i,o=t([],n.length,e),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}function l(t){return t&&"undefined"!=typeof t.getElementsByTagName&&t}function f(){}function p(t){for(var e=0,n=t.length,r="";n>e;e++)r+=t[e].value;return r}function h(t,e,n){var r=e.dir,i=n&&"parentNode"===r,o=H++;return e.first?function(e,n,o){for(;e=e[r];)if(1===e.nodeType||i)return t(e,n,o)}:function(e,n,a){var s,u,c,l=[L,o];if(a){for(;e=e[r];)if((1===e.nodeType||i)&&t(e,n,a))return!0}else for(;e=e[r];)if(1===e.nodeType||i){if(c=e[q]||(e[q]={}),u=c[e.uniqueID]||(c[e.uniqueID]={}),(s=u[r])&&s[0]===L&&s[1]===o)return l[2]=s[2];if(u[r]=l,l[2]=t(e,n,a))return!0}}}function d(t){return t.length>1?function(e,n,r){for(var i=t.length;i--;)if(!t[i](e,n,r))return!1;return!0}:t[0]}function v(t,n,r){for(var i=0,o=n.length;o>i;i++)e(t,n[i],r);return r}function g(t,e,n,r,i){for(var o,a=[],s=0,u=t.length,c=null!=e;u>s;s++)(o=t[s])&&(n&&!n(o,r,i)||(a.push(o),c&&e.push(s)));return a}function m(t,e,n,i,o,a){return i&&!i[q]&&(i=m(i)),o&&!o[q]&&(o=m(o,a)),r(function(r,a,s,u){var c,l,f,p=[],h=[],d=a.length,m=r||v(e||"*",s.nodeType?[s]:s,[]),$=!t||!r&&e?m:g(m,p,t,s,u),y=n?o||(r?t:d||i)?[]:a:$;if(n&&n($,y,s,u),i)for(c=g(y,h),i(c,[],s,u),l=c.length;l--;)(f=c[l])&&(y[h[l]]=!($[h[l]]=f));if(r){if(o||t){if(o){for(c=[],l=y.length;l--;)(f=y[l])&&c.push($[l]=f);o(null,y=[],c,u)}for(l=y.length;l--;)(f=y[l])&&(c=o?tt(r,f):p[l])>-1&&(r[c]=!(a[c]=f))}}else y=g(y===a?y.splice(d,y.length):y),o?o(null,a,y,u):X.apply(a,y)})}function $(t){for(var e,n,r,i=t.length,o=x.relative[t[0].type],a=o||x.relative[" "],s=o?1:0,u=h(function(t){return t===e},a,!0),c=h(function(t){return tt(e,t)>-1},a,!0),l=[function(t,n,r){var i=!o&&(r||n!==A)||((e=n).nodeType?u(t,n,r):c(t,n,r));return e=null,i}];i>s;s++)if(n=x.relative[t[s].type])l=[h(d(l),n)];else{if(n=x.filter[t[s].type].apply(null,t[s].matches),n[q]){for(r=++s;i>r&&!x.relative[t[r].type];r++);return m(s>1&&d(l),s>1&&p(t.slice(0,s-1).concat({value:" "===t[s-2].type?"*":""})).replace(st,"$1"),n,r>s&&$(t.slice(s,r)),i>r&&$(t=t.slice(r)),i>r&&p(t))}l.push(n)}return d(l)}function y(t,n){var i=n.length>0,o=t.length>0,a=function(r,a,s,u,c){var l,f,p,h=0,d="0",v=r&&[],m=[],$=A,y=r||o&&x.find.TAG("*",c),b=L+=null==$?1:Math.random()||.1,w=y.length;for(c&&(A=a===R||a||c);d!==w&&null!=(l=y[d]);d++){if(o&&l){for(f=0,a||l.ownerDocument===R||(N(l),s=!I);p=t[f++];)if(p(l,a||R,s)){u.push(l);break}c&&(L=b)}i&&((l=!p&&l)&&h--,r&&v.push(l))}if(h+=d,i&&d!==h){for(f=0;p=n[f++];)p(v,m,a,s);if(r){if(h>0)for(;d--;)v[d]||m[d]||(m[d]=Q.call(u));m=g(m)}X.apply(u,m),c&&!r&&m.length>0&&h+n.length>1&&e.uniqueSort(u)}return c&&(L=b,A=$),v};return i?r(a):a}var b,w,x,S,C,E,T,k,A,O,j,N,R,D,I,P,_,V,M,q="sizzle"+1*new Date,F=t.document,L=0,H=0,U=n(),B=n(),W=n(),z=function(t,e){return t===e&&(j=!0),0},G=1<<31,J={}.hasOwnProperty,K=[],Q=K.pop,Y=K.push,X=K.push,Z=K.slice,tt=function(t,e){for(var n=0,r=t.length;r>n;n++)if(t[n]===e)return n;return-1},et="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",nt="[\\x20\\t\\r\\n\\f]",rt="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",it="\\["+nt+"*("+rt+")(?:"+nt+"*([*^$|!~]?=)"+nt+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+rt+"))|)"+nt+"*\\]",ot=":("+rt+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+it+")*)|.*)\\)|)",at=new RegExp(nt+"+","g"),st=new RegExp("^"+nt+"+|((?:^|[^\\\\])(?:\\\\.)*)"+nt+"+$","g"),ut=new RegExp("^"+nt+"*,"+nt+"*"),ct=new RegExp("^"+nt+"*([>+~]|"+nt+")"+nt+"*"),lt=new RegExp("="+nt+"*([^\\]'\"]*?)"+nt+"*\\]","g"),ft=new RegExp(ot),pt=new RegExp("^"+rt+"$"),ht={ID:new RegExp("^#("+rt+")"),CLASS:new RegExp("^\\.("+rt+")"),TAG:new RegExp("^("+rt+"|[*])"),ATTR:new RegExp("^"+it),PSEUDO:new RegExp("^"+ot),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+nt+"*(even|odd|(([+-]|)(\\d*)n|)"+nt+"*(?:([+-]|)"+nt+"*(\\d+)|))"+nt+"*\\)|)","i"),bool:new RegExp("^(?:"+et+")$","i"),needsContext:new RegExp("^"+nt+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+nt+"*((?:-\\d)?\\d*)"+nt+"*\\)|)(?=[^-]|$)","i")},dt=/^(?:input|select|textarea|button)$/i,vt=/^h\d$/i,gt=/^[^{]+\{\s*\[native \w/,mt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,$t=/[+~]/,yt=/'|\\/g,bt=new RegExp("\\\\([\\da-f]{1,6}"+nt+"?|("+nt+")|.)","ig"),wt=function(t,e,n){var r="0x"+e-65536;return r!==r||n?e:0>r?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},xt=function(){N()};try{X.apply(K=Z.call(F.childNodes),F.childNodes),K[F.childNodes.length].nodeType}catch(St){X={apply:K.length?function(t,e){Y.apply(t,Z.call(e))}:function(t,e){for(var n=t.length,r=0;t[n++]=e[r++];);t.length=n-1}}}w=e.support={},C=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return e?"HTML"!==e.nodeName:!1},N=e.setDocument=function(t){var e,n,r=t?t.ownerDocument||t:F;return r!==R&&9===r.nodeType&&r.documentElement?(R=r,D=R.documentElement,I=!C(R),(n=R.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",xt,!1):n.attachEvent&&n.attachEvent("onunload",xt)),w.attributes=i(function(t){return t.className="i",!t.getAttribute("className")}),w.getElementsByTagName=i(function(t){return t.appendChild(R.createComment("")),!t.getElementsByTagName("*").length}),w.getElementsByClassName=gt.test(R.getElementsByClassName),w.getById=i(function(t){return D.appendChild(t).id=q,!R.getElementsByName||!R.getElementsByName(q).length}),w.getById?(x.find.ID=function(t,e){if("undefined"!=typeof e.getElementById&&I){var n=e.getElementById(t);return n?[n]:[]}},x.filter.ID=function(t){var e=t.replace(bt,wt);return function(t){return t.getAttribute("id")===e}}):(delete x.find.ID,x.filter.ID=function(t){var e=t.replace(bt,wt);return function(t){var n="undefined"!=typeof t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}}),x.find.TAG=w.getElementsByTagName?function(t,e){return"undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t):w.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,r=[],i=0,o=e.getElementsByTagName(t);if("*"===t){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},x.find.CLASS=w.getElementsByClassName&&function(t,e){return"undefined"!=typeof e.getElementsByClassName&&I?e.getElementsByClassName(t):void 0},_=[],P=[],(w.qsa=gt.test(R.querySelectorAll))&&(i(function(t){D.appendChild(t).innerHTML="<a id='"+q+"'></a><select id='"+q+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&P.push("[*^$]="+nt+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||P.push("\\["+nt+"*(?:value|"+et+")"),t.querySelectorAll("[id~="+q+"-]").length||P.push("~="),t.querySelectorAll(":checked").length||P.push(":checked"),t.querySelectorAll("a#"+q+"+*").length||P.push(".#.+[+~]")}),i(function(t){var e=R.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&P.push("name"+nt+"*[*^$|!~]?="),t.querySelectorAll(":enabled").length||P.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),P.push(",.*:")})),(w.matchesSelector=gt.test(V=D.matches||D.webkitMatchesSelector||D.mozMatchesSelector||D.oMatchesSelector||D.msMatchesSelector))&&i(function(t){w.disconnectedMatch=V.call(t,"div"),V.call(t,"[s!='']:x"),_.push("!=",ot)}),P=P.length&&new RegExp(P.join("|")),_=_.length&&new RegExp(_.join("|")),e=gt.test(D.compareDocumentPosition),M=e||gt.test(D.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,r=e&&e.parentNode;return t===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):t.compareDocumentPosition&&16&t.compareDocumentPosition(r)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},z=e?function(t,e){if(t===e)return j=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n?n:(n=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1,1&n||!w.sortDetached&&e.compareDocumentPosition(t)===n?t===R||t.ownerDocument===F&&M(F,t)?-1:e===R||e.ownerDocument===F&&M(F,e)?1:O?tt(O,t)-tt(O,e):0:4&n?-1:1)}:function(t,e){if(t===e)return j=!0,0;var n,r=0,i=t.parentNode,o=e.parentNode,s=[t],u=[e];if(!i||!o)return t===R?-1:e===R?1:i?-1:o?1:O?tt(O,t)-tt(O,e):0;if(i===o)return a(t,e);for(n=t;n=n.parentNode;)s.unshift(n);for(n=e;n=n.parentNode;)u.unshift(n);for(;s[r]===u[r];)r++;return r?a(s[r],u[r]):s[r]===F?-1:u[r]===F?1:0},R):R},e.matches=function(t,n){return e(t,null,null,n)},e.matchesSelector=function(t,n){if((t.ownerDocument||t)!==R&&N(t),n=n.replace(lt,"='$1']"),w.matchesSelector&&I&&!W[n+" "]&&(!_||!_.test(n))&&(!P||!P.test(n)))try{var r=V.call(t,n);if(r||w.disconnectedMatch||t.document&&11!==t.document.nodeType)return r}catch(i){}return e(n,R,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==R&&N(t),M(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==R&&N(t);var n=x.attrHandle[e.toLowerCase()],r=n&&J.call(x.attrHandle,e.toLowerCase())?n(t,e,!I):void 0;return void 0!==r?r:w.attributes||!I?t.getAttribute(e):(r=t.getAttributeNode(e))&&r.specified?r.value:null},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,n=[],r=0,i=0;if(j=!w.detectDuplicates,O=!w.sortStable&&t.slice(0),t.sort(z),j){for(;e=t[i++];)e===t[i]&&(r=n.push(i));for(;r--;)t.splice(n[r],1)}return O=null,t},S=e.getText=function(t){var e,n="",r=0,i=t.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=S(t)}else if(3===i||4===i)return t.nodeValue}else for(;e=t[r++];)n+=S(e);return n},x=e.selectors={cacheLength:50,createPseudo:r,match:ht,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(bt,wt),t[3]=(t[3]||t[4]||t[5]||"").replace(bt,wt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return ht.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&ft.test(n)&&(e=E(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(bt,wt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=U[t+" "];return e||(e=new RegExp("(^|"+nt+")"+t+"("+nt+"|$)"))&&U(t,function(t){return e.test("string"==typeof t.className&&t.className||"undefined"!=typeof t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,n,r){return function(i){var o=e.attr(i,t);return null==o?"!="===n:n?(o+="","="===n?o===r:"!="===n?o!==r:"^="===n?r&&0===o.indexOf(r):"*="===n?r&&o.indexOf(r)>-1:"$="===n?r&&o.slice(-r.length)===r:"~="===n?(" "+o.replace(at," ")+" ").indexOf(r)>-1:"|="===n?o===r||o.slice(0,r.length+1)===r+"-":!1):!0}},CHILD:function(t,e,n,r,i){var o="nth"!==t.slice(0,3),a="last"!==t.slice(-4),s="of-type"===e;return 1===r&&0===i?function(t){return!!t.parentNode}:function(e,n,u){var c,l,f,p,h,d,v=o!==a?"nextSibling":"previousSibling",g=e.parentNode,m=s&&e.nodeName.toLowerCase(),$=!u&&!s,y=!1;if(g){if(o){for(;v;){for(p=e;p=p[v];)if(s?p.nodeName.toLowerCase()===m:1===p.nodeType)return!1;d=v="only"===t&&!d&&"nextSibling"}return!0}if(d=[a?g.firstChild:g.lastChild],a&&$){for(p=g,f=p[q]||(p[q]={}),l=f[p.uniqueID]||(f[p.uniqueID]={}),c=l[t]||[],h=c[0]===L&&c[1],y=h&&c[2],p=h&&g.childNodes[h];p=++h&&p&&p[v]||(y=h=0)||d.pop();)if(1===p.nodeType&&++y&&p===e){l[t]=[L,h,y];break}}else if($&&(p=e,f=p[q]||(p[q]={}),l=f[p.uniqueID]||(f[p.uniqueID]={}),c=l[t]||[],h=c[0]===L&&c[1],y=h),y===!1)for(;(p=++h&&p&&p[v]||(y=h=0)||d.pop())&&((s?p.nodeName.toLowerCase()!==m:1!==p.nodeType)||!++y||($&&(f=p[q]||(p[q]={}),l=f[p.uniqueID]||(f[p.uniqueID]={}),l[t]=[L,y]),p!==e)););return y-=i,y===r||y%r===0&&y/r>=0}}},PSEUDO:function(t,n){var i,o=x.pseudos[t]||x.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return o[q]?o(n):o.length>1?(i=[t,t,"",n],x.setFilters.hasOwnProperty(t.toLowerCase())?r(function(t,e){for(var r,i=o(t,n),a=i.length;a--;)r=tt(t,i[a]),t[r]=!(e[r]=i[a])}):function(t){return o(t,0,i)}):o}},pseudos:{not:r(function(t){var e=[],n=[],i=T(t.replace(st,"$1"));return i[q]?r(function(t,e,n,r){for(var o,a=i(t,null,r,[]),s=t.length;s--;)(o=a[s])&&(t[s]=!(e[s]=o))}):function(t,r,o){return e[0]=t,i(e,null,o,n),e[0]=null,!n.pop()}}),has:r(function(t){return function(n){return e(t,n).length>0}}),contains:r(function(t){return t=t.replace(bt,wt),function(e){return(e.textContent||e.innerText||S(e)).indexOf(t)>-1}}),lang:r(function(t){return pt.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(bt,wt).toLowerCase(),function(e){var n;do if(n=I?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return n=n.toLowerCase(),n===t||0===n.indexOf(t+"-");while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===D},focus:function(t){return t===R.activeElement&&(!R.hasFocus||R.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:function(t){return t.disabled===!1},disabled:function(t){return t.disabled===!0},checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,t.selected===!0},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!x.pseudos.empty(t)},header:function(t){return vt.test(t.nodeName)},input:function(t){return dt.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:c(function(){return[0]}),last:c(function(t,e){return[e-1]}),eq:c(function(t,e,n){return[0>n?n+e:n]}),even:c(function(t,e){for(var n=0;e>n;n+=2)t.push(n);return t}),odd:c(function(t,e){
for(var n=1;e>n;n+=2)t.push(n);return t}),lt:c(function(t,e,n){for(var r=0>n?n+e:n;--r>=0;)t.push(r);return t}),gt:c(function(t,e,n){for(var r=0>n?n+e:n;++r<e;)t.push(r);return t})}},x.pseudos.nth=x.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[b]=s(b);for(b in{submit:!0,reset:!0})x.pseudos[b]=u(b);return f.prototype=x.filters=x.pseudos,x.setFilters=new f,E=e.tokenize=function(t,n){var r,i,o,a,s,u,c,l=B[t+" "];if(l)return n?0:l.slice(0);for(s=t,u=[],c=x.preFilter;s;){r&&!(i=ut.exec(s))||(i&&(s=s.slice(i[0].length)||s),u.push(o=[])),r=!1,(i=ct.exec(s))&&(r=i.shift(),o.push({value:r,type:i[0].replace(st," ")}),s=s.slice(r.length));for(a in x.filter)!(i=ht[a].exec(s))||c[a]&&!(i=c[a](i))||(r=i.shift(),o.push({value:r,type:a,matches:i}),s=s.slice(r.length));if(!r)break}return n?s.length:s?e.error(t):B(t,u).slice(0)},T=e.compile=function(t,e){var n,r=[],i=[],o=W[t+" "];if(!o){for(e||(e=E(t)),n=e.length;n--;)o=$(e[n]),o[q]?r.push(o):i.push(o);o=W(t,y(i,r)),o.selector=t}return o},k=e.select=function(t,e,n,r){var i,o,a,s,u,c="function"==typeof t&&t,f=!r&&E(t=c.selector||t);if(n=n||[],1===f.length){if(o=f[0]=f[0].slice(0),o.length>2&&"ID"===(a=o[0]).type&&w.getById&&9===e.nodeType&&I&&x.relative[o[1].type]){if(e=(x.find.ID(a.matches[0].replace(bt,wt),e)||[])[0],!e)return n;c&&(e=e.parentNode),t=t.slice(o.shift().value.length)}for(i=ht.needsContext.test(t)?0:o.length;i--&&(a=o[i],!x.relative[s=a.type]);)if((u=x.find[s])&&(r=u(a.matches[0].replace(bt,wt),$t.test(o[0].type)&&l(e.parentNode)||e))){if(o.splice(i,1),t=r.length&&p(o),!t)return X.apply(n,r),n;break}}return(c||T(t,f))(r,e,!I,n,!e||$t.test(t)&&l(e.parentNode)||e),n},w.sortStable=q.split("").sort(z).join("")===q,w.detectDuplicates=!!j,N(),w.sortDetached=i(function(t){return 1&t.compareDocumentPosition(R.createElement("div"))}),i(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||o("type|href|height|width",function(t,e,n){return n?void 0:t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),w.attributes&&i(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||o("value",function(t,e,n){return n||"input"!==t.nodeName.toLowerCase()?void 0:t.defaultValue}),i(function(t){return null==t.getAttribute("disabled")})||o(et,function(t,e,n){var r;return n?void 0:t[e]===!0?e.toLowerCase():(r=t.getAttributeNode(e))&&r.specified?r.value:null}),e}(t);ot.find=lt,ot.expr=lt.selectors,ot.expr[":"]=ot.expr.pseudos,ot.uniqueSort=ot.unique=lt.uniqueSort,ot.text=lt.getText,ot.isXMLDoc=lt.isXML,ot.contains=lt.contains;var ft=function(t,e,n){for(var r=[],i=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(i&&ot(t).is(n))break;r.push(t)}return r},pt=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},ht=ot.expr.match.needsContext,dt=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,vt=/^.[^:#\[\.,]*$/;ot.filter=function(t,e,n){var r=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===r.nodeType?ot.find.matchesSelector(r,t)?[r]:[]:ot.find.matches(t,ot.grep(e,function(t){return 1===t.nodeType}))},ot.fn.extend({find:function(t){var e,n=this.length,r=[],i=this;if("string"!=typeof t)return this.pushStack(ot(t).filter(function(){for(e=0;n>e;e++)if(ot.contains(i[e],this))return!0}));for(e=0;n>e;e++)ot.find(t,i[e],r);return r=this.pushStack(n>1?ot.unique(r):r),r.selector=this.selector?this.selector+" "+t:t,r},filter:function(t){return this.pushStack(r(this,t||[],!1))},not:function(t){return this.pushStack(r(this,t||[],!0))},is:function(t){return!!r(this,"string"==typeof t&&ht.test(t)?ot(t):t||[],!1).length}});var gt,mt=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,$t=ot.fn.init=function(t,e,n){var r,i;if(!t)return this;if(n=n||gt,"string"==typeof t){if(r="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:mt.exec(t),!r||!r[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(r[1]){if(e=e instanceof ot?e[0]:e,ot.merge(this,ot.parseHTML(r[1],e&&e.nodeType?e.ownerDocument||e:K,!0)),dt.test(r[1])&&ot.isPlainObject(e))for(r in e)ot.isFunction(this[r])?this[r](e[r]):this.attr(r,e[r]);return this}return i=K.getElementById(r[2]),i&&i.parentNode&&(this.length=1,this[0]=i),this.context=K,this.selector=t,this}return t.nodeType?(this.context=this[0]=t,this.length=1,this):ot.isFunction(t)?void 0!==n.ready?n.ready(t):t(ot):(void 0!==t.selector&&(this.selector=t.selector,this.context=t.context),ot.makeArray(t,this))};$t.prototype=ot.fn,gt=ot(K);var yt=/^(?:parents|prev(?:Until|All))/,bt={children:!0,contents:!0,next:!0,prev:!0};ot.fn.extend({has:function(t){var e=ot(t,this),n=e.length;return this.filter(function(){for(var t=0;n>t;t++)if(ot.contains(this,e[t]))return!0})},closest:function(t,e){for(var n,r=0,i=this.length,o=[],a=ht.test(t)||"string"!=typeof t?ot(t,e||this.context):0;i>r;r++)for(n=this[r];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&ot.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?ot.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?Z.call(ot(t),this[0]):Z.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(ot.uniqueSort(ot.merge(this.get(),ot(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),ot.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return ft(t,"parentNode")},parentsUntil:function(t,e,n){return ft(t,"parentNode",n)},next:function(t){return i(t,"nextSibling")},prev:function(t){return i(t,"previousSibling")},nextAll:function(t){return ft(t,"nextSibling")},prevAll:function(t){return ft(t,"previousSibling")},nextUntil:function(t,e,n){return ft(t,"nextSibling",n)},prevUntil:function(t,e,n){return ft(t,"previousSibling",n)},siblings:function(t){return pt((t.parentNode||{}).firstChild,t)},children:function(t){return pt(t.firstChild)},contents:function(t){return t.contentDocument||ot.merge([],t.childNodes)}},function(t,e){ot.fn[t]=function(n,r){var i=ot.map(this,e,n);return"Until"!==t.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=ot.filter(r,i)),this.length>1&&(bt[t]||ot.uniqueSort(i),yt.test(t)&&i.reverse()),this.pushStack(i)}});var wt=/\S+/g;ot.Callbacks=function(t){t="string"==typeof t?o(t):ot.extend({},t);var e,n,r,i,a=[],s=[],u=-1,c=function(){for(i=t.once,r=e=!0;s.length;u=-1)for(n=s.shift();++u<a.length;)a[u].apply(n[0],n[1])===!1&&t.stopOnFalse&&(u=a.length,n=!1);t.memory||(n=!1),e=!1,i&&(a=n?[]:"")},l={add:function(){return a&&(n&&!e&&(u=a.length-1,s.push(n)),function r(e){ot.each(e,function(e,n){ot.isFunction(n)?t.unique&&l.has(n)||a.push(n):n&&n.length&&"string"!==ot.type(n)&&r(n)})}(arguments),n&&!e&&c()),this},remove:function(){return ot.each(arguments,function(t,e){for(var n;(n=ot.inArray(e,a,n))>-1;)a.splice(n,1),u>=n&&u--}),this},has:function(t){return t?ot.inArray(t,a)>-1:a.length>0},empty:function(){return a&&(a=[]),this},disable:function(){return i=s=[],a=n="",this},disabled:function(){return!a},lock:function(){return i=s=[],n||(a=n=""),this},locked:function(){return!!i},fireWith:function(t,n){return i||(n=n||[],n=[t,n.slice?n.slice():n],s.push(n),e||c()),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!r}};return l},ot.extend({Deferred:function(t){var e=[["resolve","done",ot.Callbacks("once memory"),"resolved"],["reject","fail",ot.Callbacks("once memory"),"rejected"],["notify","progress",ot.Callbacks("memory")]],n="pending",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var t=arguments;return ot.Deferred(function(n){ot.each(e,function(e,o){var a=ot.isFunction(t[e])&&t[e];i[o[1]](function(){var t=a&&a.apply(this,arguments);t&&ot.isFunction(t.promise)?t.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[o[0]+"With"](this===r?n.promise():this,a?[t]:arguments)})}),t=null}).promise()},promise:function(t){return null!=t?ot.extend(t,r):r}},i={};return r.pipe=r.then,ot.each(e,function(t,o){var a=o[2],s=o[3];r[o[1]]=a.add,s&&a.add(function(){n=s},e[1^t][2].disable,e[2][2].lock),i[o[0]]=function(){return i[o[0]+"With"](this===i?r:this,arguments),this},i[o[0]+"With"]=a.fireWith}),r.promise(i),t&&t.call(i,i),i},when:function(t){var e,n,r,i=0,o=Q.call(arguments),a=o.length,s=1!==a||t&&ot.isFunction(t.promise)?a:0,u=1===s?t:ot.Deferred(),c=function(t,n,r){return function(i){n[t]=this,r[t]=arguments.length>1?Q.call(arguments):i,r===e?u.notifyWith(n,r):--s||u.resolveWith(n,r)}};if(a>1)for(e=new Array(a),n=new Array(a),r=new Array(a);a>i;i++)o[i]&&ot.isFunction(o[i].promise)?o[i].promise().progress(c(i,n,e)).done(c(i,r,o)).fail(u.reject):--s;return s||u.resolveWith(r,o),u.promise()}});var xt;ot.fn.ready=function(t){return ot.ready.promise().done(t),this},ot.extend({isReady:!1,readyWait:1,holdReady:function(t){t?ot.readyWait++:ot.ready(!0)},ready:function(t){(t===!0?--ot.readyWait:ot.isReady)||(ot.isReady=!0,t!==!0&&--ot.readyWait>0||(xt.resolveWith(K,[ot]),ot.fn.triggerHandler&&(ot(K).triggerHandler("ready"),ot(K).off("ready"))))}}),ot.ready.promise=function(e){return xt||(xt=ot.Deferred(),"complete"===K.readyState||"loading"!==K.readyState&&!K.documentElement.doScroll?t.setTimeout(ot.ready):(K.addEventListener("DOMContentLoaded",a),t.addEventListener("load",a))),xt.promise(e)},ot.ready.promise();var St=function(t,e,n,r,i,o,a){var s=0,u=t.length,c=null==n;if("object"===ot.type(n)){i=!0;for(s in n)St(t,e,s,n[s],!0,o,a)}else if(void 0!==r&&(i=!0,ot.isFunction(r)||(a=!0),c&&(a?(e.call(t,r),e=null):(c=e,e=function(t,e,n){return c.call(ot(t),n)})),e))for(;u>s;s++)e(t[s],n,a?r:r.call(t[s],s,e(t[s],n)));return i?t:c?e.call(t):u?e(t[0],n):o},Ct=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};s.uid=1,s.prototype={register:function(t,e){var n=e||{};return t.nodeType?t[this.expando]=n:Object.defineProperty(t,this.expando,{value:n,writable:!0,configurable:!0}),t[this.expando]},cache:function(t){if(!Ct(t))return{};var e=t[this.expando];return e||(e={},Ct(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var r,i=this.cache(t);if("string"==typeof e)i[e]=n;else for(r in e)i[r]=e[r];return i},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][e]},access:function(t,e,n){var r;return void 0===e||e&&"string"==typeof e&&void 0===n?(r=this.get(t,e),void 0!==r?r:this.get(t,ot.camelCase(e))):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,r,i,o=t[this.expando];if(void 0!==o){if(void 0===e)this.register(t);else{ot.isArray(e)?r=e.concat(e.map(ot.camelCase)):(i=ot.camelCase(e),e in o?r=[e,i]:(r=i,r=r in o?[r]:r.match(wt)||[])),n=r.length;for(;n--;)delete o[r[n]]}(void 0===e||ot.isEmptyObject(o))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!ot.isEmptyObject(e)}};var Et=new s,Tt=new s,kt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,At=/[A-Z]/g;ot.extend({hasData:function(t){return Tt.hasData(t)||Et.hasData(t)},data:function(t,e,n){return Tt.access(t,e,n)},removeData:function(t,e){Tt.remove(t,e)},_data:function(t,e,n){return Et.access(t,e,n)},_removeData:function(t,e){Et.remove(t,e)}}),ot.fn.extend({data:function(t,e){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===t){if(this.length&&(i=Tt.get(o),1===o.nodeType&&!Et.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&(r=a[n].name,0===r.indexOf("data-")&&(r=ot.camelCase(r.slice(5)),u(o,r,i[r])));Et.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof t?this.each(function(){Tt.set(this,t)}):St(this,function(e){var n,r;if(o&&void 0===e){if(n=Tt.get(o,t)||Tt.get(o,t.replace(At,"-$&").toLowerCase()),void 0!==n)return n;if(r=ot.camelCase(t),n=Tt.get(o,r),void 0!==n)return n;if(n=u(o,r,void 0),void 0!==n)return n}else r=ot.camelCase(t),this.each(function(){var n=Tt.get(this,r);Tt.set(this,r,e),t.indexOf("-")>-1&&void 0!==n&&Tt.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){Tt.remove(this,t)})}}),ot.extend({queue:function(t,e,n){var r;return t?(e=(e||"fx")+"queue",r=Et.get(t,e),n&&(!r||ot.isArray(n)?r=Et.access(t,e,ot.makeArray(n)):r.push(n)),r||[]):void 0},dequeue:function(t,e){e=e||"fx";var n=ot.queue(t,e),r=n.length,i=n.shift(),o=ot._queueHooks(t,e),a=function(){ot.dequeue(t,e)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===e&&n.unshift("inprogress"),delete o.stop,i.call(t,a,o)),!r&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return Et.get(t,n)||Et.access(t,n,{empty:ot.Callbacks("once memory").add(function(){Et.remove(t,[e+"queue",n])})})}}),ot.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?ot.queue(this[0],t):void 0===e?this:this.each(function(){var n=ot.queue(this,t,e);ot._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&ot.dequeue(this,t)})},dequeue:function(t){return this.each(function(){ot.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,r=1,i=ot.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)n=Et.get(o[a],t+"queueHooks"),n&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(e)}});var Ot=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,jt=new RegExp("^(?:([+-])=|)("+Ot+")([a-z%]*)$","i"),Nt=["Top","Right","Bottom","Left"],Rt=function(t,e){return t=e||t,"none"===ot.css(t,"display")||!ot.contains(t.ownerDocument,t)},Dt=/^(?:checkbox|radio)$/i,It=/<([\w:-]+)/,Pt=/^$|\/(?:java|ecma)script/i,_t={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};_t.optgroup=_t.option,_t.tbody=_t.tfoot=_t.colgroup=_t.caption=_t.thead,_t.th=_t.td;var Vt=/<|&#?\w+;/;!function(){var t=K.createDocumentFragment(),e=t.appendChild(K.createElement("div")),n=K.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),e.appendChild(n),rt.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",rt.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var Mt=/^key/,qt=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ft=/^([^.]*)(?:\.(.+)|)/;ot.event={global:{},add:function(t,e,n,r,i){var o,a,s,u,c,l,f,p,h,d,v,g=Et.get(t);if(g)for(n.handler&&(o=n,n=o.handler,i=o.selector),n.guid||(n.guid=ot.guid++),(u=g.events)||(u=g.events={}),(a=g.handle)||(a=g.handle=function(e){return"undefined"!=typeof ot&&ot.event.triggered!==e.type?ot.event.dispatch.apply(t,arguments):void 0}),e=(e||"").match(wt)||[""],c=e.length;c--;)s=Ft.exec(e[c])||[],h=v=s[1],d=(s[2]||"").split(".").sort(),h&&(f=ot.event.special[h]||{},h=(i?f.delegateType:f.bindType)||h,f=ot.event.special[h]||{},l=ot.extend({type:h,origType:v,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&ot.expr.match.needsContext.test(i),namespace:d.join(".")},o),(p=u[h])||(p=u[h]=[],p.delegateCount=0,f.setup&&f.setup.call(t,r,d,a)!==!1||t.addEventListener&&t.addEventListener(h,a)),f.add&&(f.add.call(t,l),l.handler.guid||(l.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,l):p.push(l),ot.event.global[h]=!0)},remove:function(t,e,n,r,i){var o,a,s,u,c,l,f,p,h,d,v,g=Et.hasData(t)&&Et.get(t);if(g&&(u=g.events)){for(e=(e||"").match(wt)||[""],c=e.length;c--;)if(s=Ft.exec(e[c])||[],h=v=s[1],d=(s[2]||"").split(".").sort(),h){for(f=ot.event.special[h]||{},h=(r?f.delegateType:f.bindType)||h,p=u[h]||[],s=s[2]&&new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=p.length;o--;)l=p[o],!i&&v!==l.origType||n&&n.guid!==l.guid||s&&!s.test(l.namespace)||r&&r!==l.selector&&("**"!==r||!l.selector)||(p.splice(o,1),l.selector&&p.delegateCount--,f.remove&&f.remove.call(t,l));a&&!p.length&&(f.teardown&&f.teardown.call(t,d,g.handle)!==!1||ot.removeEvent(t,h,g.handle),delete u[h])}else for(h in u)ot.event.remove(t,h+e[c],n,r,!0);ot.isEmptyObject(u)&&Et.remove(t,"handle events")}},dispatch:function(t){t=ot.event.fix(t);var e,n,r,i,o,a=[],s=Q.call(arguments),u=(Et.get(this,"events")||{})[t.type]||[],c=ot.event.special[t.type]||{};if(s[0]=t,t.delegateTarget=this,!c.preDispatch||c.preDispatch.call(this,t)!==!1){for(a=ot.event.handlers.call(this,t,u),e=0;(i=a[e++])&&!t.isPropagationStopped();)for(t.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!t.isImmediatePropagationStopped();)t.rnamespace&&!t.rnamespace.test(o.namespace)||(t.handleObj=o,t.data=o.data,r=((ot.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s),void 0!==r&&(t.result=r)===!1&&(t.preventDefault(),t.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,t),t.result}},handlers:function(t,e){var n,r,i,o,a=[],s=e.delegateCount,u=t.target;if(s&&u.nodeType&&("click"!==t.type||isNaN(t.button)||t.button<1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&(u.disabled!==!0||"click"!==t.type)){for(r=[],n=0;s>n;n++)o=e[n],i=o.selector+" ",void 0===r[i]&&(r[i]=o.needsContext?ot(i,this).index(u)>-1:ot.find(i,this,null,[u]).length),r[i]&&r.push(o);r.length&&a.push({elem:u,handlers:r})}return s<e.length&&a.push({elem:this,handlers:e.slice(s)}),a},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(t,e){return null==t.which&&(t.which=null!=e.charCode?e.charCode:e.keyCode),t}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(t,e){var n,r,i,o=e.button;return null==t.pageX&&null!=e.clientX&&(n=t.target.ownerDocument||K,r=n.documentElement,i=n.body,t.pageX=e.clientX+(r&&r.scrollLeft||i&&i.scrollLeft||0)-(r&&r.clientLeft||i&&i.clientLeft||0),t.pageY=e.clientY+(r&&r.scrollTop||i&&i.scrollTop||0)-(r&&r.clientTop||i&&i.clientTop||0)),t.which||void 0===o||(t.which=1&o?1:2&o?3:4&o?2:0),t}},fix:function(t){if(t[ot.expando])return t;var e,n,r,i=t.type,o=t,a=this.fixHooks[i];for(a||(this.fixHooks[i]=a=qt.test(i)?this.mouseHooks:Mt.test(i)?this.keyHooks:{}),r=a.props?this.props.concat(a.props):this.props,t=new ot.Event(o),e=r.length;e--;)n=r[e],t[n]=o[n];return t.target||(t.target=K),3===t.target.nodeType&&(t.target=t.target.parentNode),a.filter?a.filter(t,o):t},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==v()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===v()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&ot.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(t){return ot.nodeName(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},ot.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},ot.Event=function(t,e){return this instanceof ot.Event?(t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&t.returnValue===!1?h:d):this.type=t,e&&ot.extend(this,e),this.timeStamp=t&&t.timeStamp||ot.now(),void(this[ot.expando]=!0)):new ot.Event(t,e)},ot.Event.prototype={constructor:ot.Event,isDefaultPrevented:d,isPropagationStopped:d,isImmediatePropagationStopped:d,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=h,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=h,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=h,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},ot.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){ot.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,r=this,i=t.relatedTarget,o=t.handleObj;return i&&(i===r||ot.contains(r,i))||(t.type=o.origType,n=o.handler.apply(this,arguments),t.type=e),n}}}),ot.fn.extend({on:function(t,e,n,r){return g(this,t,e,n,r)},one:function(t,e,n,r){return g(this,t,e,n,r,1)},off:function(t,e,n){var r,i;if(t&&t.preventDefault&&t.handleObj)return r=t.handleObj,ot(t.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof t){for(i in t)this.off(i,e,t[i]);return this}return e!==!1&&"function"!=typeof e||(n=e,e=void 0),n===!1&&(n=d),this.each(function(){ot.event.remove(this,t,n,e)})}});var Lt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,Ht=/<script|<style|<link/i,Ut=/checked\s*(?:[^=]|=\s*.checked.)/i,Bt=/^true\/(.*)/,Wt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;ot.extend({htmlPrefilter:function(t){return t.replace(Lt,"<$1></$2>")},clone:function(t,e,n){var r,i,o,a,s=t.cloneNode(!0),u=ot.contains(t.ownerDocument,t);if(!(rt.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||ot.isXMLDoc(t)))for(a=l(s),o=l(t),r=0,i=o.length;i>r;r++)w(o[r],a[r]);if(e)if(n)for(o=o||l(t),a=a||l(s),r=0,i=o.length;i>r;r++)b(o[r],a[r]);else b(t,s);return a=l(s,"script"),a.length>0&&f(a,!u&&l(t,"script")),s},cleanData:function(t){for(var e,n,r,i=ot.event.special,o=0;void 0!==(n=t[o]);o++)if(Ct(n)){if(e=n[Et.expando]){if(e.events)for(r in e.events)i[r]?ot.event.remove(n,r):ot.removeEvent(n,r,e.handle);n[Et.expando]=void 0}n[Tt.expando]&&(n[Tt.expando]=void 0)}}}),ot.fn.extend({domManip:x,detach:function(t){return S(this,t,!0)},remove:function(t){return S(this,t)},text:function(t){return St(this,function(t){return void 0===t?ot.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return x(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=m(this,t);e.appendChild(t)}})},prepend:function(){return x(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=m(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return x(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return x(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(ot.cleanData(l(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null==t?!1:t,e=null==e?t:e,this.map(function(){return ot.clone(this,t,e)})},html:function(t){return St(this,function(t){var e=this[0]||{},n=0,r=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Ht.test(t)&&!_t[(It.exec(t)||["",""])[1].toLowerCase()]){t=ot.htmlPrefilter(t);try{for(;r>n;n++)e=this[n]||{},1===e.nodeType&&(ot.cleanData(l(e,!1)),e.innerHTML=t);e=0}catch(i){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return x(this,arguments,function(e){var n=this.parentNode;ot.inArray(this,t)<0&&(ot.cleanData(l(this)),n&&n.replaceChild(e,this))},t)}}),ot.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){ot.fn[t]=function(t){for(var n,r=[],i=ot(t),o=i.length-1,a=0;o>=a;a++)n=a===o?this:this.clone(!0),ot(i[a])[e](n),X.apply(r,n.get());return this.pushStack(r)}});var zt,Gt={HTML:"block",BODY:"block"},Jt=/^margin/,Kt=new RegExp("^("+Ot+")(?!px)[a-z%]+$","i"),Qt=function(e){var n=e.ownerDocument.defaultView;return n&&n.opener||(n=t),n.getComputedStyle(e)},Yt=function(t,e,n,r){var i,o,a={};for(o in e)a[o]=t.style[o],t.style[o]=e[o];i=n.apply(t,r||[]);for(o in e)t.style[o]=a[o];return i},Xt=K.documentElement;!function(){function e(){s.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",s.innerHTML="",Xt.appendChild(a);var e=t.getComputedStyle(s);n="1%"!==e.top,o="2px"===e.marginLeft,r="4px"===e.width,s.style.marginRight="50%",i="4px"===e.marginRight,Xt.removeChild(a)}var n,r,i,o,a=K.createElement("div"),s=K.createElement("div");s.style&&(s.style.backgroundClip="content-box",s.cloneNode(!0).style.backgroundClip="",rt.clearCloneStyle="content-box"===s.style.backgroundClip,a.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",a.appendChild(s),ot.extend(rt,{pixelPosition:function(){return e(),n},boxSizingReliable:function(){return null==r&&e(),r},pixelMarginRight:function(){return null==r&&e(),i},reliableMarginLeft:function(){return null==r&&e(),o},reliableMarginRight:function(){var e,n=s.appendChild(K.createElement("div"));return n.style.cssText=s.style.cssText="-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",n.style.marginRight=n.style.width="0",s.style.width="1px",Xt.appendChild(a),e=!parseFloat(t.getComputedStyle(n).marginRight),Xt.removeChild(a),s.removeChild(n),e}}))}();var Zt=/^(none|table(?!-c[ea]).+)/,te={position:"absolute",visibility:"hidden",display:"block"},ee={letterSpacing:"0",fontWeight:"400"},ne=["Webkit","O","Moz","ms"],re=K.createElement("div").style;ot.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=T(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(t,e,n,r){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var i,o,a,s=ot.camelCase(e),u=t.style;return e=ot.cssProps[s]||(ot.cssProps[s]=A(s)||s),a=ot.cssHooks[e]||ot.cssHooks[s],void 0===n?a&&"get"in a&&void 0!==(i=a.get(t,!1,r))?i:u[e]:(o=typeof n,"string"===o&&(i=jt.exec(n))&&i[1]&&(n=c(t,e,i),o="number"),null!=n&&n===n&&("number"===o&&(n+=i&&i[3]||(ot.cssNumber[s]?"":"px")),rt.clearCloneStyle||""!==n||0!==e.indexOf("background")||(u[e]="inherit"),a&&"set"in a&&void 0===(n=a.set(t,n,r))||(u[e]=n)),void 0)}},css:function(t,e,n,r){var i,o,a,s=ot.camelCase(e);return e=ot.cssProps[s]||(ot.cssProps[s]=A(s)||s),a=ot.cssHooks[e]||ot.cssHooks[s],a&&"get"in a&&(i=a.get(t,!0,n)),void 0===i&&(i=T(t,e,r)),"normal"===i&&e in ee&&(i=ee[e]),""===n||n?(o=parseFloat(i),n===!0||isFinite(o)?o||0:i):i}}),ot.each(["height","width"],function(t,e){ot.cssHooks[e]={get:function(t,n,r){return n?Zt.test(ot.css(t,"display"))&&0===t.offsetWidth?Yt(t,te,function(){return N(t,e,r)}):N(t,e,r):void 0},set:function(t,n,r){var i,o=r&&Qt(t),a=r&&j(t,e,r,"border-box"===ot.css(t,"boxSizing",!1,o),o);return a&&(i=jt.exec(n))&&"px"!==(i[3]||"px")&&(t.style[e]=n,n=ot.css(t,e)),O(t,n,a)}}}),ot.cssHooks.marginLeft=k(rt.reliableMarginLeft,function(t,e){return e?(parseFloat(T(t,"marginLeft"))||t.getBoundingClientRect().left-Yt(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px":void 0}),ot.cssHooks.marginRight=k(rt.reliableMarginRight,function(t,e){return e?Yt(t,{display:"inline-block"},T,[t,"marginRight"]):void 0}),ot.each({margin:"",padding:"",border:"Width"},function(t,e){ot.cssHooks[t+e]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];4>r;r++)i[t+Nt[r]+e]=o[r]||o[r-2]||o[0];return i}},Jt.test(t)||(ot.cssHooks[t+e].set=O)}),ot.fn.extend({css:function(t,e){return St(this,function(t,e,n){var r,i,o={},a=0;if(ot.isArray(e)){for(r=Qt(t),i=e.length;i>a;a++)o[e[a]]=ot.css(t,e[a],!1,r);return o}return void 0!==n?ot.style(t,e,n):ot.css(t,e)},t,e,arguments.length>1)},show:function(){return R(this,!0)},hide:function(){return R(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){Rt(this)?ot(this).show():ot(this).hide()})}}),ot.Tween=D,D.prototype={constructor:D,init:function(t,e,n,r,i,o){this.elem=t,this.prop=n,this.easing=i||ot.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=r,this.unit=o||(ot.cssNumber[n]?"":"px")},cur:function(){var t=D.propHooks[this.prop];return t&&t.get?t.get(this):D.propHooks._default.get(this)},run:function(t){var e,n=D.propHooks[this.prop];return this.options.duration?this.pos=e=ot.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):D.propHooks._default.set(this),this}},D.prototype.init.prototype=D.prototype,D.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=ot.css(t.elem,t.prop,""),e&&"auto"!==e?e:0)},set:function(t){ot.fx.step[t.prop]?ot.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[ot.cssProps[t.prop]]&&!ot.cssHooks[t.prop]?t.elem[t.prop]=t.now:ot.style(t.elem,t.prop,t.now+t.unit)}}},D.propHooks.scrollTop=D.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},ot.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},ot.fx=D.prototype.init,ot.fx.step={};var ie,oe,ae=/^(?:toggle|show|hide)$/,se=/queueHooks$/;ot.Animation=ot.extend(q,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return c(n.elem,t,jt.exec(e),n),n}]},tweener:function(t,e){ot.isFunction(t)?(e=t,t=["*"]):t=t.match(wt);for(var n,r=0,i=t.length;i>r;r++)n=t[r],q.tweeners[n]=q.tweeners[n]||[],q.tweeners[n].unshift(e)},prefilters:[V],prefilter:function(t,e){e?q.prefilters.unshift(t):q.prefilters.push(t)}}),ot.speed=function(t,e,n){var r=t&&"object"==typeof t?ot.extend({},t):{complete:n||!n&&e||ot.isFunction(t)&&t,duration:t,easing:n&&e||e&&!ot.isFunction(e)&&e};return r.duration=ot.fx.off?0:"number"==typeof r.duration?r.duration:r.duration in ot.fx.speeds?ot.fx.speeds[r.duration]:ot.fx.speeds._default,null!=r.queue&&r.queue!==!0||(r.queue="fx"),r.old=r.complete,r.complete=function(){ot.isFunction(r.old)&&r.old.call(this),r.queue&&ot.dequeue(this,r.queue)},r},ot.fn.extend({fadeTo:function(t,e,n,r){return this.filter(Rt).css("opacity",0).show().end().animate({opacity:e},t,n,r)},animate:function(t,e,n,r){var i=ot.isEmptyObject(t),o=ot.speed(e,n,r),a=function(){var e=q(this,ot.extend({},t),o);(i||Et.get(this,"finish"))&&e.stop(!0)};return a.finish=a,i||o.queue===!1?this.each(a):this.queue(o.queue,a)},stop:function(t,e,n){var r=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&t!==!1&&this.queue(t||"fx",[]),this.each(function(){var e=!0,i=null!=t&&t+"queueHooks",o=ot.timers,a=Et.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&se.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=t&&o[i].queue!==t||(o[i].anim.stop(n),e=!1,o.splice(i,1));!e&&n||ot.dequeue(this,t)})},finish:function(t){return t!==!1&&(t=t||"fx"),this.each(function(){var e,n=Et.get(this),r=n[t+"queue"],i=n[t+"queueHooks"],o=ot.timers,a=r?r.length:0;for(n.finish=!0,ot.queue(this,t,[]),i&&i.stop&&i.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;a>e;e++)r[e]&&r[e].finish&&r[e].finish.call(this);delete n.finish})}}),ot.each(["toggle","show","hide"],function(t,e){var n=ot.fn[e];ot.fn[e]=function(t,r,i){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(P(e,!0),t,r,i)}}),ot.each({slideDown:P("show"),slideUp:P("hide"),slideToggle:P("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){ot.fn[t]=function(t,n,r){return this.animate(e,t,n,r)}}),ot.timers=[],ot.fx.tick=function(){var t,e=0,n=ot.timers;for(ie=ot.now();e<n.length;e++)t=n[e],t()||n[e]!==t||n.splice(e--,1);
n.length||ot.fx.stop(),ie=void 0},ot.fx.timer=function(t){ot.timers.push(t),t()?ot.fx.start():ot.timers.pop()},ot.fx.interval=13,ot.fx.start=function(){oe||(oe=t.setInterval(ot.fx.tick,ot.fx.interval))},ot.fx.stop=function(){t.clearInterval(oe),oe=null},ot.fx.speeds={slow:600,fast:200,_default:400},ot.fn.delay=function(e,n){return e=ot.fx?ot.fx.speeds[e]||e:e,n=n||"fx",this.queue(n,function(n,r){var i=t.setTimeout(n,e);r.stop=function(){t.clearTimeout(i)}})},function(){var t=K.createElement("input"),e=K.createElement("select"),n=e.appendChild(K.createElement("option"));t.type="checkbox",rt.checkOn=""!==t.value,rt.optSelected=n.selected,e.disabled=!0,rt.optDisabled=!n.disabled,t=K.createElement("input"),t.value="t",t.type="radio",rt.radioValue="t"===t.value}();var ue,ce=ot.expr.attrHandle;ot.fn.extend({attr:function(t,e){return St(this,ot.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){ot.removeAttr(this,t)})}}),ot.extend({attr:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return"undefined"==typeof t.getAttribute?ot.prop(t,e,n):(1===o&&ot.isXMLDoc(t)||(e=e.toLowerCase(),i=ot.attrHooks[e]||(ot.expr.match.bool.test(e)?ue:void 0)),void 0!==n?null===n?void ot.removeAttr(t,e):i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:(t.setAttribute(e,n+""),n):i&&"get"in i&&null!==(r=i.get(t,e))?r:(r=ot.find.attr(t,e),null==r?void 0:r))},attrHooks:{type:{set:function(t,e){if(!rt.radioValue&&"radio"===e&&ot.nodeName(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,r,i=0,o=e&&e.match(wt);if(o&&1===t.nodeType)for(;n=o[i++];)r=ot.propFix[n]||n,ot.expr.match.bool.test(n)&&(t[r]=!1),t.removeAttribute(n)}}),ue={set:function(t,e,n){return e===!1?ot.removeAttr(t,n):t.setAttribute(n,n),n}},ot.each(ot.expr.match.bool.source.match(/\w+/g),function(t,e){var n=ce[e]||ot.find.attr;ce[e]=function(t,e,r){var i,o;return r||(o=ce[e],ce[e]=i,i=null!=n(t,e,r)?e.toLowerCase():null,ce[e]=o),i}});var le=/^(?:input|select|textarea|button)$/i,fe=/^(?:a|area)$/i;ot.fn.extend({prop:function(t,e){return St(this,ot.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[ot.propFix[t]||t]})}}),ot.extend({prop:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&ot.isXMLDoc(t)||(e=ot.propFix[e]||e,i=ot.propHooks[e]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:t[e]=n:i&&"get"in i&&null!==(r=i.get(t,e))?r:t[e]},propHooks:{tabIndex:{get:function(t){var e=ot.find.attr(t,"tabindex");return e?parseInt(e,10):le.test(t.nodeName)||fe.test(t.nodeName)&&t.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),rt.optSelected||(ot.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),ot.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){ot.propFix[this.toLowerCase()]=this});var pe=/[\t\r\n\f]/g;ot.fn.extend({addClass:function(t){var e,n,r,i,o,a,s,u=0;if(ot.isFunction(t))return this.each(function(e){ot(this).addClass(t.call(this,e,F(this)))});if("string"==typeof t&&t)for(e=t.match(wt)||[];n=this[u++];)if(i=F(n),r=1===n.nodeType&&(" "+i+" ").replace(pe," ")){for(a=0;o=e[a++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");s=ot.trim(r),i!==s&&n.setAttribute("class",s)}return this},removeClass:function(t){var e,n,r,i,o,a,s,u=0;if(ot.isFunction(t))return this.each(function(e){ot(this).removeClass(t.call(this,e,F(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof t&&t)for(e=t.match(wt)||[];n=this[u++];)if(i=F(n),r=1===n.nodeType&&(" "+i+" ").replace(pe," ")){for(a=0;o=e[a++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");s=ot.trim(r),i!==s&&n.setAttribute("class",s)}return this},toggleClass:function(t,e){var n=typeof t;return"boolean"==typeof e&&"string"===n?e?this.addClass(t):this.removeClass(t):ot.isFunction(t)?this.each(function(n){ot(this).toggleClass(t.call(this,n,F(this),e),e)}):this.each(function(){var e,r,i,o;if("string"===n)for(r=0,i=ot(this),o=t.match(wt)||[];e=o[r++];)i.hasClass(e)?i.removeClass(e):i.addClass(e);else void 0!==t&&"boolean"!==n||(e=F(this),e&&Et.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||t===!1?"":Et.get(this,"__className__")||""))})},hasClass:function(t){var e,n,r=0;for(e=" "+t+" ";n=this[r++];)if(1===n.nodeType&&(" "+F(n)+" ").replace(pe," ").indexOf(e)>-1)return!0;return!1}});var he=/\r/g,de=/[\x20\t\r\n\f]+/g;ot.fn.extend({val:function(t){var e,n,r,i=this[0];{if(arguments.length)return r=ot.isFunction(t),this.each(function(n){var i;1===this.nodeType&&(i=r?t.call(this,n,ot(this).val()):t,null==i?i="":"number"==typeof i?i+="":ot.isArray(i)&&(i=ot.map(i,function(t){return null==t?"":t+""})),e=ot.valHooks[this.type]||ot.valHooks[this.nodeName.toLowerCase()],e&&"set"in e&&void 0!==e.set(this,i,"value")||(this.value=i))});if(i)return e=ot.valHooks[i.type]||ot.valHooks[i.nodeName.toLowerCase()],e&&"get"in e&&void 0!==(n=e.get(i,"value"))?n:(n=i.value,"string"==typeof n?n.replace(he,""):null==n?"":n)}}}),ot.extend({valHooks:{option:{get:function(t){var e=ot.find.attr(t,"value");return null!=e?e:ot.trim(ot.text(t)).replace(de," ")}},select:{get:function(t){for(var e,n,r=t.options,i=t.selectedIndex,o="select-one"===t.type||0>i,a=o?null:[],s=o?i+1:r.length,u=0>i?s:o?i:0;s>u;u++)if(n=r[u],(n.selected||u===i)&&(rt.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!ot.nodeName(n.parentNode,"optgroup"))){if(e=ot(n).val(),o)return e;a.push(e)}return a},set:function(t,e){for(var n,r,i=t.options,o=ot.makeArray(e),a=i.length;a--;)r=i[a],(r.selected=ot.inArray(ot.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),ot.each(["radio","checkbox"],function(){ot.valHooks[this]={set:function(t,e){return ot.isArray(e)?t.checked=ot.inArray(ot(t).val(),e)>-1:void 0}},rt.checkOn||(ot.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})});var ve=/^(?:focusinfocus|focusoutblur)$/;ot.extend(ot.event,{trigger:function(e,n,r,i){var o,a,s,u,c,l,f,p=[r||K],h=nt.call(e,"type")?e.type:e,d=nt.call(e,"namespace")?e.namespace.split("."):[];if(a=s=r=r||K,3!==r.nodeType&&8!==r.nodeType&&!ve.test(h+ot.event.triggered)&&(h.indexOf(".")>-1&&(d=h.split("."),h=d.shift(),d.sort()),c=h.indexOf(":")<0&&"on"+h,e=e[ot.expando]?e:new ot.Event(h,"object"==typeof e&&e),e.isTrigger=i?2:3,e.namespace=d.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),n=null==n?[e]:ot.makeArray(n,[e]),f=ot.event.special[h]||{},i||!f.trigger||f.trigger.apply(r,n)!==!1)){if(!i&&!f.noBubble&&!ot.isWindow(r)){for(u=f.delegateType||h,ve.test(u+h)||(a=a.parentNode);a;a=a.parentNode)p.push(a),s=a;s===(r.ownerDocument||K)&&p.push(s.defaultView||s.parentWindow||t)}for(o=0;(a=p[o++])&&!e.isPropagationStopped();)e.type=o>1?u:f.bindType||h,l=(Et.get(a,"events")||{})[e.type]&&Et.get(a,"handle"),l&&l.apply(a,n),l=c&&a[c],l&&l.apply&&Ct(a)&&(e.result=l.apply(a,n),e.result===!1&&e.preventDefault());return e.type=h,i||e.isDefaultPrevented()||f._default&&f._default.apply(p.pop(),n)!==!1||!Ct(r)||c&&ot.isFunction(r[h])&&!ot.isWindow(r)&&(s=r[c],s&&(r[c]=null),ot.event.triggered=h,r[h](),ot.event.triggered=void 0,s&&(r[c]=s)),e.result}},simulate:function(t,e,n){var r=ot.extend(new ot.Event,n,{type:t,isSimulated:!0});ot.event.trigger(r,null,e)}}),ot.fn.extend({trigger:function(t,e){return this.each(function(){ot.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];return n?ot.event.trigger(t,e,n,!0):void 0}}),ot.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(t,e){ot.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),ot.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),rt.focusin="onfocusin"in t,rt.focusin||ot.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){ot.event.simulate(e,t.target,ot.event.fix(t))};ot.event.special[e]={setup:function(){var r=this.ownerDocument||this,i=Et.access(r,e);i||r.addEventListener(t,n,!0),Et.access(r,e,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=Et.access(r,e)-1;i?Et.access(r,e,i):(r.removeEventListener(t,n,!0),Et.remove(r,e))}}});var ge=t.location,me=ot.now(),$e=/\?/;ot.parseJSON=function(t){return JSON.parse(t+"")},ot.parseXML=function(e){var n;if(!e||"string"!=typeof e)return null;try{n=(new t.DOMParser).parseFromString(e,"text/xml")}catch(r){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||ot.error("Invalid XML: "+e),n};var ye=/#.*$/,be=/([?&])_=[^&]*/,we=/^(.*?):[ \t]*([^\r\n]*)$/gm,xe=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Se=/^(?:GET|HEAD)$/,Ce=/^\/\//,Ee={},Te={},ke="*/".concat("*"),Ae=K.createElement("a");Ae.href=ge.href,ot.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:ge.href,type:"GET",isLocal:xe.test(ge.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":ke,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":ot.parseJSON,"text xml":ot.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?U(U(t,ot.ajaxSettings),e):U(ot.ajaxSettings,t)},ajaxPrefilter:L(Ee),ajaxTransport:L(Te),ajax:function(e,n){function r(e,n,r,s){var c,f,$,y,w,S=n;2!==b&&(b=2,u&&t.clearTimeout(u),i=void 0,a=s||"",x.readyState=e>0?4:0,c=e>=200&&300>e||304===e,r&&(y=B(p,x,r)),y=W(p,y,x,c),c?(p.ifModified&&(w=x.getResponseHeader("Last-Modified"),w&&(ot.lastModified[o]=w),w=x.getResponseHeader("etag"),w&&(ot.etag[o]=w)),204===e||"HEAD"===p.type?S="nocontent":304===e?S="notmodified":(S=y.state,f=y.data,$=y.error,c=!$)):($=S,!e&&S||(S="error",0>e&&(e=0))),x.status=e,x.statusText=(n||S)+"",c?v.resolveWith(h,[f,S,x]):v.rejectWith(h,[x,S,$]),x.statusCode(m),m=void 0,l&&d.trigger(c?"ajaxSuccess":"ajaxError",[x,p,c?f:$]),g.fireWith(h,[x,S]),l&&(d.trigger("ajaxComplete",[x,p]),--ot.active||ot.event.trigger("ajaxStop")))}"object"==typeof e&&(n=e,e=void 0),n=n||{};var i,o,a,s,u,c,l,f,p=ot.ajaxSetup({},n),h=p.context||p,d=p.context&&(h.nodeType||h.jquery)?ot(h):ot.event,v=ot.Deferred(),g=ot.Callbacks("once memory"),m=p.statusCode||{},$={},y={},b=0,w="canceled",x={readyState:0,getResponseHeader:function(t){var e;if(2===b){if(!s)for(s={};e=we.exec(a);)s[e[1].toLowerCase()]=e[2];e=s[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return 2===b?a:null},setRequestHeader:function(t,e){var n=t.toLowerCase();return b||(t=y[n]=y[n]||t,$[t]=e),this},overrideMimeType:function(t){return b||(p.mimeType=t),this},statusCode:function(t){var e;if(t)if(2>b)for(e in t)m[e]=[m[e],t[e]];else x.always(t[x.status]);return this},abort:function(t){var e=t||w;return i&&i.abort(e),r(0,e),this}};if(v.promise(x).complete=g.add,x.success=x.done,x.error=x.fail,p.url=((e||p.url||ge.href)+"").replace(ye,"").replace(Ce,ge.protocol+"//"),p.type=n.method||n.type||p.method||p.type,p.dataTypes=ot.trim(p.dataType||"*").toLowerCase().match(wt)||[""],null==p.crossDomain){c=K.createElement("a");try{c.href=p.url,c.href=c.href,p.crossDomain=Ae.protocol+"//"+Ae.host!=c.protocol+"//"+c.host}catch(S){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=ot.param(p.data,p.traditional)),H(Ee,p,n,x),2===b)return x;l=ot.event&&p.global,l&&0===ot.active++&&ot.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Se.test(p.type),o=p.url,p.hasContent||(p.data&&(o=p.url+=($e.test(o)?"&":"?")+p.data,delete p.data),p.cache===!1&&(p.url=be.test(o)?o.replace(be,"$1_="+me++):o+($e.test(o)?"&":"?")+"_="+me++)),p.ifModified&&(ot.lastModified[o]&&x.setRequestHeader("If-Modified-Since",ot.lastModified[o]),ot.etag[o]&&x.setRequestHeader("If-None-Match",ot.etag[o])),(p.data&&p.hasContent&&p.contentType!==!1||n.contentType)&&x.setRequestHeader("Content-Type",p.contentType),x.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+ke+"; q=0.01":""):p.accepts["*"]);for(f in p.headers)x.setRequestHeader(f,p.headers[f]);if(p.beforeSend&&(p.beforeSend.call(h,x,p)===!1||2===b))return x.abort();w="abort";for(f in{success:1,error:1,complete:1})x[f](p[f]);if(i=H(Te,p,n,x)){if(x.readyState=1,l&&d.trigger("ajaxSend",[x,p]),2===b)return x;p.async&&p.timeout>0&&(u=t.setTimeout(function(){x.abort("timeout")},p.timeout));try{b=1,i.send($,r)}catch(S){if(!(2>b))throw S;r(-1,S)}}else r(-1,"No Transport");return x},getJSON:function(t,e,n){return ot.get(t,e,n,"json")},getScript:function(t,e){return ot.get(t,void 0,e,"script")}}),ot.each(["get","post"],function(t,e){ot[e]=function(t,n,r,i){return ot.isFunction(n)&&(i=i||r,r=n,n=void 0),ot.ajax(ot.extend({url:t,type:e,dataType:i,data:n,success:r},ot.isPlainObject(t)&&t))}}),ot._evalUrl=function(t){return ot.ajax({url:t,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},ot.fn.extend({wrapAll:function(t){var e;return ot.isFunction(t)?this.each(function(e){ot(this).wrapAll(t.call(this,e))}):(this[0]&&(e=ot(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this)},wrapInner:function(t){return ot.isFunction(t)?this.each(function(e){ot(this).wrapInner(t.call(this,e))}):this.each(function(){var e=ot(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=ot.isFunction(t);return this.each(function(n){ot(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(){return this.parent().each(function(){ot.nodeName(this,"body")||ot(this).replaceWith(this.childNodes)}).end()}}),ot.expr.filters.hidden=function(t){return!ot.expr.filters.visible(t)},ot.expr.filters.visible=function(t){return t.offsetWidth>0||t.offsetHeight>0||t.getClientRects().length>0};var Oe=/%20/g,je=/\[\]$/,Ne=/\r?\n/g,Re=/^(?:submit|button|image|reset|file)$/i,De=/^(?:input|select|textarea|keygen)/i;ot.param=function(t,e){var n,r=[],i=function(t,e){e=ot.isFunction(e)?e():null==e?"":e,r[r.length]=encodeURIComponent(t)+"="+encodeURIComponent(e)};if(void 0===e&&(e=ot.ajaxSettings&&ot.ajaxSettings.traditional),ot.isArray(t)||t.jquery&&!ot.isPlainObject(t))ot.each(t,function(){i(this.name,this.value)});else for(n in t)z(n,t[n],e,i);return r.join("&").replace(Oe,"+")},ot.fn.extend({serialize:function(){return ot.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=ot.prop(this,"elements");return t?ot.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!ot(this).is(":disabled")&&De.test(this.nodeName)&&!Re.test(t)&&(this.checked||!Dt.test(t))}).map(function(t,e){var n=ot(this).val();return null==n?null:ot.isArray(n)?ot.map(n,function(t){return{name:e.name,value:t.replace(Ne,"\r\n")}}):{name:e.name,value:n.replace(Ne,"\r\n")}}).get()}}),ot.ajaxSettings.xhr=function(){try{return new t.XMLHttpRequest}catch(e){}};var Ie={0:200,1223:204},Pe=ot.ajaxSettings.xhr();rt.cors=!!Pe&&"withCredentials"in Pe,rt.ajax=Pe=!!Pe,ot.ajaxTransport(function(e){var n,r;return rt.cors||Pe&&!e.crossDomain?{send:function(i,o){var a,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)s[a]=e.xhrFields[a];e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");for(a in i)s.setRequestHeader(a,i[a]);n=function(t){return function(){n&&(n=r=s.onload=s.onerror=s.onabort=s.onreadystatechange=null,"abort"===t?s.abort():"error"===t?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(Ie[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=n(),r=s.onerror=n("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&t.setTimeout(function(){n&&r()})},n=n("abort");try{s.send(e.hasContent&&e.data||null)}catch(u){if(n)throw u}},abort:function(){n&&n()}}:void 0}),ot.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return ot.globalEval(t),t}}}),ot.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),ot.ajaxTransport("script",function(t){if(t.crossDomain){var e,n;return{send:function(r,i){e=ot("<script>").prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&i("error"===t.type?404:200,t.type)}),K.head.appendChild(e[0])},abort:function(){n&&n()}}}});var _e=[],Ve=/(=)\?(?=&|$)|\?\?/;ot.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=_e.pop()||ot.expando+"_"+me++;return this[t]=!0,t}}),ot.ajaxPrefilter("json jsonp",function(e,n,r){var i,o,a,s=e.jsonp!==!1&&(Ve.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ve.test(e.data)&&"data");return s||"jsonp"===e.dataTypes[0]?(i=e.jsonpCallback=ot.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Ve,"$1"+i):e.jsonp!==!1&&(e.url+=($e.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return a||ot.error(i+" was not called"),a[0]},e.dataTypes[0]="json",o=t[i],t[i]=function(){a=arguments},r.always(function(){void 0===o?ot(t).removeProp(i):t[i]=o,e[i]&&(e.jsonpCallback=n.jsonpCallback,_e.push(i)),a&&ot.isFunction(o)&&o(a[0]),a=o=void 0}),"script"):void 0}),ot.parseHTML=function(t,e,n){if(!t||"string"!=typeof t)return null;"boolean"==typeof e&&(n=e,e=!1),e=e||K;var r=dt.exec(t),i=!n&&[];return r?[e.createElement(r[1])]:(r=p([t],e,i),i&&i.length&&ot(i).remove(),ot.merge([],r.childNodes))};var Me=ot.fn.load;ot.fn.load=function(t,e,n){if("string"!=typeof t&&Me)return Me.apply(this,arguments);var r,i,o,a=this,s=t.indexOf(" ");return s>-1&&(r=ot.trim(t.slice(s)),t=t.slice(0,s)),ot.isFunction(e)?(n=e,e=void 0):e&&"object"==typeof e&&(i="POST"),a.length>0&&ot.ajax({url:t,type:i||"GET",dataType:"html",data:e}).done(function(t){o=arguments,a.html(r?ot("<div>").append(ot.parseHTML(t)).find(r):t)}).always(n&&function(t,e){a.each(function(){n.apply(this,o||[t.responseText,e,t])})}),this},ot.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){ot.fn[e]=function(t){return this.on(e,t)}}),ot.expr.filters.animated=function(t){return ot.grep(ot.timers,function(e){return t===e.elem}).length},ot.offset={setOffset:function(t,e,n){var r,i,o,a,s,u,c,l=ot.css(t,"position"),f=ot(t),p={};"static"===l&&(t.style.position="relative"),s=f.offset(),o=ot.css(t,"top"),u=ot.css(t,"left"),c=("absolute"===l||"fixed"===l)&&(o+u).indexOf("auto")>-1,c?(r=f.position(),a=r.top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),ot.isFunction(e)&&(e=e.call(t,n,ot.extend({},s))),null!=e.top&&(p.top=e.top-s.top+a),null!=e.left&&(p.left=e.left-s.left+i),"using"in e?e.using.call(t,p):f.css(p)}},ot.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){ot.offset.setOffset(this,t,e)});var e,n,r=this[0],i={top:0,left:0},o=r&&r.ownerDocument;if(o)return e=o.documentElement,ot.contains(e,r)?(i=r.getBoundingClientRect(),n=G(o),{top:i.top+n.pageYOffset-e.clientTop,left:i.left+n.pageXOffset-e.clientLeft}):i},position:function(){if(this[0]){var t,e,n=this[0],r={top:0,left:0};return"fixed"===ot.css(n,"position")?e=n.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),ot.nodeName(t[0],"html")||(r=t.offset()),r.top+=ot.css(t[0],"borderTopWidth",!0),r.left+=ot.css(t[0],"borderLeftWidth",!0)),{top:e.top-r.top-ot.css(n,"marginTop",!0),left:e.left-r.left-ot.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===ot.css(t,"position");)t=t.offsetParent;return t||Xt})}}),ot.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var n="pageYOffset"===e;ot.fn[t]=function(r){return St(this,function(t,r,i){var o=G(t);return void 0===i?o?o[e]:t[r]:void(o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):t[r]=i)},t,r,arguments.length)}}),ot.each(["top","left"],function(t,e){ot.cssHooks[e]=k(rt.pixelPosition,function(t,n){return n?(n=T(t,e),Kt.test(n)?ot(t).position()[e]+"px":n):void 0})}),ot.each({Height:"height",Width:"width"},function(t,e){ot.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,r){ot.fn[r]=function(r,i){var o=arguments.length&&(n||"boolean"!=typeof r),a=n||(r===!0||i===!0?"margin":"border");return St(this,function(e,n,r){var i;return ot.isWindow(e)?e.document.documentElement["client"+t]:9===e.nodeType?(i=e.documentElement,Math.max(e.body["scroll"+t],i["scroll"+t],e.body["offset"+t],i["offset"+t],i["client"+t])):void 0===r?ot.css(e,n,a):ot.style(e,n,r,a)},e,o?r:void 0,o,null)}})}),ot.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,r){return this.on(e,t,n,r)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)},size:function(){return this.length}}),ot.fn.andSelf=ot.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return ot});var qe=t.jQuery,Fe=t.$;return ot.noConflict=function(e){return t.$===ot&&(t.$=Fe),e&&t.jQuery===ot&&(t.jQuery=qe),ot},e||(t.jQuery=t.$=ot),ot}),function(t){"use strict";function e(t,e){return e=e||Error,function(){var n,r,i=2,o=arguments,a=o[0],s="["+(t?t+":":"")+a+"] ",u=o[1];for(s+=u.replace(/\{\d+\}/g,function(t){var e=+t.slice(1,-1),n=e+i;return n<o.length?$t(o[n]):t}),s+="\nhttp://errors.angularjs.org/1.5.6/"+(t?t+"/":"")+a,r=i,n="?";r<o.length;r++,n="&")s+=n+"p"+(r-i)+"="+encodeURIComponent($t(o[r]));return new e(s)}}function n(t){if(null==t||T(t))return!1;if(Jr(t)||w(t)||Vr&&t instanceof Vr)return!0;var e="length"in Object(t)&&t.length;return x(e)&&(e>=0&&(e-1 in t||t instanceof Array)||"function"==typeof t.item)}function r(t,e,i){var o,a;if(t)if(C(t))for(o in t)"prototype"==o||"length"==o||"name"==o||t.hasOwnProperty&&!t.hasOwnProperty(o)||e.call(i,t[o],o,t);else if(Jr(t)||n(t)){var s="object"!=typeof t;for(o=0,a=t.length;a>o;o++)(s||o in t)&&e.call(i,t[o],o,t)}else if(t.forEach&&t.forEach!==r)t.forEach(e,i,t);else if(b(t))for(o in t)e.call(i,t[o],o,t);else if("function"==typeof t.hasOwnProperty)for(o in t)t.hasOwnProperty(o)&&e.call(i,t[o],o,t);else for(o in t)Nr.call(t,o)&&e.call(i,t[o],o,t);return t}function i(t,e,n){for(var r=Object.keys(t).sort(),i=0;i<r.length;i++)e.call(n,t[r[i]],r[i]);return r}function o(t){return function(e,n){t(n,e)}}function a(){return++Gr}function s(t,e){e?t.$$hashKey=e:delete t.$$hashKey}function u(t,e,n){for(var r=t.$$hashKey,i=0,o=e.length;o>i;++i){var a=e[i];if(y(a)||C(a))for(var c=Object.keys(a),l=0,f=c.length;f>l;l++){var p=c[l],h=a[p];n&&y(h)?S(h)?t[p]=new Date(h.valueOf()):E(h)?t[p]=new RegExp(h):h.nodeName?t[p]=h.cloneNode(!0):P(h)?t[p]=h.clone():(y(t[p])||(t[p]=Jr(h)?[]:{}),u(t[p],[h],!0)):t[p]=h}}return s(t,r),t}function c(t){return u(t,Fr.call(arguments,1),!1)}function l(t){return u(t,Fr.call(arguments,1),!0)}function f(t){return parseInt(t,10)}function p(t,e){return c(Object.create(t),e)}function h(){}function d(t){return t}function v(t){return function(){return t}}function g(t){return C(t.toString)&&t.toString!==Ur}function m(t){return"undefined"==typeof t}function $(t){return"undefined"!=typeof t}function y(t){return null!==t&&"object"==typeof t}function b(t){return null!==t&&"object"==typeof t&&!Br(t)}function w(t){return"string"==typeof t}function x(t){return"number"==typeof t}function S(t){return"[object Date]"===Ur.call(t)}function C(t){return"function"==typeof t}function E(t){return"[object RegExp]"===Ur.call(t)}function T(t){return t&&t.window===t}function k(t){return t&&t.$evalAsync&&t.$watch}function A(t){return"[object File]"===Ur.call(t)}function O(t){return"[object FormData]"===Ur.call(t)}function j(t){return"[object Blob]"===Ur.call(t)}function N(t){return"boolean"==typeof t}function R(t){return t&&C(t.then)}function D(t){return t&&x(t.length)&&Kr.test(Ur.call(t))}function I(t){return"[object ArrayBuffer]"===Ur.call(t)}function P(t){return!(!t||!(t.nodeName||t.prop&&t.attr&&t.find))}function _(t){var e,n={},r=t.split(",");for(e=0;e<r.length;e++)n[r[e]]=!0;return n}function V(t){return Rr(t.nodeName||t[0]&&t[0].nodeName)}function M(t,e){var n=t.indexOf(e);return n>=0&&t.splice(n,1),n}function q(t,e){function n(t,e){var n,r=e.$$hashKey;if(Jr(t))for(var o=0,a=t.length;a>o;o++)e.push(i(t[o]));else if(b(t))for(n in t)e[n]=i(t[n]);else if(t&&"function"==typeof t.hasOwnProperty)for(n in t)t.hasOwnProperty(n)&&(e[n]=i(t[n]));else for(n in t)Nr.call(t,n)&&(e[n]=i(t[n]));return s(e,r),e}function i(t){if(!y(t))return t;var e=a.indexOf(t);if(-1!==e)return u[e];if(T(t)||k(t))throw Wr("cpws","Can't copy! Making copies of Window or Scope instances is not supported.");var r=!1,i=o(t);return void 0===i&&(i=Jr(t)?[]:Object.create(Br(t)),r=!0),a.push(t),u.push(i),r?n(t,i):i}function o(t){switch(Ur.call(t)){case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Float32Array]":case"[object Float64Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return new t.constructor(i(t.buffer));case"[object ArrayBuffer]":if(!t.slice){var e=new ArrayBuffer(t.byteLength);return new Uint8Array(e).set(new Uint8Array(t)),e}return t.slice(0);case"[object Boolean]":case"[object Number]":case"[object String]":case"[object Date]":return new t.constructor(t.valueOf());case"[object RegExp]":var n=new RegExp(t.source,t.toString().match(/[^\/]*$/)[0]);return n.lastIndex=t.lastIndex,n;case"[object Blob]":return new t.constructor([t],{type:t.type})}return C(t.cloneNode)?t.cloneNode(!0):void 0}var a=[],u=[];if(e){if(D(e)||I(e))throw Wr("cpta","Can't copy! TypedArray destination cannot be mutated.");if(t===e)throw Wr("cpi","Can't copy! Source and destination are identical.");return Jr(e)?e.length=0:r(e,function(t,n){"$$hashKey"!==n&&delete e[n]}),a.push(t),u.push(e),n(t,e)}return i(t)}function F(t,e){if(Jr(t)){e=e||[];for(var n=0,r=t.length;r>n;n++)e[n]=t[n]}else if(y(t)){e=e||{};for(var i in t)"$"===i.charAt(0)&&"$"===i.charAt(1)||(e[i]=t[i])}return e||t}function L(t,e){if(t===e)return!0;if(null===t||null===e)return!1;if(t!==t&&e!==e)return!0;var n,r,i,o=typeof t,a=typeof e;if(o==a&&"object"==o){if(!Jr(t)){if(S(t))return S(e)?L(t.getTime(),e.getTime()):!1;if(E(t))return E(e)?t.toString()==e.toString():!1;if(k(t)||k(e)||T(t)||T(e)||Jr(e)||S(e)||E(e))return!1;i=vt();for(r in t)if("$"!==r.charAt(0)&&!C(t[r])){if(!L(t[r],e[r]))return!1;i[r]=!0}for(r in e)if(!(r in i)&&"$"!==r.charAt(0)&&$(e[r])&&!C(e[r]))return!1;return!0}if(!Jr(e))return!1;if((n=t.length)==e.length){for(r=0;n>r;r++)if(!L(t[r],e[r]))return!1;return!0}}return!1}function H(t,e,n){return t.concat(Fr.call(e,n))}function U(t,e){return Fr.call(t,e||0)}function B(t,e){var n=arguments.length>2?U(arguments,2):[];return!C(e)||e instanceof RegExp?e:n.length?function(){return arguments.length?e.apply(t,H(n,arguments,0)):e.apply(t,n)}:function(){return arguments.length?e.apply(t,arguments):e.call(t)}}function W(e,n){var r=n;return"string"==typeof e&&"$"===e.charAt(0)&&"$"===e.charAt(1)?r=void 0:T(n)?r="$WINDOW":n&&t.document===n?r="$DOCUMENT":k(n)&&(r="$SCOPE"),r}function z(t,e){return m(t)?void 0:(x(e)||(e=e?2:null),JSON.stringify(t,W,e))}function G(t){return w(t)?JSON.parse(t):t}function J(t,e){t=t.replace(ti,"");var n=Date.parse("Jan 01, 1970 00:00:00 "+t)/6e4;return isNaN(n)?e:n}function K(t,e){return t=new Date(t.getTime()),t.setMinutes(t.getMinutes()+e),t}function Q(t,e,n){n=n?-1:1;var r=t.getTimezoneOffset(),i=J(e,r);return K(t,n*(i-r))}function Y(t){t=Vr(t).clone();try{t.empty()}catch(e){}var n=Vr("<div>").append(t).html();try{return t[0].nodeType===ai?Rr(n):n.match(/^(<[^>]+>)/)[1].replace(/^<([\w\-]+)/,function(t,e){return"<"+Rr(e)})}catch(e){return Rr(n)}}function X(t){try{return decodeURIComponent(t)}catch(e){}}function Z(t){var e={};return r((t||"").split("&"),function(t){var n,r,i;t&&(r=t=t.replace(/\+/g,"%20"),n=t.indexOf("="),-1!==n&&(r=t.substring(0,n),i=t.substring(n+1)),r=X(r),$(r)&&(i=$(i)?X(i):!0,Nr.call(e,r)?Jr(e[r])?e[r].push(i):e[r]=[e[r],i]:e[r]=i))}),e}function tt(t){var e=[];return r(t,function(t,n){Jr(t)?r(t,function(t){e.push(nt(n,!0)+(t===!0?"":"="+nt(t,!0)))}):e.push(nt(n,!0)+(t===!0?"":"="+nt(t,!0)))}),e.length?e.join("&"):""}function et(t){return nt(t,!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+")}function nt(t,e){return encodeURIComponent(t).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%3B/gi,";").replace(/%20/g,e?"%20":"+")}function rt(t,e){var n,r,i=ei.length;for(r=0;i>r;++r)if(n=ei[r]+e,w(n=t.getAttribute(n)))return n;return null}function it(t,e){var n,i,o={};r(ei,function(e){var r=e+"app";!n&&t.hasAttribute&&t.hasAttribute(r)&&(n=t,i=t.getAttribute(r))}),r(ei,function(e){var r,o=e+"app";!n&&(r=t.querySelector("["+o.replace(":","\\:")+"]"))&&(n=r,i=r.getAttribute(o))}),n&&(o.strictDi=null!==rt(n,"strict-di"),e(n,i?[i]:[],o))}function ot(e,n,i){y(i)||(i={});var o={strictDi:!1};i=c(o,i);var a=function(){if(e=Vr(e),e.injector()){var r=e[0]===t.document?"document":Y(e);throw Wr("btstrpd","App already bootstrapped with this element '{0}'",r.replace(/</,"&lt;").replace(/>/,"&gt;"))}n=n||[],n.unshift(["$provide",function(t){t.value("$rootElement",e)}]),i.debugInfoEnabled&&n.push(["$compileProvider",function(t){t.debugInfoEnabled(!0)}]),n.unshift("ng");var o=re(n,i.strictDi);return o.invoke(["$rootScope","$rootElement","$compile","$injector",function(t,e,n,r){t.$apply(function(){e.data("$injector",r),n(e)(t)})}]),o},s=/^NG_ENABLE_DEBUG_INFO!/,u=/^NG_DEFER_BOOTSTRAP!/;return t&&s.test(t.name)&&(i.debugInfoEnabled=!0,t.name=t.name.replace(s,"")),t&&!u.test(t.name)?a():(t.name=t.name.replace(u,""),zr.resumeBootstrap=function(t){return r(t,function(t){n.push(t)}),a()},void(C(zr.resumeDeferredBootstrap)&&zr.resumeDeferredBootstrap()))}function at(){t.name="NG_ENABLE_DEBUG_INFO!"+t.name,t.location.reload()}function st(t){var e=zr.element(t).injector();if(!e)throw Wr("test","no injector found for element argument to getTestability");return e.get("$$testability")}function ut(t,e){return e=e||"_",t.replace(ni,function(t,n){return(n?e:"")+t.toLowerCase()})}function ct(){var e;if(!ri){var n=Zr();Mr=m(n)?t.jQuery:n?t[n]:void 0,Mr&&Mr.fn.on?(Vr=Mr,c(Mr.fn,{scope:Ei.scope,isolateScope:Ei.isolateScope,controller:Ei.controller,injector:Ei.injector,inheritedData:Ei.inheritedData}),e=Mr.cleanData,Mr.cleanData=function(t){for(var n,r,i=0;null!=(r=t[i]);i++)n=Mr._data(r,"events"),n&&n.$destroy&&Mr(r).triggerHandler("$destroy");e(t)}):Vr=Ot,zr.element=Vr,ri=!0}}function lt(t,e,n){if(!t)throw Wr("areq","Argument '{0}' is {1}",e||"?",n||"required");return t}function ft(t,e,n){return n&&Jr(t)&&(t=t[t.length-1]),lt(C(t),e,"not a function, got "+(t&&"object"==typeof t?t.constructor.name||"Object":typeof t)),t}function pt(t,e){if("hasOwnProperty"===t)throw Wr("badname","hasOwnProperty is not a valid {0} name",e)}function ht(t,e,n){if(!e)return t;for(var r,i=e.split("."),o=t,a=i.length,s=0;a>s;s++)r=i[s],t&&(t=(o=t)[r]);return!n&&C(t)?B(o,t):t}function dt(t){for(var e,n=t[0],r=t[t.length-1],i=1;n!==r&&(n=n.nextSibling);i++)(e||t[i]!==n)&&(e||(e=Vr(Fr.call(t,0,i))),
e.push(n));return e||t}function vt(){return Object.create(null)}function gt(t){function n(t,e,n){return t[e]||(t[e]=n())}var r=e("$injector"),i=e("ng"),o=n(t,"angular",Object);return o.$$minErr=o.$$minErr||e,n(o,"module",function(){var t={};return function(e,o,a){var s=function(t,e){if("hasOwnProperty"===t)throw i("badname","hasOwnProperty is not a valid {0} name",e)};return s(e,"module"),o&&t.hasOwnProperty(e)&&(t[e]=null),n(t,e,function(){function t(t,e,n,r){return r||(r=i),function(){return r[n||"push"]([t,e,arguments]),l}}function n(t,n){return function(r,o){return o&&C(o)&&(o.$$moduleName=e),i.push([t,n,arguments]),l}}if(!o)throw r("nomod","Module '{0}' is not available! You either misspelled the module name or forgot to load it. If registering a module ensure that you specify the dependencies as the second argument.",e);var i=[],s=[],u=[],c=t("$injector","invoke","push",s),l={_invokeQueue:i,_configBlocks:s,_runBlocks:u,requires:o,name:e,provider:n("$provide","provider"),factory:n("$provide","factory"),service:n("$provide","service"),value:t("$provide","value"),constant:t("$provide","constant","unshift"),decorator:n("$provide","decorator"),animation:n("$animateProvider","register"),filter:n("$filterProvider","register"),controller:n("$controllerProvider","register"),directive:n("$compileProvider","directive"),component:n("$compileProvider","component"),config:c,run:function(t){return u.push(t),this}};return a&&c(a),l})}})}function mt(t){var e=[];return JSON.stringify(t,function(t,n){if(n=W(t,n),y(n)){if(e.indexOf(n)>=0)return"...";e.push(n)}return n})}function $t(t){return"function"==typeof t?t.toString().replace(/ \{[\s\S]*$/,""):m(t)?"undefined":"string"!=typeof t?mt(t):t}function yt(n){c(n,{bootstrap:ot,copy:q,extend:c,merge:l,equals:L,element:Vr,forEach:r,injector:re,noop:h,bind:B,toJson:z,fromJson:G,identity:d,isUndefined:m,isDefined:$,isString:w,isFunction:C,isObject:y,isNumber:x,isElement:P,isArray:Jr,version:li,isDate:S,lowercase:Rr,uppercase:Dr,callbacks:{counter:0},getTestability:st,$$minErr:e,$$csp:Xr,reloadWithDebugInfo:at}),(qr=gt(t))("ng",["ngLocale"],["$provide",function(t){t.provider({$$sanitizeUri:En}),t.provider("$compile",de).directive({a:Do,input:Xo,textarea:Xo,form:Mo,script:Ga,select:Qa,style:Xa,option:Ya,ngBind:ea,ngBindHtml:ra,ngBindTemplate:na,ngClass:oa,ngClassEven:sa,ngClassOdd:aa,ngCloak:ua,ngController:ca,ngForm:qo,ngHide:Fa,ngIf:pa,ngInclude:ha,ngInit:va,ngNonBindable:Na,ngPluralize:Pa,ngRepeat:_a,ngShow:qa,ngStyle:La,ngSwitch:Ha,ngSwitchWhen:Ua,ngSwitchDefault:Ba,ngOptions:Ia,ngTransclude:za,ngModel:Aa,ngList:ga,ngChange:ia,pattern:ts,ngPattern:ts,required:Za,ngRequired:Za,minlength:ns,ngMinlength:ns,maxlength:es,ngMaxlength:es,ngValue:ta,ngModelOptions:ja}).directive({ngInclude:da}).directive(Io).directive(la),t.provider({$anchorScroll:ie,$animate:Li,$animateCss:Bi,$$animateJs:qi,$$animateQueue:Fi,$$AnimateRunner:Ui,$$animateAsyncRun:Hi,$browser:le,$cacheFactory:fe,$controller:be,$document:we,$exceptionHandler:xe,$filter:qn,$$forceReflow:Qi,$interpolate:_e,$interval:Ve,$http:Re,$httpParamSerializer:Ce,$httpParamSerializerJQLike:Ee,$httpBackend:Ie,$xhrFactory:De,$location:Xe,$log:Ze,$parse:yn,$rootScope:Cn,$q:bn,$$q:wn,$sce:On,$sceDelegate:An,$sniffer:jn,$templateCache:pe,$templateRequest:Nn,$$testability:Rn,$timeout:Dn,$window:_n,$$rAF:Sn,$$jqLite:Qt,$$HashMap:Oi,$$cookieReader:Mn})}])}function bt(){return++pi}function wt(t){return t.replace(vi,function(t,e,n,r){return r?n.toUpperCase():n}).replace(gi,"Moz$1")}function xt(t){return!bi.test(t)}function St(t){var e=t.nodeType;return e===ii||!e||e===ui}function Ct(t){for(var e in fi[t.ng339])return!0;return!1}function Et(t){for(var e=0,n=t.length;n>e;e++)Dt(t[e])}function Tt(t,e){var n,i,o,a,s=e.createDocumentFragment(),u=[];if(xt(t))u.push(e.createTextNode(t));else{for(n=n||s.appendChild(e.createElement("div")),i=(wi.exec(t)||["",""])[1].toLowerCase(),o=Si[i]||Si._default,n.innerHTML=o[1]+t.replace(xi,"<$1></$2>")+o[2],a=o[0];a--;)n=n.lastChild;u=H(u,n.childNodes),n=s.firstChild,n.textContent=""}return s.textContent="",s.innerHTML="",r(u,function(t){s.appendChild(t)}),s}function kt(e,n){n=n||t.document;var r;return(r=yi.exec(e))?[n.createElement(r[1])]:(r=Tt(e,n))?r.childNodes:[]}function At(t,e){var n=t.parentNode;n&&n.replaceChild(e,t),e.appendChild(t)}function Ot(t){if(t instanceof Ot)return t;var e;if(w(t)&&(t=Qr(t),e=!0),!(this instanceof Ot)){if(e&&"<"!=t.charAt(0))throw $i("nosel","Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element");return new Ot(t)}e?qt(this,kt(t)):qt(this,t)}function jt(t){return t.cloneNode(!0)}function Nt(t,e){if(e||Dt(t),t.querySelectorAll)for(var n=t.querySelectorAll("*"),r=0,i=n.length;i>r;r++)Dt(n[r])}function Rt(t,e,n,i){if($(i))throw $i("offargs","jqLite#off() does not support the `selector` argument");var o=It(t),a=o&&o.events,s=o&&o.handle;if(s)if(e){var u=function(e){var r=a[e];$(n)&&M(r||[],n),$(n)&&r&&r.length>0||(di(t,e,s),delete a[e])};r(e.split(" "),function(t){u(t),mi[t]&&u(mi[t])})}else for(e in a)"$destroy"!==e&&di(t,e,s),delete a[e]}function Dt(t,e){var n=t.ng339,r=n&&fi[n];if(r){if(e)return void delete r.data[e];r.handle&&(r.events.$destroy&&r.handle({},"$destroy"),Rt(t)),delete fi[n],t.ng339=void 0}}function It(t,e){var n=t.ng339,r=n&&fi[n];return e&&!r&&(t.ng339=n=bt(),r=fi[n]={events:{},data:{},handle:void 0}),r}function Pt(t,e,n){if(St(t)){var r=$(n),i=!r&&e&&!y(e),o=!e,a=It(t,!i),s=a&&a.data;if(r)s[e]=n;else{if(o)return s;if(i)return s&&s[e];c(s,e)}}}function _t(t,e){return t.getAttribute?(" "+(t.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").indexOf(" "+e+" ")>-1:!1}function Vt(t,e){e&&t.setAttribute&&r(e.split(" "),function(e){t.setAttribute("class",Qr((" "+(t.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").replace(" "+Qr(e)+" "," ")))})}function Mt(t,e){if(e&&t.setAttribute){var n=(" "+(t.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ");r(e.split(" "),function(t){t=Qr(t),-1===n.indexOf(" "+t+" ")&&(n+=t+" ")}),t.setAttribute("class",Qr(n))}}function qt(t,e){if(e)if(e.nodeType)t[t.length++]=e;else{var n=e.length;if("number"==typeof n&&e.window!==e){if(n)for(var r=0;n>r;r++)t[t.length++]=e[r]}else t[t.length++]=e}}function Ft(t,e){return Lt(t,"$"+(e||"ngController")+"Controller")}function Lt(t,e,n){t.nodeType==ui&&(t=t.documentElement);for(var r=Jr(e)?e:[e];t;){for(var i=0,o=r.length;o>i;i++)if($(n=Vr.data(t,r[i])))return n;t=t.parentNode||t.nodeType===ci&&t.host}}function Ht(t){for(Nt(t,!0);t.firstChild;)t.removeChild(t.firstChild)}function Ut(t,e){e||Nt(t);var n=t.parentNode;n&&n.removeChild(t)}function Bt(e,n){n=n||t,"complete"===n.document.readyState?n.setTimeout(e):Vr(n).on("load",e)}function Wt(t,e){var n=Ti[e.toLowerCase()];return n&&ki[V(t)]&&n}function zt(t){return Ai[t]}function Gt(t,e){var n=function(n,r){n.isDefaultPrevented=function(){return n.defaultPrevented};var i=e[r||n.type],o=i?i.length:0;if(o){if(m(n.immediatePropagationStopped)){var a=n.stopImmediatePropagation;n.stopImmediatePropagation=function(){n.immediatePropagationStopped=!0,n.stopPropagation&&n.stopPropagation(),a&&a.call(n)}}n.isImmediatePropagationStopped=function(){return n.immediatePropagationStopped===!0};var s=i.specialHandlerWrapper||Jt;o>1&&(i=F(i));for(var u=0;o>u;u++)n.isImmediatePropagationStopped()||s(t,n,i[u])}};return n.elem=t,n}function Jt(t,e,n){n.call(t,e)}function Kt(t,e,n){var r=e.relatedTarget;r&&(r===t||Ci.call(t,r))||n.call(t,e)}function Qt(){this.$get=function(){return c(Ot,{hasClass:function(t,e){return t.attr&&(t=t[0]),_t(t,e)},addClass:function(t,e){return t.attr&&(t=t[0]),Mt(t,e)},removeClass:function(t,e){return t.attr&&(t=t[0]),Vt(t,e)}})}}function Yt(t,e){var n=t&&t.$$hashKey;if(n)return"function"==typeof n&&(n=t.$$hashKey()),n;var r=typeof t;return n="function"==r||"object"==r&&null!==t?t.$$hashKey=r+":"+(e||a)():r+":"+t}function Xt(t,e){if(e){var n=0;this.nextUid=function(){return++n}}r(t,this.put,this)}function Zt(t){return Function.prototype.toString.call(t)+" "}function te(t){var e=Zt(t).replace(Ii,""),n=e.match(ji)||e.match(Ni);return n}function ee(t){var e=te(t);return e?"function("+(e[1]||"").replace(/[\s\r\n]+/," ")+")":"fn"}function ne(t,e,n){var i,o,a;if("function"==typeof t){if(!(i=t.$inject)){if(i=[],t.length){if(e)throw w(n)&&n||(n=t.name||ee(t)),Pi("strictdi","{0} is not using explicit annotation and cannot be invoked in strict mode",n);o=te(t),r(o[1].split(Ri),function(t){t.replace(Di,function(t,e,n){i.push(n)})})}t.$inject=i}}else Jr(t)?(a=t.length-1,ft(t[a],"fn"),i=t.slice(0,a)):ft(t,"fn",!0);return i}function re(t,e){function n(t){return function(e,n){return y(e)?void r(e,o(t)):t(e,n)}}function i(t,e){if(pt(t,"service"),(C(e)||Jr(e))&&(e=S.instantiate(e)),!e.$get)throw Pi("pget","Provider '{0}' must define $get factory method.",t);return x[t+g]=e}function a(t,e){return function(){var n=k.invoke(e,this);if(m(n))throw Pi("undef","Provider '{0}' must return a value from $get factory method.",t);return n}}function s(t,e,n){return i(t,{$get:n!==!1?a(t,e):e})}function u(t,e){return s(t,["$injector",function(t){return t.instantiate(e)}])}function c(t,e){return s(t,v(e),!1)}function l(t,e){pt(t,"constant"),x[t]=e,E[t]=e}function f(t,e){var n=S.get(t+g),r=n.$get;n.$get=function(){var t=k.invoke(r,n);return k.invoke(e,null,{$delegate:t})}}function p(t){lt(m(t)||Jr(t),"modulesToLoad","not an array");var e,n=[];return r(t,function(t){function r(t){var e,n;for(e=0,n=t.length;n>e;e++){var r=t[e],i=S.get(r[0]);i[r[1]].apply(i,r[2])}}if(!b.get(t)){b.put(t,!0);try{w(t)?(e=qr(t),n=n.concat(p(e.requires)).concat(e._runBlocks),r(e._invokeQueue),r(e._configBlocks)):C(t)?n.push(S.invoke(t)):Jr(t)?n.push(S.invoke(t)):ft(t,"module")}catch(i){throw Jr(t)&&(t=t[t.length-1]),i.message&&i.stack&&-1==i.stack.indexOf(i.message)&&(i=i.message+"\n"+i.stack),Pi("modulerr","Failed to instantiate module {0} due to:\n{1}",t,i.stack||i.message||i)}}}),n}function h(t,n){function r(e,r){if(t.hasOwnProperty(e)){if(t[e]===d)throw Pi("cdep","Circular dependency found: {0}",e+" <- "+$.join(" <- "));return t[e]}try{return $.unshift(e),t[e]=d,t[e]=n(e,r)}catch(i){throw t[e]===d&&delete t[e],i}finally{$.shift()}}function i(t,n,i){for(var o=[],a=re.$$annotate(t,e,i),s=0,u=a.length;u>s;s++){var c=a[s];if("string"!=typeof c)throw Pi("itkn","Incorrect injection token! Expected service name as string, got {0}",c);o.push(n&&n.hasOwnProperty(c)?n[c]:r(c,i))}return o}function o(t){return 11>=_r?!1:"function"==typeof t&&/^(?:class\s|constructor\()/.test(Zt(t))}function a(t,e,n,r){"string"==typeof n&&(r=n,n=null);var a=i(t,n,r);return Jr(t)&&(t=t[t.length-1]),o(t)?(a.unshift(null),new(Function.prototype.bind.apply(t,a))):t.apply(e,a)}function s(t,e,n){var r=Jr(t)?t[t.length-1]:t,o=i(t,e,n);return o.unshift(null),new(Function.prototype.bind.apply(r,o))}return{invoke:a,instantiate:s,get:r,annotate:re.$$annotate,has:function(e){return x.hasOwnProperty(e+g)||t.hasOwnProperty(e)}}}e=e===!0;var d={},g="Provider",$=[],b=new Xt([],!0),x={$provide:{provider:n(i),factory:n(s),service:n(u),value:n(c),constant:n(l),decorator:f}},S=x.$injector=h(x,function(t,e){throw zr.isString(e)&&$.push(e),Pi("unpr","Unknown provider: {0}",$.join(" <- "))}),E={},T=h(E,function(t,e){var n=S.get(t+g,e);return k.invoke(n.$get,n,void 0,t)}),k=T;x["$injector"+g]={$get:v(T)};var A=p(t);return k=T.get("$injector"),k.strictDi=e,r(A,function(t){t&&k.invoke(t)}),k}function ie(){var t=!0;this.disableAutoScrolling=function(){t=!1},this.$get=["$window","$location","$rootScope",function(e,n,r){function i(t){var e=null;return Array.prototype.some.call(t,function(t){return"a"===V(t)?(e=t,!0):void 0}),e}function o(){var t=s.yOffset;if(C(t))t=t();else if(P(t)){var n=t[0],r=e.getComputedStyle(n);t="fixed"!==r.position?0:n.getBoundingClientRect().bottom}else x(t)||(t=0);return t}function a(t){if(t){t.scrollIntoView();var n=o();if(n){var r=t.getBoundingClientRect().top;e.scrollBy(0,r-n)}}else e.scrollTo(0,0)}function s(t){t=w(t)?t:n.hash();var e;t?(e=u.getElementById(t))?a(e):(e=i(u.getElementsByName(t)))?a(e):"top"===t&&a(null):a(null)}var u=e.document;return t&&r.$watch(function(){return n.hash()},function(t,e){t===e&&""===t||Bt(function(){r.$evalAsync(s)})}),s}]}function oe(t,e){return t||e?t?e?(Jr(t)&&(t=t.join(" ")),Jr(e)&&(e=e.join(" ")),t+" "+e):t:e:""}function ae(t){for(var e=0;e<t.length;e++){var n=t[e];if(n.nodeType===Vi)return n}}function se(t){w(t)&&(t=t.split(" "));var e=vt();return r(t,function(t){t.length&&(e[t]=!0)}),e}function ue(t){return y(t)?t:{}}function ce(t,e,n,i){function o(t){try{t.apply(null,U(arguments,1))}finally{if($--,0===$)for(;y.length;)try{y.pop()()}catch(e){n.error(e)}}}function a(t){var e=t.indexOf("#");return-1===e?"":t.substr(e)}function s(){C=null,u(),c()}function u(){b=E(),b=m(b)?null:b,L(b,A)&&(b=A),A=b}function c(){x===l.url()&&w===b||(x=l.url(),w=b,r(T,function(t){t(l.url(),b)}))}var l=this,f=t.location,p=t.history,d=t.setTimeout,v=t.clearTimeout,g={};l.isMock=!1;var $=0,y=[];l.$$completeOutstandingRequest=o,l.$$incOutstandingRequestCount=function(){$++},l.notifyWhenNoOutstandingRequests=function(t){0===$?t():y.push(t)};var b,w,x=f.href,S=e.find("base"),C=null,E=i.history?function(){try{return p.state}catch(t){}}:h;u(),w=b,l.url=function(e,n,r){if(m(r)&&(r=null),f!==t.location&&(f=t.location),p!==t.history&&(p=t.history),e){var o=w===r;if(x===e&&(!i.history||o))return l;var s=x&&Ue(x)===Ue(e);return x=e,w=r,!i.history||s&&o?(s||(C=e),n?f.replace(e):s?f.hash=a(e):f.href=e,f.href!==e&&(C=e)):(p[n?"replaceState":"pushState"](r,"",e),u(),w=b),C&&(C=e),l}return C||f.href.replace(/%27/g,"'")},l.state=function(){return b};var T=[],k=!1,A=null;l.onUrlChange=function(e){return k||(i.history&&Vr(t).on("popstate",s),Vr(t).on("hashchange",s),k=!0),T.push(e),e},l.$$applicationDestroyed=function(){Vr(t).off("hashchange popstate",s)},l.$$checkUrlChange=c,l.baseHref=function(){var t=S.attr("href");return t?t.replace(/^(https?\:)?\/\/[^\/]*/,""):""},l.defer=function(t,e){var n;return $++,n=d(function(){delete g[n],o(t)},e||0),g[n]=!0,n},l.defer.cancel=function(t){return g[t]?(delete g[t],v(t),o(h),!0):!1}}function le(){this.$get=["$window","$log","$sniffer","$document",function(t,e,n,r){return new ce(t,r,e,n)}]}function fe(){this.$get=function(){function t(t,r){function i(t){t!=p&&(h?h==t&&(h=t.n):h=t,o(t.n,t.p),o(t,p),p=t,p.n=null)}function o(t,e){t!=e&&(t&&(t.p=e),e&&(e.n=t))}if(t in n)throw e("$cacheFactory")("iid","CacheId '{0}' is already taken!",t);var a=0,s=c({},r,{id:t}),u=vt(),l=r&&r.capacity||Number.MAX_VALUE,f=vt(),p=null,h=null;return n[t]={put:function(t,e){if(!m(e)){if(l<Number.MAX_VALUE){var n=f[t]||(f[t]={key:t});i(n)}return t in u||a++,u[t]=e,a>l&&this.remove(h.key),e}},get:function(t){if(l<Number.MAX_VALUE){var e=f[t];if(!e)return;i(e)}return u[t]},remove:function(t){if(l<Number.MAX_VALUE){var e=f[t];if(!e)return;e==p&&(p=e.p),e==h&&(h=e.n),o(e.n,e.p),delete f[t]}t in u&&(delete u[t],a--)},removeAll:function(){u=vt(),a=0,f=vt(),p=h=null},destroy:function(){u=null,s=null,f=null,delete n[t]},info:function(){return c({},s,{size:a})}}}var n={};return t.info=function(){var t={};return r(n,function(e,n){t[n]=e.info()}),t},t.get=function(t){return n[t]},t}}function pe(){this.$get=["$cacheFactory",function(t){return t("templates")}]}function he(){}function de(e,n){function i(t,e,n){var i=/^\s*([@&<]|=(\*?))(\??)\s*(\w*)\s*$/,o=vt();return r(t,function(t,r){if(t in T)return void(o[r]=T[t]);var a=t.match(i);if(!a)throw Wi("iscp","Invalid {3} for directive '{0}'. Definition: {... {1}: '{2}' ...}",e,r,t,n?"controller bindings definition":"isolate scope definition");o[r]={mode:a[1][0],collection:"*"===a[2],optional:"?"===a[3],attrName:a[4]||r},a[4]&&(T[t]=o[r])}),o}function a(t,e){var n={isolateScope:null,bindToController:null};if(y(t.scope)&&(t.bindToController===!0?(n.bindToController=i(t.scope,e,!0),n.isolateScope={}):n.isolateScope=i(t.scope,e,!1)),y(t.bindToController)&&(n.bindToController=i(t.bindToController,e,!0)),y(n.bindToController)){var r=t.controller,o=t.controllerAs;if(!r)throw Wi("noctrl","Cannot bind to controller without directive '{0}'s controller.",e);if(!ye(r,o))throw Wi("noident","Cannot bind to controller without identifier for directive '{0}'.",e)}return n}function s(t){var e=t.charAt(0);if(!e||e!==Rr(e))throw Wi("baddir","Directive/Component name '{0}' is invalid. The first character must be a lowercase letter",t);if(t!==t.trim())throw Wi("baddir","Directive/Component name '{0}' is invalid. The name should not contain leading or trailing whitespaces",t)}function u(t){var e=t.require||t.controller&&t.name;return!Jr(e)&&y(e)&&r(e,function(t,n){var r=t.match(S),i=t.substring(r[0].length);i||(e[n]=r[0]+n)}),e}var l={},f="Directive",g=/^\s*directive\:\s*([\w\-]+)\s+(.*)$/,b=/(([\w\-]+)(?:\:([^;]+))?;?)/,x=_("ngSrc,ngSrcset,src,srcset"),S=/^(?:(\^\^?)?(\?)?(\^\^?)?)?/,E=/^(on[a-z]+|formaction)$/,T=vt();this.directive=function j(t,n){return pt(t,"directive"),w(t)?(s(t),lt(n,"directiveFactory"),l.hasOwnProperty(t)||(l[t]=[],e.factory(t+f,["$injector","$exceptionHandler",function(e,n){var i=[];return r(l[t],function(r,o){try{var a=e.invoke(r);C(a)?a={compile:v(a)}:!a.compile&&a.link&&(a.compile=v(a.link)),a.priority=a.priority||0,a.index=o,a.name=a.name||t,a.require=u(a),a.restrict=a.restrict||"EA",a.$$moduleName=r.$$moduleName,i.push(a)}catch(s){n(s)}}),i}])),l[t].push(n)):r(t,o(j)),this},this.component=function(t,e){function n(t){function n(e){return C(e)||Jr(e)?function(n,r){return t.invoke(e,this,{$element:n,$attrs:r})}:e}var o=e.template||e.templateUrl?e.template:"",a={controller:i,controllerAs:ye(e.controller)||e.controllerAs||"$ctrl",template:n(o),templateUrl:n(e.templateUrl),transclude:e.transclude,scope:{},bindToController:e.bindings||{},restrict:"E",require:e.require};return r(e,function(t,e){"$"===e.charAt(0)&&(a[e]=t)}),a}var i=e.controller||function(){};return r(e,function(t,e){"$"===e.charAt(0)&&(n[e]=t,C(i)&&(i[e]=t))}),n.$inject=["$injector"],this.directive(t,n)},this.aHrefSanitizationWhitelist=function(t){return $(t)?(n.aHrefSanitizationWhitelist(t),this):n.aHrefSanitizationWhitelist()},this.imgSrcSanitizationWhitelist=function(t){return $(t)?(n.imgSrcSanitizationWhitelist(t),this):n.imgSrcSanitizationWhitelist()};var A=!0;this.debugInfoEnabled=function(t){return $(t)?(A=t,this):A};var O=10;this.onChangesTtl=function(t){return arguments.length?(O=t,this):O},this.$get=["$injector","$interpolate","$exceptionHandler","$templateRequest","$parse","$controller","$rootScope","$sce","$animate","$$sanitizeUri",function(e,n,i,o,s,u,v,T,j,R){function D(){try{if(!--wt)throw $t=void 0,Wi("infchng","{0} $onChanges() iterations reached. Aborting!\n",O);v.$apply(function(){for(var t=0,e=$t.length;e>t;++t)$t[t]();$t=void 0})}finally{wt++}}function I(t,e){if(e){var n,r,i,o=Object.keys(e);for(n=0,r=o.length;r>n;n++)i=o[n],this[i]=e[i]}else this.$attr={};this.$$element=t}function P(t,e,n){bt.innerHTML="<span "+e+">";var r=bt.firstChild.attributes,i=r[0];r.removeNamedItem(i.name),i.value=n,t.attributes.setNamedItem(i)}function _(t,e){try{t.addClass(e)}catch(n){}}function q(e,n,r,i,o){e instanceof Vr||(e=Vr(e));for(var a=/\S+/,s=0,u=e.length;u>s;s++){var c=e[s];c.nodeType===ai&&c.nodeValue.match(a)&&At(c,e[s]=t.document.createElement("span"))}var l=H(e,n,e,r,i,o);q.$$addScopeClass(e);var f=null;return function(t,n,r){lt(t,"scope"),o&&o.needsNewScope&&(t=t.$parent.$new()),r=r||{};var i=r.parentBoundTranscludeFn,a=r.transcludeControllers,s=r.futureParentElement;i&&i.$$boundTransclude&&(i=i.$$boundTransclude),f||(f=F(s));var u;if(u="html"!==f?Vr(ct(f,Vr("<div>").append(e).html())):n?Ei.clone.call(e):e,a)for(var c in a)u.data("$"+c+"Controller",a[c].instance);return q.$$addScopeInfo(u,t),n&&n(u,t),l&&l(t,u,u,i),u}}function F(t){var e=t&&t[0];return e&&"foreignobject"!==V(e)&&Ur.call(e).match(/SVG/)?"svg":"html"}function H(t,e,n,r,i,o){function a(t,n,r,i){var o,a,s,u,c,l,f,p,v;if(h){var g=n.length;for(v=new Array(g),c=0;c<d.length;c+=3)f=d[c],v[f]=n[f]}else v=n;for(c=0,l=d.length;l>c;)s=v[d[c++]],o=d[c++],a=d[c++],o?(o.scope?(u=t.$new(),q.$$addScopeInfo(Vr(s),u)):u=t,p=o.transcludeOnThisElement?W(t,o.transclude,i):!o.templateOnThisElement&&i?i:!i&&e?W(t,e):null,o(a,u,s,r,p)):a&&a(t,s.childNodes,void 0,i)}for(var s,u,c,l,f,p,h,d=[],v=0;v<t.length;v++)s=new I,u=z(t[v],[],s,0===v?r:void 0,i),c=u.length?Q(u,t[v],s,e,n,null,[],[],o):null,c&&c.scope&&q.$$addScopeClass(s.$$element),f=c&&c.terminal||!(l=t[v].childNodes)||!l.length?null:H(l,c?(c.transcludeOnThisElement||!c.templateOnThisElement)&&c.transclude:e),(c||f)&&(d.push(v,c,f),p=!0,h=h||c),o=null;return p?a:null}function W(t,e,n){function r(r,i,o,a,s){return r||(r=t.$new(!1,s),r.$$transcluded=!0),e(r,i,{parentBoundTranscludeFn:n,transcludeControllers:o,futureParentElement:a})}var i=r.$$slots=vt();for(var o in e.$$slots)e.$$slots[o]?i[o]=W(t,e.$$slots[o],n):i[o]=null;return r}function z(t,e,n,r,i){var o,a,s=t.nodeType,u=n.$attr;switch(s){case ii:et(e,ge(V(t)),"E",r,i);for(var c,l,f,p,h,d,v=t.attributes,m=0,$=v&&v.length;$>m;m++){var x=!1,S=!1;c=v[m],l=c.name,h=Qr(c.value),p=ge(l),(d=Tt.test(p))&&(l=l.replace(Gi,"").substr(8).replace(/_(.)/g,function(t,e){return e.toUpperCase()}));var C=p.match(kt);C&&nt(C[1])&&(x=l,S=l.substr(0,l.length-5)+"end",l=l.substr(0,l.length-6)),f=ge(l.toLowerCase()),u[f]=l,!d&&n.hasOwnProperty(f)||(n[f]=h,Wt(t,f)&&(n[f]=!0)),pt(t,e,h,f,d),et(e,f,"A",r,i,x,S)}if(a=t.className,y(a)&&(a=a.animVal),w(a)&&""!==a)for(;o=b.exec(a);)f=ge(o[2]),et(e,f,"C",r,i)&&(n[f]=Qr(o[3])),a=a.substr(o.index+o[0].length);break;case ai:if(11===_r)for(;t.parentNode&&t.nextSibling&&t.nextSibling.nodeType===ai;)t.nodeValue=t.nodeValue+t.nextSibling.nodeValue,t.parentNode.removeChild(t.nextSibling);st(e,t.nodeValue);break;case si:try{o=g.exec(t.nodeValue),o&&(f=ge(o[1]),et(e,f,"M",r,i)&&(n[f]=Qr(o[2])))}catch(E){}}return e.sort(ot),e}function G(t,e,n){var r=[],i=0;if(e&&t.hasAttribute&&t.hasAttribute(e)){do{if(!t)throw Wi("uterdir","Unterminated attribute, found '{0}' but no matching '{1}' found.",e,n);t.nodeType==ii&&(t.hasAttribute(e)&&i++,t.hasAttribute(n)&&i--),r.push(t),t=t.nextSibling}while(i>0)}else r.push(t);return Vr(r)}function J(t,e,n){return function(r,i,o,a,s){return i=G(i[0],e,n),t(r,i,o,a,s)}}function K(t,e,n,r,i,o){var a;return t?q(e,n,r,i,o):function(){return a||(a=q(e,n,r,i,o),e=n=o=null),a.apply(this,arguments)}}function Q(t,e,n,o,a,s,u,l,f){function p(t,e,n,r){t&&(n&&(t=J(t,n,r)),t.require=d.require,t.directiveName=v,(E===d||d.$$isolateScope)&&(t=dt(t,{isolateScope:!0})),u.push(t)),e&&(n&&(e=J(e,n,r)),e.require=d.require,e.directiveName=v,(E===d||d.$$isolateScope)&&(e=dt(e,{isolateScope:!0})),l.push(e))}function h(t,i,o,a,s){function f(t,e,n,r){var i;if(k(t)||(r=n,n=e,e=t,t=void 0),N&&(i=$),n||(n=N?w.parent():w),!r)return s(t,e,i,n,V);var o=s.$$slots[r];if(o)return o(t,e,i,n,V);if(m(o))throw Wi("noslot",'No parent directive that requires a transclusion with slot name "{0}". Element: {1}',r,Y(w))}var p,h,d,v,g,$,b,w,A,O;e===o?(A=n,w=n.$$element):(w=Vr(o),A=new I(w,n)),g=i,E?v=i.$new(!0):x&&(g=i.$parent),s&&(b=f,b.$$boundTransclude=s,b.isSlotFilled=function(t){return!!s.$$slots[t]}),S&&($=Z(w,A,b,S,v,i,E)),E&&(q.$$addScopeInfo(w,v,!0,!(T&&(T===E||T===E.$$originalDirective))),q.$$addScopeClass(w,!0),v.$$isolateBindings=E.$$isolateBindings,O=mt(i,A,v,v.$$isolateBindings,E),O.removeWatches&&v.$on("$destroy",O.removeWatches));for(var j in $){var R=S[j],D=$[j],P=R.$$bindings.bindToController;D.identifier&&P?D.bindingInfo=mt(g,A,D.instance,P,R):D.bindingInfo={};var _=D();_!==D.instance&&(D.instance=_,w.data("$"+R.name+"Controller",_),D.bindingInfo.removeWatches&&D.bindingInfo.removeWatches(),D.bindingInfo=mt(g,A,D.instance,P,R))}for(r(S,function(t,e){var n=t.require;t.bindToController&&!Jr(n)&&y(n)&&c($[e].instance,X(e,n,w,$))}),r($,function(t){var e=t.instance;C(e.$onChanges)&&e.$onChanges(t.bindingInfo.initialChanges),C(e.$onInit)&&e.$onInit(),C(e.$onDestroy)&&g.$on("$destroy",function(){e.$onDestroy()})}),p=0,h=u.length;h>p;p++)d=u[p],gt(d,d.isolateScope?v:i,w,A,d.require&&X(d.directiveName,d.require,w,$),b);var V=i;for(E&&(E.template||null===E.templateUrl)&&(V=v),t&&t(V,o.childNodes,void 0,s),p=l.length-1;p>=0;p--)d=l[p],gt(d,d.isolateScope?v:i,w,A,d.require&&X(d.directiveName,d.require,w,$),b);r($,function(t){var e=t.instance;C(e.$postLink)&&e.$postLink()})}f=f||{};for(var d,v,g,$,b,w=-Number.MAX_VALUE,x=f.newScopeDirective,S=f.controllerDirectives,E=f.newIsolateScopeDirective,T=f.templateDirective,A=f.nonTlbTranscludeDirective,O=!1,j=!1,N=f.hasElementTranscludeDirective,R=n.$$element=Vr(e),D=s,P=o,_=!1,M=!1,F=0,L=t.length;L>F;F++){d=t[F];var H=d.$$start,W=d.$$end;if(H&&(R=G(e,H,W)),g=void 0,w>d.priority)break;if((b=d.scope)&&(d.templateUrl||(y(b)?(at("new/isolated scope",E||x,d,R),E=d):at("new/isolated scope",E,d,R)),x=x||d),v=d.name,!_&&(d.replace&&(d.templateUrl||d.template)||d.transclude&&!d.$$tlb)){for(var Q,et=F+1;Q=t[et++];)if(Q.transclude&&!Q.$$tlb||Q.replace&&(Q.templateUrl||Q.template)){M=!0;break}_=!0}if(!d.templateUrl&&d.controller&&(b=d.controller,S=S||vt(),at("'"+v+"' controller",S[v],d,R),S[v]=d),b=d.transclude)if(O=!0,d.$$tlb||(at("transclusion",A,d,R),A=d),"element"==b)N=!0,w=d.priority,g=R,R=n.$$element=Vr(q.$$createComment(v,n[v])),e=R[0],ht(a,U(g),e),g[0].$$parentNode=g[0].parentNode,P=K(M,g,o,w,D&&D.name,{nonTlbTranscludeDirective:A});else{var nt=vt();if(g=Vr(jt(e)).contents(),y(b)){g=[];var ot=vt(),st=vt();r(b,function(t,e){var n="?"===t.charAt(0);t=n?t.substring(1):t,ot[t]=e,nt[e]=null,st[e]=n}),r(R.contents(),function(t){var e=ot[ge(V(t))];e?(st[e]=!0,nt[e]=nt[e]||[],nt[e].push(t)):g.push(t)}),r(st,function(t,e){if(!t)throw Wi("reqslot","Required transclusion slot `{0}` was not filled.",e)});for(var ut in nt)nt[ut]&&(nt[ut]=K(M,nt[ut],o))}R.empty(),P=K(M,g,o,void 0,void 0,{needsNewScope:d.$$isolateScope||d.$$newScope}),P.$$slots=nt}if(d.template)if(j=!0,at("template",T,d,R),T=d,b=C(d.template)?d.template(R,n):d.template,b=Et(b),d.replace){if(D=d,g=xt(b)?[]:$e(ct(d.templateNamespace,Qr(b))),e=g[0],1!=g.length||e.nodeType!==ii)throw Wi("tplrt","Template for directive '{0}' must have exactly one root element. {1}",v,"");ht(a,R,e);var lt={$attr:{}},ft=z(e,[],lt),pt=t.splice(F+1,t.length-(F+1));(E||x)&&tt(ft,E,x),t=t.concat(ft).concat(pt),rt(n,lt),L=t.length}else R.html(b);if(d.templateUrl)j=!0,at("template",T,d,R),T=d,d.replace&&(D=d),h=it(t.splice(F,t.length-F),R,n,a,O&&P,u,l,{controllerDirectives:S,newScopeDirective:x!==d&&x,newIsolateScopeDirective:E,templateDirective:T,nonTlbTranscludeDirective:A}),L=t.length;else if(d.compile)try{$=d.compile(R,n,P);var $t=d.$$originalDirective||d;C($)?p(null,B($t,$),H,W):$&&p(B($t,$.pre),B($t,$.post),H,W)}catch(yt){i(yt,Y(R))}d.terminal&&(h.terminal=!0,w=Math.max(w,d.priority))}return h.scope=x&&x.scope===!0,h.transcludeOnThisElement=O,h.templateOnThisElement=j,h.transclude=P,f.hasElementTranscludeDirective=N,h}function X(t,e,n,i){var o;if(w(e)){var a=e.match(S),s=e.substring(a[0].length),u=a[1]||a[3],c="?"===a[2];if("^^"===u?n=n.parent():(o=i&&i[s],o=o&&o.instance),!o){var l="$"+s+"Controller";o=u?n.inheritedData(l):n.data(l)}if(!o&&!c)throw Wi("ctreq","Controller '{0}', required by directive '{1}', can't be found!",s,t)}else if(Jr(e)){o=[];for(var f=0,p=e.length;p>f;f++)o[f]=X(t,e[f],n,i)}else y(e)&&(o={},r(e,function(e,r){o[r]=X(t,e,n,i)}));return o||null}function Z(t,e,n,r,i,o,a){var s=vt();for(var c in r){var l=r[c],f={$scope:l===a||l.$$isolateScope?i:o,$element:t,$attrs:e,$transclude:n},p=l.controller;"@"==p&&(p=e[l.name]);var h=u(p,f,!0,l.controllerAs);s[l.name]=h,t.data("$"+l.name+"Controller",h.instance)}return s}function tt(t,e,n){for(var r=0,i=t.length;i>r;r++)t[r]=p(t[r],{$$isolateScope:e,$$newScope:n})}function et(t,n,r,o,s,u,c){if(n===s)return null;var h=null;if(l.hasOwnProperty(n))for(var d,v=e.get(n+f),g=0,$=v.length;$>g;g++)try{if(d=v[g],(m(o)||o>d.priority)&&-1!=d.restrict.indexOf(r)){if(u&&(d=p(d,{$$start:u,$$end:c})),!d.$$bindings){var b=d.$$bindings=a(d,d.name);y(b.isolateScope)&&(d.$$isolateBindings=b.isolateScope)}t.push(d),h=d}}catch(w){i(w)}return h}function nt(t){if(l.hasOwnProperty(t))for(var n,r=e.get(t+f),i=0,o=r.length;o>i;i++)if(n=r[i],n.multiElement)return!0;return!1}function rt(t,e){var n=e.$attr,i=t.$attr,o=t.$$element;r(t,function(r,i){"$"!=i.charAt(0)&&(e[i]&&e[i]!==r&&(r+=("style"===i?";":" ")+e[i]),t.$set(i,r,!0,n[i]))}),r(e,function(e,r){"class"==r?(_(o,e),t["class"]=(t["class"]?t["class"]+" ":"")+e):"style"==r?(o.attr("style",o.attr("style")+";"+e),t.style=(t.style?t.style+";":"")+e):"$"==r.charAt(0)||t.hasOwnProperty(r)||(t[r]=e,i[r]=n[r])})}function it(t,e,n,i,a,s,u,c){var l,f,h=[],d=e[0],v=t.shift(),g=p(v,{templateUrl:null,transclude:null,replace:null,$$originalDirective:v}),m=C(v.templateUrl)?v.templateUrl(e,n):v.templateUrl,$=v.templateNamespace;return e.empty(),o(m).then(function(o){var p,b,w,x;if(o=Et(o),v.replace){if(w=xt(o)?[]:$e(ct($,Qr(o))),p=w[0],1!=w.length||p.nodeType!==ii)throw Wi("tplrt","Template for directive '{0}' must have exactly one root element. {1}",v.name,m);b={$attr:{}},ht(i,e,p);var S=z(p,[],b);y(v.scope)&&tt(S,!0),t=S.concat(t),rt(n,b)}else p=d,e.html(o);for(t.unshift(g),l=Q(t,p,n,a,e,v,s,u,c),r(i,function(t,n){t==p&&(i[n]=e[0])}),f=H(e[0].childNodes,a);h.length;){var C=h.shift(),E=h.shift(),T=h.shift(),k=h.shift(),A=e[0];if(!C.$$destroyed){if(E!==d){var O=E.className;c.hasElementTranscludeDirective&&v.replace||(A=jt(p)),ht(T,Vr(E),A),_(Vr(A),O)}x=l.transcludeOnThisElement?W(C,l.transclude,k):k,l(f,C,A,i,x)}}h=null}),function(t,e,n,r,i){var o=i;e.$$destroyed||(h?h.push(e,n,r,o):(l.transcludeOnThisElement&&(o=W(e,l.transclude,i)),l(f,e,n,r,o)))}}function ot(t,e){var n=e.priority-t.priority;return 0!==n?n:t.name!==e.name?t.name<e.name?-1:1:t.index-e.index}function at(t,e,n,r){function i(t){return t?" (module: "+t+")":""}if(e)throw Wi("multidir","Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}",e.name,i(e.$$moduleName),n.name,i(n.$$moduleName),t,Y(r))}function st(t,e){var r=n(e,!0);r&&t.push({priority:0,compile:function(t){var e=t.parent(),n=!!e.length;return n&&q.$$addBindingClass(e),function(t,e){var i=e.parent();n||q.$$addBindingClass(i),q.$$addBindingInfo(i,r.expressions),t.$watch(r,function(t){e[0].nodeValue=t})}}})}function ct(e,n){switch(e=Rr(e||"html")){case"svg":case"math":var r=t.document.createElement("div");return r.innerHTML="<"+e+">"+n+"</"+e+">",r.childNodes[0].childNodes;default:return n}}function ft(t,e){if("srcdoc"==e)return T.HTML;var n=V(t);return"xlinkHref"==e||"form"==n&&"action"==e||"img"!=n&&("src"==e||"ngSrc"==e)?T.RESOURCE_URL:void 0}function pt(t,e,r,i,o){var a=ft(t,i);o=x[i]||o;var s=n(r,!0,a,o);if(s){if("multiple"===i&&"select"===V(t))throw Wi("selmulti","Binding to the 'multiple' attribute is not supported. Element: {0}",Y(t));e.push({priority:100,compile:function(){return{pre:function(t,e,u){var c=u.$$observers||(u.$$observers=vt());if(E.test(i))throw Wi("nodomevents","Interpolations for HTML DOM event attributes are disallowed.  Please use the ng- versions (such as ng-click instead of onclick) instead.");var l=u[i];l!==r&&(s=l&&n(l,!0,a,o),r=l),s&&(u[i]=s(t),(c[i]||(c[i]=[])).$$inter=!0,(u.$$observers&&u.$$observers[i].$$scope||t).$watch(s,function(t,e){"class"===i&&t!=e?u.$updateClass(t,e):u.$set(i,t)}))}}}})}}function ht(e,n,r){var i,o,a=n[0],s=n.length,u=a.parentNode;if(e)for(i=0,o=e.length;o>i;i++)if(e[i]==a){e[i++]=r;for(var c=i,l=c+s-1,f=e.length;f>c;c++,l++)f>l?e[c]=e[l]:delete e[c];e.length-=s-1,e.context===a&&(e.context=r);break}u&&u.replaceChild(r,a);var p=t.document.createDocumentFragment();for(i=0;s>i;i++)p.appendChild(n[i]);for(Vr.hasData(a)&&(Vr.data(r,Vr.data(a)),Vr(a).off("$destroy")),Vr.cleanData(p.querySelectorAll("*")),i=1;s>i;i++)delete n[i];n[0]=r,n.length=1}function dt(t,e){return c(function(){return t.apply(null,arguments)},t,e)}function gt(t,e,n,r,o,a){try{t(e,n,r,o,a)}catch(s){i(s,Y(n))}}function mt(t,e,i,o,a){function u(e,n,r){C(i.$onChanges)&&n!==r&&($t||(t.$$postDigest(D),
$t=[]),l||(l={},$t.push(c)),l[e]&&(r=l[e].previousValue),l[e]=new ve(r,n))}function c(){i.$onChanges(l),l=void 0}var l,f=[],p={};return r(o,function(r,o){var c,l,d,v,g,m=r.attrName,$=r.optional,y=r.mode;switch(y){case"@":$||Nr.call(e,m)||(i[o]=e[m]=void 0),e.$observe(m,function(t){if(w(t)||N(t)){var e=i[o];u(o,t,e),i[o]=t}}),e.$$observers[m].$$scope=t,c=e[m],w(c)?i[o]=n(c)(t):N(c)&&(i[o]=c),p[o]=new ve(zi,i[o]);break;case"=":if(!Nr.call(e,m)){if($)break;e[m]=void 0}if($&&!e[m])break;l=s(e[m]),v=l.literal?L:function(t,e){return t===e||t!==t&&e!==e},d=l.assign||function(){throw c=i[o]=l(t),Wi("nonassign","Expression '{0}' in attribute '{1}' used with directive '{2}' is non-assignable!",e[m],m,a.name)},c=i[o]=l(t);var b=function(e){return v(e,i[o])||(v(e,c)?d(t,e=i[o]):i[o]=e),c=e};b.$stateful=!0,g=r.collection?t.$watchCollection(e[m],b):t.$watch(s(e[m],b),null,l.literal),f.push(g);break;case"<":if(!Nr.call(e,m)){if($)break;e[m]=void 0}if($&&!e[m])break;l=s(e[m]);var x=i[o]=l(t);p[o]=new ve(zi,i[o]),g=t.$watch(l,function(t,e){if(e===t){if(e===x)return;e=x}u(o,t,e),i[o]=t},l.literal),f.push(g);break;case"&":if(l=e.hasOwnProperty(m)?s(e[m]):h,l===h&&$)break;i[o]=function(e){return l(t,e)}}}),{initialChanges:p,removeWatches:f.length&&function(){for(var t=0,e=f.length;e>t;++t)f[t]()}}}var $t,yt=/^\w/,bt=t.document.createElement("div"),wt=O;I.prototype={$normalize:ge,$addClass:function(t){t&&t.length>0&&j.addClass(this.$$element,t)},$removeClass:function(t){t&&t.length>0&&j.removeClass(this.$$element,t)},$updateClass:function(t,e){var n=me(t,e);n&&n.length&&j.addClass(this.$$element,n);var r=me(e,t);r&&r.length&&j.removeClass(this.$$element,r)},$set:function(t,e,n,o){var a,s=this.$$element[0],u=Wt(s,t),c=zt(t),l=t;if(u?(this.$$element.prop(t,e),o=u):c&&(this[c]=e,l=c),this[t]=e,o?this.$attr[t]=o:(o=this.$attr[t],o||(this.$attr[t]=o=ut(t,"-"))),a=V(this.$$element),"a"===a&&("href"===t||"xlinkHref"===t)||"img"===a&&"src"===t)this[t]=e=R(e,"src"===t);else if("img"===a&&"srcset"===t&&$(e)){for(var f="",p=Qr(e),h=/(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/,d=/\s/.test(p)?h:/(,)/,v=p.split(d),g=Math.floor(v.length/2),y=0;g>y;y++){var b=2*y;f+=R(Qr(v[b]),!0),f+=" "+Qr(v[b+1])}var w=Qr(v[2*y]).split(/\s/);f+=R(Qr(w[0]),!0),2===w.length&&(f+=" "+Qr(w[1])),this[t]=e=f}n!==!1&&(null===e||m(e)?this.$$element.removeAttr(o):yt.test(o)?this.$$element.attr(o,e):P(this.$$element[0],o,e));var x=this.$$observers;x&&r(x[l],function(t){try{t(e)}catch(n){i(n)}})},$observe:function(t,e){var n=this,r=n.$$observers||(n.$$observers=vt()),i=r[t]||(r[t]=[]);return i.push(e),v.$evalAsync(function(){i.$$inter||!n.hasOwnProperty(t)||m(n[t])||e(n[t])}),function(){M(i,e)}}};var St=n.startSymbol(),Ct=n.endSymbol(),Et="{{"==St&&"}}"==Ct?d:function(t){return t.replace(/\{\{/g,St).replace(/}}/g,Ct)},Tt=/^ngAttr[A-Z]/,kt=/^(.+)Start$/;return q.$$addBindingInfo=A?function(t,e){var n=t.data("$binding")||[];Jr(e)?n=n.concat(e):n.push(e),t.data("$binding",n)}:h,q.$$addBindingClass=A?function(t){_(t,"ng-binding")}:h,q.$$addScopeInfo=A?function(t,e,n,r){var i=n?r?"$isolateScopeNoTemplate":"$isolateScope":"$scope";t.data(i,e)}:h,q.$$addScopeClass=A?function(t,e){_(t,e?"ng-isolate-scope":"ng-scope")}:h,q.$$createComment=function(e,n){var r="";return A&&(r=" "+(e||"")+": ",n&&(r+=n+" ")),t.document.createComment(r)},q}]}function ve(t,e){this.previousValue=t,this.currentValue=e}function ge(t){return wt(t.replace(Gi,""))}function me(t,e){var n="",r=t.split(/\s+/),i=e.split(/\s+/);t:for(var o=0;o<r.length;o++){for(var a=r[o],s=0;s<i.length;s++)if(a==i[s])continue t;n+=(n.length>0?" ":"")+a}return n}function $e(t){t=Vr(t);var e=t.length;if(1>=e)return t;for(;e--;){var n=t[e];n.nodeType===si&&Lr.call(t,e,1)}return t}function ye(t,e){if(e&&w(e))return e;if(w(t)){var n=Ki.exec(t);if(n)return n[3]}}function be(){var t={},n=!1;this.has=function(e){return t.hasOwnProperty(e)},this.register=function(e,n){pt(e,"controller"),y(e)?c(t,e):t[e]=n},this.allowGlobals=function(){n=!0},this.$get=["$injector","$window",function(r,i){function o(t,n,r,i){if(!t||!y(t.$scope))throw e("$controller")("noscp","Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",i,n);t.$scope[n]=r}return function(e,a,s,u){var l,f,p,h;if(s=s===!0,u&&w(u)&&(h=u),w(e)){if(f=e.match(Ki),!f)throw Ji("ctrlfmt","Badly formed controller string '{0}'. Must match `__name__ as __id__` or `__name__`.",e);p=f[1],h=h||f[3],e=t.hasOwnProperty(p)?t[p]:ht(a.$scope,p,!0)||(n?ht(i,p,!0):void 0),ft(e,p,!0)}if(s){var d=(Jr(e)?e[e.length-1]:e).prototype;l=Object.create(d||null),h&&o(a,h,l,p||e.name);var v;return v=c(function(){var t=r.invoke(e,l,a,p);return t!==l&&(y(t)||C(t))&&(l=t,h&&o(a,h,l,p||e.name)),l},{instance:l,identifier:h})}return l=r.instantiate(e,a,p),h&&o(a,h,l,p||e.name),l}}]}function we(){this.$get=["$window",function(t){return Vr(t.document)}]}function xe(){this.$get=["$log",function(t){return function(e,n){t.error.apply(t,arguments)}}]}function Se(t){return y(t)?S(t)?t.toISOString():z(t):t}function Ce(){this.$get=function(){return function(t){if(!t)return"";var e=[];return i(t,function(t,n){null===t||m(t)||(Jr(t)?r(t,function(t){e.push(nt(n)+"="+nt(Se(t)))}):e.push(nt(n)+"="+nt(Se(t))))}),e.join("&")}}}function Ee(){this.$get=function(){return function(t){function e(t,o,a){null===t||m(t)||(Jr(t)?r(t,function(t,n){e(t,o+"["+(y(t)?n:"")+"]")}):y(t)&&!S(t)?i(t,function(t,n){e(t,o+(a?"":"[")+n+(a?"":"]"))}):n.push(nt(o)+"="+nt(Se(t))))}if(!t)return"";var n=[];return e(t,"",!0),n.join("&")}}}function Te(t,e){if(w(t)){var n=t.replace(eo,"").trim();if(n){var r=e("Content-Type");(r&&0===r.indexOf(Yi)||ke(n))&&(t=G(n))}}return t}function ke(t){var e=t.match(Zi);return e&&to[e[0]].test(t)}function Ae(t){function e(t,e){t&&(i[t]=i[t]?i[t]+", "+e:e)}var n,i=vt();return w(t)?r(t.split("\n"),function(t){n=t.indexOf(":"),e(Rr(Qr(t.substr(0,n))),Qr(t.substr(n+1)))}):y(t)&&r(t,function(t,n){e(Rr(n),Qr(t))}),i}function Oe(t){var e;return function(n){if(e||(e=Ae(t)),n){var r=e[Rr(n)];return void 0===r&&(r=null),r}return e}}function je(t,e,n,i){return C(i)?i(t,e,n):(r(i,function(r){t=r(t,e,n)}),t)}function Ne(t){return t>=200&&300>t}function Re(){var t=this.defaults={transformResponse:[Te],transformRequest:[function(t){return!y(t)||A(t)||j(t)||O(t)?t:z(t)}],headers:{common:{Accept:"application/json, text/plain, */*"},post:F(Xi),put:F(Xi),patch:F(Xi)},xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",paramSerializer:"$httpParamSerializer"},n=!1;this.useApplyAsync=function(t){return $(t)?(n=!!t,this):n};var i=!0;this.useLegacyPromiseExtensions=function(t){return $(t)?(i=!!t,this):i};var o=this.interceptors=[];this.$get=["$httpBackend","$$cookieReader","$cacheFactory","$rootScope","$q","$injector",function(a,s,u,l,f,p){function h(n){function o(t){var e=c({},t);return e.data=je(t.data,t.headers,t.status,u.transformResponse),Ne(t.status)?e:f.reject(e)}function a(t,e){var n,i={};return r(t,function(t,r){C(t)?(n=t(e),null!=n&&(i[r]=n)):i[r]=t}),i}function s(e){var n,r,i,o=t.headers,s=c({},e.headers);o=c({},o.common,o[Rr(e.method)]);t:for(n in o){r=Rr(n);for(i in s)if(Rr(i)===r)continue t;s[n]=o[n]}return a(s,F(e))}if(!y(n))throw e("$http")("badreq","Http request configuration must be an object.  Received: {0}",n);if(!w(n.url))throw e("$http")("badreq","Http request configuration url must be a string.  Received: {0}",n.url);var u=c({method:"get",transformRequest:t.transformRequest,transformResponse:t.transformResponse,paramSerializer:t.paramSerializer},n);u.headers=s(n),u.method=Dr(u.method),u.paramSerializer=w(u.paramSerializer)?p.get(u.paramSerializer):u.paramSerializer;var l=function(e){var n=e.headers,i=je(e.data,Oe(n),void 0,e.transformRequest);return m(i)&&r(n,function(t,e){"content-type"===Rr(e)&&delete n[e]}),m(e.withCredentials)&&!m(t.withCredentials)&&(e.withCredentials=t.withCredentials),g(e,i).then(o,o)},h=[l,void 0],d=f.when(u);for(r(S,function(t){(t.request||t.requestError)&&h.unshift(t.request,t.requestError),(t.response||t.responseError)&&h.push(t.response,t.responseError)});h.length;){var v=h.shift(),$=h.shift();d=d.then(v,$)}return i?(d.success=function(t){return ft(t,"fn"),d.then(function(e){t(e.data,e.status,e.headers,u)}),d},d.error=function(t){return ft(t,"fn"),d.then(null,function(e){t(e.data,e.status,e.headers,u)}),d}):(d.success=ro("success"),d.error=ro("error")),d}function d(t){r(arguments,function(t){h[t]=function(e,n){return h(c({},n||{},{method:t,url:e}))}})}function v(t){r(arguments,function(t){h[t]=function(e,n,r){return h(c({},r||{},{method:t,url:e,data:n}))}})}function g(e,i){function o(t){if(t){var e={};return r(t,function(t,r){e[r]=function(e){function r(){t(e)}n?l.$applyAsync(r):l.$$phase?r():l.$apply(r)}}),e}}function u(t,e,r,i){function o(){c(e,t,r,i)}v&&(Ne(t)?v.put(E,[t,e,Ae(r),i]):v.remove(E)),n?l.$applyAsync(o):(o(),l.$$phase||l.$apply())}function c(t,n,r,i){n=n>=-1?n:0,(Ne(n)?w.resolve:w.reject)({data:t,status:n,headers:Oe(r),config:e,statusText:i})}function p(t){c(t.data,t.status,F(t.headers()),t.statusText)}function d(){var t=h.pendingRequests.indexOf(e);-1!==t&&h.pendingRequests.splice(t,1)}var v,g,w=f.defer(),S=w.promise,C=e.headers,E=b(e.url,e.paramSerializer(e.params));if(h.pendingRequests.push(e),S.then(d,d),!e.cache&&!t.cache||e.cache===!1||"GET"!==e.method&&"JSONP"!==e.method||(v=y(e.cache)?e.cache:y(t.cache)?t.cache:x),v&&(g=v.get(E),$(g)?R(g)?g.then(p,p):Jr(g)?c(g[1],g[0],F(g[2]),g[3]):c(g,200,{},"OK"):v.put(E,S)),m(g)){var T=Pn(e.url)?s()[e.xsrfCookieName||t.xsrfCookieName]:void 0;T&&(C[e.xsrfHeaderName||t.xsrfHeaderName]=T),a(e.method,E,i,u,C,e.timeout,e.withCredentials,e.responseType,o(e.eventHandlers),o(e.uploadEventHandlers))}return S}function b(t,e){return e.length>0&&(t+=(-1==t.indexOf("?")?"?":"&")+e),t}var x=u("$http");t.paramSerializer=w(t.paramSerializer)?p.get(t.paramSerializer):t.paramSerializer;var S=[];return r(o,function(t){S.unshift(w(t)?p.get(t):p.invoke(t))}),h.pendingRequests=[],d("get","delete","head","jsonp"),v("post","put","patch"),h.defaults=t,h}]}function De(){this.$get=function(){return function(){return new t.XMLHttpRequest}}}function Ie(){this.$get=["$browser","$window","$document","$xhrFactory",function(t,e,n,r){return Pe(t,r,t.defer,e.angular.callbacks,n[0])}]}function Pe(t,e,n,i,o){function a(t,e,n){var r=o.createElement("script"),a=null;return r.type="text/javascript",r.src=t,r.async=!0,a=function(t){di(r,"load",a),di(r,"error",a),o.body.removeChild(r),r=null;var s=-1,u="unknown";t&&("load"!==t.type||i[e].called||(t={type:"error"}),u=t.type,s="error"===t.type?404:200),n&&n(s,u)},hi(r,"load",a),hi(r,"error",a),o.body.appendChild(r),a}return function(o,s,u,c,l,f,p,d,v,g){function y(){x&&x(),S&&S.abort()}function b(e,r,i,o,a){$(T)&&n.cancel(T),x=S=null,e(r,i,o,a),t.$$completeOutstandingRequest(h)}if(t.$$incOutstandingRequestCount(),s=s||t.url(),"jsonp"==Rr(o)){var w="_"+(i.counter++).toString(36);i[w]=function(t){i[w].data=t,i[w].called=!0};var x=a(s.replace("JSON_CALLBACK","angular.callbacks."+w),w,function(t,e){b(c,t,i[w].data,"",e),i[w]=h})}else{var S=e(o,s);S.open(o,s,!0),r(l,function(t,e){$(t)&&S.setRequestHeader(e,t)}),S.onload=function(){var t=S.statusText||"",e="response"in S?S.response:S.responseText,n=1223===S.status?204:S.status;0===n&&(n=e?200:"file"==In(s).protocol?404:0),b(c,n,e,S.getAllResponseHeaders(),t)};var C=function(){b(c,-1,null,null,"")};if(S.onerror=C,S.onabort=C,r(v,function(t,e){S.addEventListener(e,t)}),r(g,function(t,e){S.upload.addEventListener(e,t)}),p&&(S.withCredentials=!0),d)try{S.responseType=d}catch(E){if("json"!==d)throw E}S.send(m(u)?null:u)}if(f>0)var T=n(y,f);else R(f)&&f.then(y)}}function _e(){var t="{{",e="}}";this.startSymbol=function(e){return e?(t=e,this):t},this.endSymbol=function(t){return t?(e=t,this):e},this.$get=["$parse","$exceptionHandler","$sce",function(n,r,i){function o(t){return"\\\\\\"+t}function a(n){return n.replace(h,t).replace(d,e)}function s(t){if(null==t)return"";switch(typeof t){case"string":break;case"number":t=""+t;break;default:t=z(t)}return t}function u(t,e,n,r){var i;return i=t.$watch(function(t){return i(),r(t)},e,n)}function l(o,l,h,d){function g(t){try{return t=R(t),d&&!$(t)?t:s(t)}catch(e){r(io.interr(o,e))}}if(!o.length||-1===o.indexOf(t)){var y;if(!l){var b=a(o);y=v(b),y.exp=o,y.expressions=[],y.$$watchDelegate=u}return y}d=!!d;for(var w,x,S,E=0,T=[],k=[],A=o.length,O=[],j=[];A>E;){if(-1==(w=o.indexOf(t,E))||-1==(x=o.indexOf(e,w+f))){E!==A&&O.push(a(o.substring(E)));break}E!==w&&O.push(a(o.substring(E,w))),S=o.substring(w+f,x),T.push(S),k.push(n(S,g)),E=x+p,j.push(O.length),O.push("")}if(h&&O.length>1&&io.throwNoconcat(o),!l||T.length){var N=function(t){for(var e=0,n=T.length;n>e;e++){if(d&&m(t[e]))return;O[j[e]]=t[e]}return O.join("")},R=function(t){return h?i.getTrusted(h,t):i.valueOf(t)};return c(function(t){var e=0,n=T.length,i=new Array(n);try{for(;n>e;e++)i[e]=k[e](t);return N(i)}catch(a){r(io.interr(o,a))}},{exp:o,expressions:T,$$watchDelegate:function(t,e){var n;return t.$watchGroup(k,function(r,i){var o=N(r);C(e)&&e.call(this,o,r!==i?n:o,t),n=o})}})}}var f=t.length,p=e.length,h=new RegExp(t.replace(/./g,o),"g"),d=new RegExp(e.replace(/./g,o),"g");return l.startSymbol=function(){return t},l.endSymbol=function(){return e},l}]}function Ve(){this.$get=["$rootScope","$window","$q","$$q","$browser",function(t,e,n,r,i){function o(o,s,u,c){function l(){f?o.apply(null,p):o(v)}var f=arguments.length>4,p=f?U(arguments,4):[],h=e.setInterval,d=e.clearInterval,v=0,g=$(c)&&!c,m=(g?r:n).defer(),y=m.promise;return u=$(u)?u:0,y.$$intervalId=h(function(){g?i.defer(l):t.$evalAsync(l),m.notify(v++),u>0&&v>=u&&(m.resolve(v),d(y.$$intervalId),delete a[y.$$intervalId]),g||t.$apply()},s),a[y.$$intervalId]=m,y}var a={};return o.cancel=function(t){return t&&t.$$intervalId in a?(a[t.$$intervalId].reject("canceled"),e.clearInterval(t.$$intervalId),delete a[t.$$intervalId],!0):!1},o}]}function Me(t){for(var e=t.split("/"),n=e.length;n--;)e[n]=et(e[n]);return e.join("/")}function qe(t,e){var n=In(t);e.$$protocol=n.protocol,e.$$host=n.hostname,e.$$port=f(n.port)||ao[n.protocol]||null}function Fe(t,e){var n="/"!==t.charAt(0);n&&(t="/"+t);var r=In(t);e.$$path=decodeURIComponent(n&&"/"===r.pathname.charAt(0)?r.pathname.substring(1):r.pathname),e.$$search=Z(r.search),e.$$hash=decodeURIComponent(r.hash),e.$$path&&"/"!=e.$$path.charAt(0)&&(e.$$path="/"+e.$$path)}function Le(t,e){return 0===t.lastIndexOf(e,0)}function He(t,e){return Le(e,t)?e.substr(t.length):void 0}function Ue(t){var e=t.indexOf("#");return-1==e?t:t.substr(0,e)}function Be(t){return t.replace(/(#.+)|#$/,"$1")}function We(t){return t.substr(0,Ue(t).lastIndexOf("/")+1)}function ze(t){return t.substring(0,t.indexOf("/",t.indexOf("//")+2))}function Ge(t,e,n){this.$$html5=!0,n=n||"",qe(t,this),this.$$parse=function(t){var n=He(e,t);if(!w(n))throw so("ipthprfx",'Invalid url "{0}", missing path prefix "{1}".',t,e);Fe(n,this),this.$$path||(this.$$path="/"),this.$$compose()},this.$$compose=function(){var t=tt(this.$$search),n=this.$$hash?"#"+et(this.$$hash):"";this.$$url=Me(this.$$path)+(t?"?"+t:"")+n,this.$$absUrl=e+this.$$url.substr(1)},this.$$parseLinkUrl=function(r,i){if(i&&"#"===i[0])return this.hash(i.slice(1)),!0;var o,a,s;return $(o=He(t,r))?(a=o,s=$(o=He(n,o))?e+(He("/",o)||o):t+a):$(o=He(e,r))?s=e+o:e==r+"/"&&(s=e),s&&this.$$parse(s),!!s}}function Je(t,e,n){qe(t,this),this.$$parse=function(r){function i(t,e,n){var r,i=/^\/[A-Z]:(\/.*)/;return Le(e,n)&&(e=e.replace(n,"")),i.exec(e)?t:(r=i.exec(t),r?r[1]:t)}var o,a=He(t,r)||He(e,r);m(a)||"#"!==a.charAt(0)?this.$$html5?o=a:(o="",m(a)&&(t=r,this.replace())):(o=He(n,a),m(o)&&(o=a)),Fe(o,this),this.$$path=i(this.$$path,o,t),this.$$compose()},this.$$compose=function(){var e=tt(this.$$search),r=this.$$hash?"#"+et(this.$$hash):"";this.$$url=Me(this.$$path)+(e?"?"+e:"")+r,this.$$absUrl=t+(this.$$url?n+this.$$url:"")},this.$$parseLinkUrl=function(e,n){return Ue(t)==Ue(e)?(this.$$parse(e),!0):!1}}function Ke(t,e,n){this.$$html5=!0,Je.apply(this,arguments),this.$$parseLinkUrl=function(r,i){if(i&&"#"===i[0])return this.hash(i.slice(1)),!0;var o,a;return t==Ue(r)?o=r:(a=He(e,r))?o=t+n+a:e===r+"/"&&(o=e),o&&this.$$parse(o),!!o},this.$$compose=function(){var e=tt(this.$$search),r=this.$$hash?"#"+et(this.$$hash):"";this.$$url=Me(this.$$path)+(e?"?"+e:"")+r,this.$$absUrl=t+n+this.$$url}}function Qe(t){return function(){return this[t]}}function Ye(t,e){return function(n){return m(n)?this[t]:(this[t]=e(n),this.$$compose(),this)}}function Xe(){var t="",e={enabled:!1,requireBase:!0,rewriteLinks:!0};this.hashPrefix=function(e){return $(e)?(t=e,this):t},this.html5Mode=function(t){return N(t)?(e.enabled=t,this):y(t)?(N(t.enabled)&&(e.enabled=t.enabled),N(t.requireBase)&&(e.requireBase=t.requireBase),N(t.rewriteLinks)&&(e.rewriteLinks=t.rewriteLinks),this):e},this.$get=["$rootScope","$browser","$sniffer","$rootElement","$window",function(n,r,i,o,a){function s(t,e,n){var i=c.url(),o=c.$$state;try{r.url(t,e,n),c.$$state=r.state()}catch(a){throw c.url(i),c.$$state=o,a}}function u(t,e){n.$broadcast("$locationChangeSuccess",c.absUrl(),t,c.$$state,e)}var c,l,f,p=r.baseHref(),h=r.url();if(e.enabled){if(!p&&e.requireBase)throw so("nobase","$location in HTML5 mode requires a <base> tag to be present!");f=ze(h)+(p||"/"),l=i.history?Ge:Ke}else f=Ue(h),l=Je;var d=We(f);c=new l(f,d,"#"+t),c.$$parseLinkUrl(h,h),c.$$state=r.state();var v=/^\s*(javascript|mailto):/i;o.on("click",function(t){if(e.rewriteLinks&&!t.ctrlKey&&!t.metaKey&&!t.shiftKey&&2!=t.which&&2!=t.button){for(var i=Vr(t.target);"a"!==V(i[0]);)if(i[0]===o[0]||!(i=i.parent())[0])return;var s=i.prop("href"),u=i.attr("href")||i.attr("xlink:href");y(s)&&"[object SVGAnimatedString]"===s.toString()&&(s=In(s.animVal).href),v.test(s)||!s||i.attr("target")||t.isDefaultPrevented()||c.$$parseLinkUrl(s,u)&&(t.preventDefault(),c.absUrl()!=r.url()&&(n.$apply(),a.angular["ff-684208-preventDefault"]=!0))}}),Be(c.absUrl())!=Be(h)&&r.url(c.absUrl(),!0);var g=!0;return r.onUrlChange(function(t,e){return m(He(d,t))?void(a.location.href=t):(n.$evalAsync(function(){var r,i=c.absUrl(),o=c.$$state;t=Be(t),c.$$parse(t),c.$$state=e,r=n.$broadcast("$locationChangeStart",t,i,e,o).defaultPrevented,c.absUrl()===t&&(r?(c.$$parse(i),c.$$state=o,s(i,!1,o)):(g=!1,u(i,o)))}),void(n.$$phase||n.$digest()))}),n.$watch(function(){var t=Be(r.url()),e=Be(c.absUrl()),o=r.state(),a=c.$$replace,l=t!==e||c.$$html5&&i.history&&o!==c.$$state;(g||l)&&(g=!1,n.$evalAsync(function(){var e=c.absUrl(),r=n.$broadcast("$locationChangeStart",e,t,c.$$state,o).defaultPrevented;c.absUrl()===e&&(r?(c.$$parse(t),c.$$state=o):(l&&s(e,a,o===c.$$state?null:c.$$state),u(t,o)))})),c.$$replace=!1}),c}]}function Ze(){var t=!0,e=this;this.debugEnabled=function(e){return $(e)?(t=e,this):t},this.$get=["$window",function(n){function i(t){return t instanceof Error&&(t.stack?t=t.message&&-1===t.stack.indexOf(t.message)?"Error: "+t.message+"\n"+t.stack:t.stack:t.sourceURL&&(t=t.message+"\n"+t.sourceURL+":"+t.line)),t}function o(t){var e=n.console||{},o=e[t]||e.log||h,a=!1;try{a=!!o.apply}catch(s){}return a?function(){var t=[];return r(arguments,function(e){t.push(i(e))}),o.apply(e,t)}:function(t,e){o(t,null==e?"":e)}}return{log:o("log"),info:o("info"),warn:o("warn"),error:o("error"),debug:function(){var n=o("debug");return function(){t&&n.apply(e,arguments)}}()}}]}function tn(t,e){if("__defineGetter__"===t||"__defineSetter__"===t||"__lookupGetter__"===t||"__lookupSetter__"===t||"__proto__"===t)throw co("isecfld","Attempting to access a disallowed field in Angular expressions! Expression: {0}",e);return t}function en(t){return t+""}function nn(t,e){if(t){if(t.constructor===t)throw co("isecfn","Referencing Function in Angular expressions is disallowed! Expression: {0}",e);if(t.window===t)throw co("isecwindow","Referencing the Window in Angular expressions is disallowed! Expression: {0}",e);if(t.children&&(t.nodeName||t.prop&&t.attr&&t.find))throw co("isecdom","Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}",e);if(t===Object)throw co("isecobj","Referencing Object in Angular expressions is disallowed! Expression: {0}",e)}return t}function rn(t,e){if(t){if(t.constructor===t)throw co("isecfn","Referencing Function in Angular expressions is disallowed! Expression: {0}",e);if(t===lo||t===fo||t===po)throw co("isecff","Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}",e)}}function on(t,e){if(t&&(t===0..constructor||t===(!1).constructor||t==="".constructor||t==={}.constructor||t===[].constructor||t===Function.constructor))throw co("isecaf","Assigning to a constructor is disallowed! Expression: {0}",e)}function an(t,e){return"undefined"!=typeof t?t:e}function sn(t,e){return"undefined"==typeof t?e:"undefined"==typeof e?t:t+e}function un(t,e){var n=t(e);return!n.$stateful}function cn(t,e){var n,i;switch(t.type){case mo.Program:n=!0,r(t.body,function(t){cn(t.expression,e),n=n&&t.expression.constant}),t.constant=n;break;case mo.Literal:t.constant=!0,t.toWatch=[];break;case mo.UnaryExpression:cn(t.argument,e),t.constant=t.argument.constant,t.toWatch=t.argument.toWatch;break;case mo.BinaryExpression:cn(t.left,e),cn(t.right,e),t.constant=t.left.constant&&t.right.constant,t.toWatch=t.left.toWatch.concat(t.right.toWatch);break;case mo.LogicalExpression:cn(t.left,e),cn(t.right,e),t.constant=t.left.constant&&t.right.constant,t.toWatch=t.constant?[]:[t];break;case mo.ConditionalExpression:cn(t.test,e),cn(t.alternate,e),cn(t.consequent,e),t.constant=t.test.constant&&t.alternate.constant&&t.consequent.constant,t.toWatch=t.constant?[]:[t];break;case mo.Identifier:t.constant=!1,t.toWatch=[t];break;case mo.MemberExpression:cn(t.object,e),t.computed&&cn(t.property,e),t.constant=t.object.constant&&(!t.computed||t.property.constant),t.toWatch=[t];break;case mo.CallExpression:n=t.filter?un(e,t.callee.name):!1,i=[],r(t.arguments,function(t){cn(t,e),n=n&&t.constant,t.constant||i.push.apply(i,t.toWatch)}),t.constant=n,t.toWatch=t.filter&&un(e,t.callee.name)?i:[t];break;case mo.AssignmentExpression:cn(t.left,e),cn(t.right,e),t.constant=t.left.constant&&t.right.constant,t.toWatch=[t];break;case mo.ArrayExpression:n=!0,i=[],r(t.elements,function(t){cn(t,e),n=n&&t.constant,t.constant||i.push.apply(i,t.toWatch)}),t.constant=n,t.toWatch=i;break;case mo.ObjectExpression:n=!0,i=[],r(t.properties,function(t){cn(t.value,e),n=n&&t.value.constant&&!t.computed,t.value.constant||i.push.apply(i,t.value.toWatch)}),t.constant=n,t.toWatch=i;break;case mo.ThisExpression:t.constant=!1,t.toWatch=[];break;case mo.LocalsExpression:t.constant=!1,t.toWatch=[]}}function ln(t){if(1==t.length){var e=t[0].expression,n=e.toWatch;return 1!==n.length?n:n[0]!==e?n:void 0}}function fn(t){return t.type===mo.Identifier||t.type===mo.MemberExpression}function pn(t){return 1===t.body.length&&fn(t.body[0].expression)?{type:mo.AssignmentExpression,left:t.body[0].expression,right:{type:mo.NGValueParameter},operator:"="}:void 0}function hn(t){return 0===t.body.length||1===t.body.length&&(t.body[0].expression.type===mo.Literal||t.body[0].expression.type===mo.ArrayExpression||t.body[0].expression.type===mo.ObjectExpression)}function dn(t){return t.constant}function vn(t,e){this.astBuilder=t,this.$filter=e}function gn(t,e){this.astBuilder=t,this.$filter=e}function mn(t){return"constructor"==t}function $n(t){return C(t.valueOf)?t.valueOf():yo.call(t)}function yn(){var t,e,n=vt(),i=vt(),o={"true":!0,"false":!1,"null":null,undefined:void 0};this.addLiteral=function(t,e){o[t]=e},this.setIdentifierFns=function(n,r){return t=n,e=r,this},this.$get=["$filter",function(a){function s(t,e,r){var o,s,c;switch(r=r||b,typeof t){case"string":t=t.trim(),c=t;var g=r?i:n;if(o=g[c],!o){":"===t.charAt(0)&&":"===t.charAt(1)&&(s=!0,t=t.substring(2));var $=r?y:m,w=new go($),x=new $o(w,a,$);o=x.parse(t),o.constant?o.$$watchDelegate=d:s?o.$$watchDelegate=o.literal?p:f:o.inputs&&(o.$$watchDelegate=l),r&&(o=u(o)),g[c]=o}return v(o,e);case"function":return v(t,e);default:return v(h,e)}}function u(t){function e(e,n,r,i){var o=b;b=!0;try{return t(e,n,r,i)}finally{b=o}}if(!t)return t;e.$$watchDelegate=t.$$watchDelegate,e.assign=u(t.assign),e.constant=t.constant,e.literal=t.literal;for(var n=0;t.inputs&&n<t.inputs.length;++n)t.inputs[n]=u(t.inputs[n]);return e.inputs=t.inputs,e}function c(t,e){return null==t||null==e?t===e:"object"==typeof t&&(t=$n(t),"object"==typeof t)?!1:t===e||t!==t&&e!==e}function l(t,e,n,r,i){var o,a=r.inputs;if(1===a.length){var s=c;return a=a[0],t.$watch(function(t){var e=a(t);return c(e,s)||(o=r(t,void 0,void 0,[e]),s=e&&$n(e)),o},e,n,i)}for(var u=[],l=[],f=0,p=a.length;p>f;f++)u[f]=c,l[f]=null;return t.$watch(function(t){for(var e=!1,n=0,i=a.length;i>n;n++){var s=a[n](t);(e||(e=!c(s,u[n])))&&(l[n]=s,u[n]=s&&$n(s))}return e&&(o=r(t,void 0,void 0,l)),o},e,n,i)}function f(t,e,n,r){var i,o;return i=t.$watch(function(t){return r(t)},function(t,n,r){o=t,C(e)&&e.apply(this,arguments),$(t)&&r.$$postDigest(function(){$(o)&&i()})},n)}function p(t,e,n,i){function o(t){var e=!0;return r(t,function(t){$(t)||(e=!1)}),e}var a,s;return a=t.$watch(function(t){return i(t)},function(t,n,r){s=t,C(e)&&e.call(this,t,n,r),o(t)&&r.$$postDigest(function(){o(s)&&a()})},n)}function d(t,e,n,r){var i;return i=t.$watch(function(t){return i(),r(t)},e,n)}function v(t,e){if(!e)return t;var n=t.$$watchDelegate,r=!1,i=n!==p&&n!==f,o=i?function(n,i,o,a){var s=r&&a?a[0]:t(n,i,o,a);return e(s,n,i)}:function(n,r,i,o){var a=t(n,r,i,o),s=e(a,n,r);return $(a)?s:a};return t.$$watchDelegate&&t.$$watchDelegate!==l?o.$$watchDelegate=t.$$watchDelegate:e.$stateful||(o.$$watchDelegate=l,r=!t.inputs,o.inputs=t.inputs?t.inputs:[t]),o}var g=Xr().noUnsafeEval,m={csp:g,expensiveChecks:!1,literals:q(o),isIdentifierStart:C(t)&&t,isIdentifierContinue:C(e)&&e},y={csp:g,expensiveChecks:!0,literals:q(o),isIdentifierStart:C(t)&&t,isIdentifierContinue:C(e)&&e},b=!1;return s.$$runningExpensiveChecks=function(){return b},s}]}function bn(){this.$get=["$rootScope","$exceptionHandler",function(t,e){return xn(function(e){t.$evalAsync(e)},e)}]}function wn(){this.$get=["$browser","$exceptionHandler",function(t,e){return xn(function(e){t.defer(e)},e)}]}function xn(t,n){function i(){this.$$state={status:0}}function o(t,e){return function(n){e.call(t,n)}}function a(t){var e,r,i;i=t.pending,t.processScheduled=!1,t.pending=void 0;for(var o=0,a=i.length;a>o;++o){r=i[o][0],e=i[o][t.status];try{C(e)?r.resolve(e(t.value)):1===t.status?r.resolve(t.value):r.reject(t.value)}catch(s){r.reject(s),n(s)}}}function s(e){!e.processScheduled&&e.pending&&(e.processScheduled=!0,t(function(){a(e)}))}function u(){this.promise=new i}function l(t){var e=new u,n=0,i=Jr(t)?[]:{};return r(t,function(t,r){n++,g(t).then(function(t){i.hasOwnProperty(r)||(i[r]=t,--n||e.resolve(i))},function(t){i.hasOwnProperty(r)||e.reject(t)})}),0===n&&e.resolve(i),e.promise}var f=e("$q",TypeError),p=function(){var t=new u;return t.resolve=o(t,t.resolve),t.reject=o(t,t.reject),t.notify=o(t,t.notify),t};c(i.prototype,{then:function(t,e,n){if(m(t)&&m(e)&&m(n))return this;var r=new u;return this.$$state.pending=this.$$state.pending||[],this.$$state.pending.push([r,t,e,n]),this.$$state.status>0&&s(this.$$state),r.promise},"catch":function(t){return this.then(null,t)},"finally":function(t,e){return this.then(function(e){return v(e,!0,t)},function(e){return v(e,!1,t)},e)}}),c(u.prototype,{resolve:function(t){this.promise.$$state.status||(t===this.promise?this.$$reject(f("qcycle","Expected promise to be resolved with value other than itself '{0}'",t)):this.$$resolve(t))},$$resolve:function(t){function e(t){u||(u=!0,a.$$resolve(t))}function r(t){u||(u=!0,a.$$reject(t))}var i,a=this,u=!1;try{(y(t)||C(t))&&(i=t&&t.then),C(i)?(this.promise.$$state.status=-1,i.call(t,e,r,o(this,this.notify))):(this.promise.$$state.value=t,this.promise.$$state.status=1,s(this.promise.$$state))}catch(c){r(c),n(c)}},reject:function(t){this.promise.$$state.status||this.$$reject(t)},$$reject:function(t){this.promise.$$state.value=t,this.promise.$$state.status=2,s(this.promise.$$state)},notify:function(e){var r=this.promise.$$state.pending;this.promise.$$state.status<=0&&r&&r.length&&t(function(){for(var t,i,o=0,a=r.length;a>o;o++){i=r[o][0],t=r[o][3];try{i.notify(C(t)?t(e):e)}catch(s){n(s)}}})}});var h=function(t){var e=new u;return e.reject(t),e.promise},d=function(t,e){var n=new u;return e?n.resolve(t):n.reject(t),n.promise},v=function(t,e,n){var r=null;try{C(n)&&(r=n())}catch(i){return d(i,!1)}return R(r)?r.then(function(){return d(t,e)},function(t){return d(t,!1)}):d(t,e)},g=function(t,e,n,r){var i=new u;return i.resolve(t),i.promise.then(e,n,r)},$=g,b=function(t){function e(t){r.resolve(t)}function n(t){r.reject(t)}if(!C(t))throw f("norslvr","Expected resolverFn, got '{0}'",t);var r=new u;return t(e,n),r.promise};return b.prototype=i.prototype,b.defer=p,b.reject=h,b.when=g,b.resolve=$,b.all=l,b}function Sn(){this.$get=["$window","$timeout",function(t,e){var n=t.requestAnimationFrame||t.webkitRequestAnimationFrame,r=t.cancelAnimationFrame||t.webkitCancelAnimationFrame||t.webkitCancelRequestAnimationFrame,i=!!n,o=i?function(t){var e=n(t);return function(){r(e)}}:function(t){var n=e(t,16.66,!1);return function(){e.cancel(n)}};return o.supported=i,o}]}function Cn(){function t(t){function e(){this.$$watchers=this.$$nextSibling=this.$$childHead=this.$$childTail=null,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$id=a(),this.$$ChildScope=null}return e.prototype=t,e}var i=10,o=e("$rootScope"),s=null,u=null;this.digestTtl=function(t){return arguments.length&&(i=t),i},this.$get=["$exceptionHandler","$parse","$browser",function(e,c,l){function f(t){t.currentScope.$$destroyed=!0}function p(t){9===_r&&(t.$$childHead&&p(t.$$childHead),t.$$nextSibling&&p(t.$$nextSibling)),t.$parent=t.$$nextSibling=t.$$prevSibling=t.$$childHead=t.$$childTail=t.$root=t.$$watchers=null}function d(){this.$id=a(),this.$$phase=this.$parent=this.$$watchers=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null,this.$root=this,this.$$destroyed=!1,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$$isolateBindings=null}function v(t){if(E.$$phase)throw o("inprog","{0} already in progress",E.$$phase);E.$$phase=t}function g(){E.$$phase=null}function $(t,e){do t.$$watchersCount+=e;while(t=t.$parent)}function b(t,e,n){do t.$$listenerCount[n]-=e,0===t.$$listenerCount[n]&&delete t.$$listenerCount[n];while(t=t.$parent)}function w(){}function x(){for(;A.length;)try{A.shift()()}catch(t){e(t)}u=null}function S(){null===u&&(u=l.defer(function(){E.$apply(x)}))}d.prototype={constructor:d,$new:function(e,n){var r;return n=n||this,e?(r=new d,r.$root=this.$root):(this.$$ChildScope||(this.$$ChildScope=t(this)),r=new this.$$ChildScope),r.$parent=n,r.$$prevSibling=n.$$childTail,n.$$childHead?(n.$$childTail.$$nextSibling=r,n.$$childTail=r):n.$$childHead=n.$$childTail=r,(e||n!=this)&&r.$on("$destroy",f),r},$watch:function(t,e,n,r){var i=c(t);if(i.$$watchDelegate)return i.$$watchDelegate(this,e,n,i,t);var o=this,a=o.$$watchers,u={fn:e,last:w,get:i,exp:r||t,eq:!!n};return s=null,C(e)||(u.fn=h),a||(a=o.$$watchers=[]),a.unshift(u),$(this,1),function(){M(a,u)>=0&&$(o,-1),s=null}},$watchGroup:function(t,e){function n(){u=!1,c?(c=!1,e(o,o,s)):e(o,i,s)}var i=new Array(t.length),o=new Array(t.length),a=[],s=this,u=!1,c=!0;if(!t.length){var l=!0;return s.$evalAsync(function(){l&&e(o,o,s)}),function(){l=!1}}return 1===t.length?this.$watch(t[0],function(t,n,r){o[0]=t,i[0]=n,e(o,t===n?o:i,r)}):(r(t,function(t,e){var r=s.$watch(t,function(t,r){o[e]=t,i[e]=r,u||(u=!0,s.$evalAsync(n))});a.push(r)}),function(){for(;a.length;)a.shift()()})},$watchCollection:function(t,e){function r(t){o=t;var e,r,i,s,u;if(!m(o)){if(y(o))if(n(o)){a!==h&&(a=h,g=a.length=0,f++),e=o.length,g!==e&&(f++,a.length=g=e);for(var c=0;e>c;c++)u=a[c],s=o[c],i=u!==u&&s!==s,i||u===s||(f++,a[c]=s)}else{a!==d&&(a=d={},g=0,f++),e=0;for(r in o)Nr.call(o,r)&&(e++,s=o[r],u=a[r],r in a?(i=u!==u&&s!==s,
i||u===s||(f++,a[r]=s)):(g++,a[r]=s,f++));if(g>e){f++;for(r in a)Nr.call(o,r)||(g--,delete a[r])}}else a!==o&&(a=o,f++);return f}}function i(){if(v?(v=!1,e(o,o,u)):e(o,s,u),l)if(y(o))if(n(o)){s=new Array(o.length);for(var t=0;t<o.length;t++)s[t]=o[t]}else{s={};for(var r in o)Nr.call(o,r)&&(s[r]=o[r])}else s=o}r.$stateful=!0;var o,a,s,u=this,l=e.length>1,f=0,p=c(t,r),h=[],d={},v=!0,g=0;return this.$watch(p,i)},$digest:function(){var t,n,r,a,c,f,p,h,d,m,$,y,b=i,S=this,A=[];v("$digest"),l.$$checkUrlChange(),this===E&&null!==u&&(l.defer.cancel(u),x()),s=null;do{h=!1,m=S;for(var j=0;j<T.length;j++){try{y=T[j],y.scope.$eval(y.expression,y.locals)}catch(N){e(N)}s=null}T.length=0;t:do{if(f=m.$$watchers)for(p=f.length;p--;)try{if(t=f[p])if(c=t.get,(n=c(m))===(r=t.last)||(t.eq?L(n,r):"number"==typeof n&&"number"==typeof r&&isNaN(n)&&isNaN(r))){if(t===s){h=!1;break t}}else h=!0,s=t,t.last=t.eq?q(n,null):n,a=t.fn,a(n,r===w?n:r,m),5>b&&($=4-b,A[$]||(A[$]=[]),A[$].push({msg:C(t.exp)?"fn: "+(t.exp.name||t.exp.toString()):t.exp,newVal:n,oldVal:r}))}catch(N){e(N)}if(!(d=m.$$watchersCount&&m.$$childHead||m!==S&&m.$$nextSibling))for(;m!==S&&!(d=m.$$nextSibling);)m=m.$parent}while(m=d);if((h||T.length)&&!b--)throw g(),o("infdig","{0} $digest() iterations reached. Aborting!\nWatchers fired in the last 5 iterations: {1}",i,A)}while(h||T.length);for(g();O<k.length;)try{k[O++]()}catch(N){e(N)}k.length=O=0},$destroy:function(){if(!this.$$destroyed){var t=this.$parent;this.$broadcast("$destroy"),this.$$destroyed=!0,this===E&&l.$$applicationDestroyed(),$(this,-this.$$watchersCount);for(var e in this.$$listenerCount)b(this,this.$$listenerCount[e],e);t&&t.$$childHead==this&&(t.$$childHead=this.$$nextSibling),t&&t.$$childTail==this&&(t.$$childTail=this.$$prevSibling),this.$$prevSibling&&(this.$$prevSibling.$$nextSibling=this.$$nextSibling),this.$$nextSibling&&(this.$$nextSibling.$$prevSibling=this.$$prevSibling),this.$destroy=this.$digest=this.$apply=this.$evalAsync=this.$applyAsync=h,this.$on=this.$watch=this.$watchGroup=function(){return h},this.$$listeners={},this.$$nextSibling=null,p(this)}},$eval:function(t,e){return c(t)(this,e)},$evalAsync:function(t,e){E.$$phase||T.length||l.defer(function(){T.length&&E.$digest()}),T.push({scope:this,expression:c(t),locals:e})},$$postDigest:function(t){k.push(t)},$apply:function(t){try{v("$apply");try{return this.$eval(t)}finally{g()}}catch(n){e(n)}finally{try{E.$digest()}catch(n){throw e(n),n}}},$applyAsync:function(t){function e(){n.$eval(t)}var n=this;t&&A.push(e),t=c(t),S()},$on:function(t,e){var n=this.$$listeners[t];n||(this.$$listeners[t]=n=[]),n.push(e);var r=this;do r.$$listenerCount[t]||(r.$$listenerCount[t]=0),r.$$listenerCount[t]++;while(r=r.$parent);var i=this;return function(){var r=n.indexOf(e);-1!==r&&(n[r]=null,b(i,1,t))}},$emit:function(t,n){var r,i,o,a=[],s=this,u=!1,c={name:t,targetScope:s,stopPropagation:function(){u=!0},preventDefault:function(){c.defaultPrevented=!0},defaultPrevented:!1},l=H([c],arguments,1);do{for(r=s.$$listeners[t]||a,c.currentScope=s,i=0,o=r.length;o>i;i++)if(r[i])try{r[i].apply(null,l)}catch(f){e(f)}else r.splice(i,1),i--,o--;if(u)return c.currentScope=null,c;s=s.$parent}while(s);return c.currentScope=null,c},$broadcast:function(t,n){var r=this,i=r,o=r,a={name:t,targetScope:r,preventDefault:function(){a.defaultPrevented=!0},defaultPrevented:!1};if(!r.$$listenerCount[t])return a;for(var s,u,c,l=H([a],arguments,1);i=o;){for(a.currentScope=i,s=i.$$listeners[t]||[],u=0,c=s.length;c>u;u++)if(s[u])try{s[u].apply(null,l)}catch(f){e(f)}else s.splice(u,1),u--,c--;if(!(o=i.$$listenerCount[t]&&i.$$childHead||i!==r&&i.$$nextSibling))for(;i!==r&&!(o=i.$$nextSibling);)i=i.$parent}return a.currentScope=null,a}};var E=new d,T=E.$$asyncQueue=[],k=E.$$postDigestQueue=[],A=E.$$applyAsyncQueue=[],O=0;return E}]}function En(){var t=/^\s*(https?|ftp|mailto|tel|file):/,e=/^\s*((https?|ftp|file|blob):|data:image\/)/;this.aHrefSanitizationWhitelist=function(e){return $(e)?(t=e,this):t},this.imgSrcSanitizationWhitelist=function(t){return $(t)?(e=t,this):e},this.$get=function(){return function(n,r){var i,o=r?e:t;return i=In(n).href,""===i||i.match(o)?n:"unsafe:"+i}}}function Tn(t){if("self"===t)return t;if(w(t)){if(t.indexOf("***")>-1)throw bo("iwcard","Illegal sequence *** in string matcher.  String: {0}",t);return t=Yr(t).replace("\\*\\*",".*").replace("\\*","[^:/.?&;]*"),new RegExp("^"+t+"$")}if(E(t))return new RegExp("^"+t.source+"$");throw bo("imatcher",'Matchers may only be "self", string patterns or RegExp objects')}function kn(t){var e=[];return $(t)&&r(t,function(t){e.push(Tn(t))}),e}function An(){this.SCE_CONTEXTS=wo;var t=["self"],e=[];this.resourceUrlWhitelist=function(e){return arguments.length&&(t=kn(e)),t},this.resourceUrlBlacklist=function(t){return arguments.length&&(e=kn(t)),e},this.$get=["$injector",function(n){function r(t,e){return"self"===t?Pn(e):!!t.exec(e.href)}function i(n){var i,o,a=In(n.toString()),s=!1;for(i=0,o=t.length;o>i;i++)if(r(t[i],a)){s=!0;break}if(s)for(i=0,o=e.length;o>i;i++)if(r(e[i],a)){s=!1;break}return s}function o(t){var e=function(t){this.$$unwrapTrustedValue=function(){return t}};return t&&(e.prototype=new t),e.prototype.valueOf=function(){return this.$$unwrapTrustedValue()},e.prototype.toString=function(){return this.$$unwrapTrustedValue().toString()},e}function a(t,e){var n=f.hasOwnProperty(t)?f[t]:null;if(!n)throw bo("icontext","Attempted to trust a value in invalid context. Context: {0}; Value: {1}",t,e);if(null===e||m(e)||""===e)return e;if("string"!=typeof e)throw bo("itype","Attempted to trust a non-string value in a content requiring a string: Context: {0}",t);return new n(e)}function s(t){return t instanceof l?t.$$unwrapTrustedValue():t}function u(t,e){if(null===e||m(e)||""===e)return e;var n=f.hasOwnProperty(t)?f[t]:null;if(n&&e instanceof n)return e.$$unwrapTrustedValue();if(t===wo.RESOURCE_URL){if(i(e))return e;throw bo("insecurl","Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}",e.toString())}if(t===wo.HTML)return c(e);throw bo("unsafe","Attempting to use an unsafe value in a safe context.")}var c=function(t){throw bo("unsafe","Attempting to use an unsafe value in a safe context.")};n.has("$sanitize")&&(c=n.get("$sanitize"));var l=o(),f={};return f[wo.HTML]=o(l),f[wo.CSS]=o(l),f[wo.URL]=o(l),f[wo.JS]=o(l),f[wo.RESOURCE_URL]=o(f[wo.URL]),{trustAs:a,getTrusted:u,valueOf:s}}]}function On(){var t=!0;this.enabled=function(e){return arguments.length&&(t=!!e),t},this.$get=["$parse","$sceDelegate",function(e,n){if(t&&8>_r)throw bo("iequirks","Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks mode.  You can fix this by adding the text <!doctype html> to the top of your HTML document.  See http://docs.angularjs.org/api/ng.$sce for more information.");var i=F(wo);i.isEnabled=function(){return t},i.trustAs=n.trustAs,i.getTrusted=n.getTrusted,i.valueOf=n.valueOf,t||(i.trustAs=i.getTrusted=function(t,e){return e},i.valueOf=d),i.parseAs=function(t,n){var r=e(n);return r.literal&&r.constant?r:e(n,function(e){return i.getTrusted(t,e)})};var o=i.parseAs,a=i.getTrusted,s=i.trustAs;return r(wo,function(t,e){var n=Rr(e);i[wt("parse_as_"+n)]=function(e){return o(t,e)},i[wt("get_trusted_"+n)]=function(e){return a(t,e)},i[wt("trust_as_"+n)]=function(e){return s(t,e)}}),i}]}function jn(){this.$get=["$window","$document",function(t,e){var n,r,i={},o=t.chrome&&t.chrome.app&&t.chrome.app.runtime,a=!o&&t.history&&t.history.pushState,s=f((/android (\d+)/.exec(Rr((t.navigator||{}).userAgent))||[])[1]),u=/Boxee/i.test((t.navigator||{}).userAgent),c=e[0]||{},l=/^(Moz|webkit|ms)(?=[A-Z])/,p=c.body&&c.body.style,h=!1,d=!1;if(p){for(var v in p)if(r=l.exec(v)){n=r[0],n=n[0].toUpperCase()+n.substr(1);break}n||(n="WebkitOpacity"in p&&"webkit"),h=!!("transition"in p||n+"Transition"in p),d=!!("animation"in p||n+"Animation"in p),!s||h&&d||(h=w(p.webkitTransition),d=w(p.webkitAnimation))}return{history:!(!a||4>s||u),hasEvent:function(t){if("input"===t&&11>=_r)return!1;if(m(i[t])){var e=c.createElement("div");i[t]="on"+t in e}return i[t]},csp:Xr(),vendorPrefix:n,transitions:h,animations:d,android:s}}]}function Nn(){var t;this.httpOptions=function(e){return e?(t=e,this):t},this.$get=["$templateCache","$http","$q","$sce",function(e,n,r,i){function o(a,s){function u(t){if(!s)throw xo("tpload","Failed to load template: {0} (HTTP status: {1} {2})",a,t.status,t.statusText);return r.reject(t)}o.totalPendingRequests++,w(a)&&!m(e.get(a))||(a=i.getTrustedResourceUrl(a));var l=n.defaults&&n.defaults.transformResponse;return Jr(l)?l=l.filter(function(t){return t!==Te}):l===Te&&(l=null),n.get(a,c({cache:e,transformResponse:l},t))["finally"](function(){o.totalPendingRequests--}).then(function(t){return e.put(a,t.data),t.data},u)}return o.totalPendingRequests=0,o}]}function Rn(){this.$get=["$rootScope","$browser","$location",function(t,e,n){var i={};return i.findBindings=function(t,e,n){var i=t.getElementsByClassName("ng-binding"),o=[];return r(i,function(t){var i=zr.element(t).data("$binding");i&&r(i,function(r){if(n){var i=new RegExp("(^|\\s)"+Yr(e)+"(\\s|\\||$)");i.test(r)&&o.push(t)}else-1!=r.indexOf(e)&&o.push(t)})}),o},i.findModels=function(t,e,n){for(var r=["ng-","data-ng-","ng\\:"],i=0;i<r.length;++i){var o=n?"=":"*=",a="["+r[i]+"model"+o+'"'+e+'"]',s=t.querySelectorAll(a);if(s.length)return s}},i.getLocation=function(){return n.url()},i.setLocation=function(e){e!==n.url()&&(n.url(e),t.$digest())},i.whenStable=function(t){e.notifyWhenNoOutstandingRequests(t)},i}]}function Dn(){this.$get=["$rootScope","$browser","$q","$$q","$exceptionHandler",function(t,e,n,r,i){function o(o,s,u){C(o)||(u=s,s=o,o=h);var c,l=U(arguments,3),f=$(u)&&!u,p=(f?r:n).defer(),d=p.promise;return c=e.defer(function(){try{p.resolve(o.apply(null,l))}catch(e){p.reject(e),i(e)}finally{delete a[d.$$timeoutId]}f||t.$apply()},s),d.$$timeoutId=c,a[c]=p,d}var a={};return o.cancel=function(t){return t&&t.$$timeoutId in a?(a[t.$$timeoutId].reject("canceled"),delete a[t.$$timeoutId],e.defer.cancel(t.$$timeoutId)):!1},o}]}function In(t){var e=t;return _r&&(So.setAttribute("href",e),e=So.href),So.setAttribute("href",e),{href:So.href,protocol:So.protocol?So.protocol.replace(/:$/,""):"",host:So.host,search:So.search?So.search.replace(/^\?/,""):"",hash:So.hash?So.hash.replace(/^#/,""):"",hostname:So.hostname,port:So.port,pathname:"/"===So.pathname.charAt(0)?So.pathname:"/"+So.pathname}}function Pn(t){var e=w(t)?In(t):t;return e.protocol===Co.protocol&&e.host===Co.host}function _n(){this.$get=v(t)}function Vn(t){function e(t){try{return decodeURIComponent(t)}catch(e){return t}}var n=t[0]||{},r={},i="";return function(){var t,o,a,s,u,c=n.cookie||"";if(c!==i)for(i=c,t=i.split("; "),r={},a=0;a<t.length;a++)o=t[a],s=o.indexOf("="),s>0&&(u=e(o.substring(0,s)),m(r[u])&&(r[u]=e(o.substring(s+1))));return r}}function Mn(){this.$get=Vn}function qn(t){function e(i,o){if(y(i)){var a={};return r(i,function(t,n){a[n]=e(n,t)}),a}return t.factory(i+n,o)}var n="Filter";this.register=e,this.$get=["$injector",function(t){return function(e){return t.get(e+n)}}],e("currency",Bn),e("date",or),e("filter",Fn),e("json",ar),e("limitTo",sr),e("lowercase",No),e("number",Wn),e("orderBy",ur),e("uppercase",Ro)}function Fn(){return function(t,r,i){if(!n(t)){if(null==t)return t;throw e("filter")("notarray","Expected array but received: {0}",t)}var o,a,s=Un(r);switch(s){case"function":o=r;break;case"boolean":case"null":case"number":case"string":a=!0;case"object":o=Ln(r,i,a);break;default:return t}return Array.prototype.filter.call(t,o)}}function Ln(t,e,n){var r,i=y(t)&&"$"in t;return e===!0?e=L:C(e)||(e=function(t,e){return m(t)?!1:null===t||null===e?t===e:y(e)||y(t)&&!g(t)?!1:(t=Rr(""+t),e=Rr(""+e),-1!==t.indexOf(e))}),r=function(r){return i&&!y(r)?Hn(r,t.$,e,!1):Hn(r,t,e,n)}}function Hn(t,e,n,r,i){var o=Un(t),a=Un(e);if("string"===a&&"!"===e.charAt(0))return!Hn(t,e.substring(1),n,r);if(Jr(t))return t.some(function(t){return Hn(t,e,n,r)});switch(o){case"object":var s;if(r){for(s in t)if("$"!==s.charAt(0)&&Hn(t[s],e,n,!0))return!0;return i?!1:Hn(t,e,n,!1)}if("object"===a){for(s in e){var u=e[s];if(!C(u)&&!m(u)){var c="$"===s,l=c?t:t[s];if(!Hn(l,u,n,c,c))return!1}}return!0}return n(t,e);case"function":return!1;default:return n(t,e)}}function Un(t){return null===t?"null":typeof t}function Bn(t){var e=t.NUMBER_FORMATS;return function(t,n,r){return m(n)&&(n=e.CURRENCY_SYM),m(r)&&(r=e.PATTERNS[1].maxFrac),null==t?t:Jn(t,e.PATTERNS[1],e.GROUP_SEP,e.DECIMAL_SEP,r).replace(/\u00A4/g,n)}}function Wn(t){var e=t.NUMBER_FORMATS;return function(t,n){return null==t?t:Jn(t,e.PATTERNS[0],e.GROUP_SEP,e.DECIMAL_SEP,n)}}function zn(t){var e,n,r,i,o,a=0;for((n=t.indexOf(To))>-1&&(t=t.replace(To,"")),(r=t.search(/e/i))>0?(0>n&&(n=r),n+=+t.slice(r+1),t=t.substring(0,r)):0>n&&(n=t.length),r=0;t.charAt(r)==ko;r++);if(r==(o=t.length))e=[0],n=1;else{for(o--;t.charAt(o)==ko;)o--;for(n-=r,e=[],i=0;o>=r;r++,i++)e[i]=+t.charAt(r)}return n>Eo&&(e=e.splice(0,Eo-1),a=n-1,n=1),{d:e,e:a,i:n}}function Gn(t,e,n,r){var i=t.d,o=i.length-t.i;e=m(e)?Math.min(Math.max(n,o),r):+e;var a=e+t.i,s=i[a];if(a>0){i.splice(Math.max(t.i,a));for(var u=a;u<i.length;u++)i[u]=0}else{o=Math.max(0,o),t.i=1,i.length=Math.max(1,a=e+1),i[0]=0;for(var c=1;a>c;c++)i[c]=0}if(s>=5)if(0>a-1){for(var l=0;l>a;l--)i.unshift(0),t.i++;i.unshift(1),t.i++}else i[a-1]++;for(;o<Math.max(0,e);o++)i.push(0);var f=i.reduceRight(function(t,e,n,r){return e+=t,r[n]=e%10,Math.floor(e/10)},0);f&&(i.unshift(f),t.i++)}function Jn(t,e,n,r,i){if(!w(t)&&!x(t)||isNaN(t))return"";var o,a=!isFinite(t),s=!1,u=Math.abs(t)+"",c="";if(a)c="∞";else{o=zn(u),Gn(o,i,e.minFrac,e.maxFrac);var l=o.d,f=o.i,p=o.e,h=[];for(s=l.reduce(function(t,e){return t&&!e},!0);0>f;)l.unshift(0),f++;f>0?h=l.splice(f,l.length):(h=l,l=[0]);var d=[];for(l.length>=e.lgSize&&d.unshift(l.splice(-e.lgSize,l.length).join(""));l.length>e.gSize;)d.unshift(l.splice(-e.gSize,l.length).join(""));l.length&&d.unshift(l.join("")),c=d.join(n),h.length&&(c+=r+h.join("")),p&&(c+="e+"+p)}return 0>t&&!s?e.negPre+c+e.negSuf:e.posPre+c+e.posSuf}function Kn(t,e,n,r){var i="";for((0>t||r&&0>=t)&&(r?t=-t+1:(t=-t,i="-")),t=""+t;t.length<e;)t=ko+t;return n&&(t=t.substr(t.length-e)),i+t}function Qn(t,e,n,r,i){return n=n||0,function(o){var a=o["get"+t]();return(n>0||a>-n)&&(a+=n),0===a&&-12==n&&(a=12),Kn(a,e,r,i)}}function Yn(t,e,n){return function(r,i){var o=r["get"+t](),a=(n?"STANDALONE":"")+(e?"SHORT":""),s=Dr(a+t);return i[s][o]}}function Xn(t,e,n){var r=-1*n,i=r>=0?"+":"";return i+=Kn(Math[r>0?"floor":"ceil"](r/60),2)+Kn(Math.abs(r%60),2)}function Zn(t){var e=new Date(t,0,1).getDay();return new Date(t,0,(4>=e?5:12)-e)}function tr(t){return new Date(t.getFullYear(),t.getMonth(),t.getDate()+(4-t.getDay()))}function er(t){return function(e){var n=Zn(e.getFullYear()),r=tr(e),i=+r-+n,o=1+Math.round(i/6048e5);return Kn(o,t)}}function nr(t,e){return t.getHours()<12?e.AMPMS[0]:e.AMPMS[1]}function rr(t,e){return t.getFullYear()<=0?e.ERAS[0]:e.ERAS[1]}function ir(t,e){return t.getFullYear()<=0?e.ERANAMES[0]:e.ERANAMES[1]}function or(t){function e(t){var e;if(e=t.match(n)){var r=new Date(0),i=0,o=0,a=e[8]?r.setUTCFullYear:r.setFullYear,s=e[8]?r.setUTCHours:r.setHours;e[9]&&(i=f(e[9]+e[10]),o=f(e[9]+e[11])),a.call(r,f(e[1]),f(e[2])-1,f(e[3]));var u=f(e[4]||0)-i,c=f(e[5]||0)-o,l=f(e[6]||0),p=Math.round(1e3*parseFloat("0."+(e[7]||0)));return s.call(r,u,c,l,p),r}return t}var n=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;return function(n,i,o){var a,s,u="",c=[];if(i=i||"mediumDate",i=t.DATETIME_FORMATS[i]||i,w(n)&&(n=jo.test(n)?f(n):e(n)),x(n)&&(n=new Date(n)),!S(n)||!isFinite(n.getTime()))return n;for(;i;)s=Oo.exec(i),s?(c=H(c,s,1),i=c.pop()):(c.push(i),i=null);var l=n.getTimezoneOffset();return o&&(l=J(o,l),n=Q(n,o,!0)),r(c,function(e){a=Ao[e],u+=a?a(n,t.DATETIME_FORMATS,l):"''"===e?"'":e.replace(/(^'|'$)/g,"").replace(/''/g,"'")}),u}}function ar(){return function(t,e){return m(e)&&(e=2),z(t,e)}}function sr(){return function(t,e,n){return e=Math.abs(Number(e))===1/0?Number(e):f(e),isNaN(e)?t:(x(t)&&(t=t.toString()),Jr(t)||w(t)?(n=!n||isNaN(n)?0:f(n),n=0>n?Math.max(0,t.length+n):n,e>=0?t.slice(n,n+e):0===n?t.slice(e,t.length):t.slice(Math.max(0,n+e),n)):t)}}function ur(t){function r(e,n){return n=n?-1:1,e.map(function(e){var r=1,i=d;if(C(e))i=e;else if(w(e)&&("+"!=e.charAt(0)&&"-"!=e.charAt(0)||(r="-"==e.charAt(0)?-1:1,e=e.substring(1)),""!==e&&(i=t(e),i.constant))){var o=i();i=function(t){return t[o]}}return{get:i,descending:r*n}})}function i(t){switch(typeof t){case"number":case"boolean":case"string":return!0;default:return!1}}function o(t,e){return"function"==typeof t.valueOf&&(t=t.valueOf(),i(t))?t:g(t)&&(t=t.toString(),i(t))?t:e}function a(t,e){var n=typeof t;return null===t?(n="string",t="null"):"string"===n?t=t.toLowerCase():"object"===n&&(t=o(t,e)),{value:t,type:n}}function s(t,e){var n=0;return t.type===e.type?t.value!==e.value&&(n=t.value<e.value?-1:1):n=t.type<e.type?-1:1,n}return function(t,i,o){function u(t,e){return{value:t,predicateValues:l.map(function(n){return a(n.get(t),e)})}}function c(t,e){for(var n=0,r=0,i=l.length;i>r&&!(n=s(t.predicateValues[r],e.predicateValues[r])*l[r].descending);++r);return n}if(null==t)return t;if(!n(t))throw e("orderBy")("notarray","Expected array but received: {0}",t);Jr(i)||(i=[i]),0===i.length&&(i=["+"]);var l=r(i,o);l.push({get:function(){return{}},descending:o?-1:1});var f=Array.prototype.map.call(t,u);return f.sort(c),t=f.map(function(t){return t.value})}}function cr(t){return C(t)&&(t={link:t}),t.restrict=t.restrict||"AC",v(t)}function lr(t,e){t.$name=e}function fr(t,e,n,i,o){var a=this,s=[];a.$error={},a.$$success={},a.$pending=void 0,a.$name=o(e.name||e.ngForm||"")(n),a.$dirty=!1,a.$pristine=!0,a.$valid=!0,a.$invalid=!1,a.$submitted=!1,a.$$parentForm=Po,a.$rollbackViewValue=function(){r(s,function(t){t.$rollbackViewValue()})},a.$commitViewValue=function(){r(s,function(t){t.$commitViewValue()})},a.$addControl=function(t){pt(t.$name,"input"),s.push(t),t.$name&&(a[t.$name]=t),t.$$parentForm=a},a.$$renameControl=function(t,e){var n=t.$name;a[n]===t&&delete a[n],a[e]=t,t.$name=e},a.$removeControl=function(t){t.$name&&a[t.$name]===t&&delete a[t.$name],r(a.$pending,function(e,n){a.$setValidity(n,null,t)}),r(a.$error,function(e,n){a.$setValidity(n,null,t)}),r(a.$$success,function(e,n){a.$setValidity(n,null,t)}),M(s,t),t.$$parentForm=Po},Tr({ctrl:this,$element:t,set:function(t,e,n){var r=t[e];if(r){var i=r.indexOf(n);-1===i&&r.push(n)}else t[e]=[n]},unset:function(t,e,n){var r=t[e];r&&(M(r,n),0===r.length&&delete t[e])},$animate:i}),a.$setDirty=function(){i.removeClass(t,ya),i.addClass(t,ba),a.$dirty=!0,a.$pristine=!1,a.$$parentForm.$setDirty()},a.$setPristine=function(){i.setClass(t,ya,ba+" "+_o),a.$dirty=!1,a.$pristine=!0,a.$submitted=!1,r(s,function(t){t.$setPristine()})},a.$setUntouched=function(){r(s,function(t){t.$setUntouched()})},a.$setSubmitted=function(){i.addClass(t,_o),a.$submitted=!0,a.$$parentForm.$setSubmitted()}}function pr(t){t.$formatters.push(function(e){return t.$isEmpty(e)?e:e.toString()})}function hr(t,e,n,r,i,o){dr(t,e,n,r,i,o),pr(r)}function dr(t,e,n,r,i,o){var a=Rr(e[0].type);if(!i.android){var s=!1;e.on("compositionstart",function(){s=!0}),e.on("compositionend",function(){s=!1,c()})}var u,c=function(t){if(u&&(o.defer.cancel(u),u=null),!s){var i=e.val(),c=t&&t.type;"password"===a||n.ngTrim&&"false"===n.ngTrim||(i=Qr(i)),(r.$viewValue!==i||""===i&&r.$$hasNativeValidators)&&r.$setViewValue(i,c)}};if(i.hasEvent("input"))e.on("input",c);else{var l=function(t,e,n){u||(u=o.defer(function(){u=null,e&&e.value===n||c(t)}))};e.on("keydown",function(t){var e=t.keyCode;91===e||e>15&&19>e||e>=37&&40>=e||l(t,this,this.value)}),i.hasEvent("paste")&&e.on("paste cut",l)}e.on("change",c),Qo[a]&&r.$$hasNativeValidators&&a===n.type&&e.on(Ko,function(t){if(!u){var e=this[jr],n=e.badInput,r=e.typeMismatch;u=o.defer(function(){u=null,e.badInput===n&&e.typeMismatch===r||c(t)})}}),r.$render=function(){var t=r.$isEmpty(r.$viewValue)?"":r.$viewValue;e.val()!==t&&e.val(t)}}function vr(t,e){if(S(t))return t;if(w(t)){zo.lastIndex=0;var n=zo.exec(t);if(n){var r=+n[1],i=+n[2],o=0,a=0,s=0,u=0,c=Zn(r),l=7*(i-1);return e&&(o=e.getHours(),a=e.getMinutes(),s=e.getSeconds(),u=e.getMilliseconds()),new Date(r,0,c.getDate()+l,o,a,s,u)}}return NaN}function gr(t,e){return function(n,i){var o,a;if(S(n))return n;if(w(n)){if('"'==n.charAt(0)&&'"'==n.charAt(n.length-1)&&(n=n.substring(1,n.length-1)),Fo.test(n))return new Date(n);if(t.lastIndex=0,o=t.exec(n))return o.shift(),a=i?{yyyy:i.getFullYear(),MM:i.getMonth()+1,dd:i.getDate(),HH:i.getHours(),mm:i.getMinutes(),ss:i.getSeconds(),sss:i.getMilliseconds()/1e3}:{yyyy:1970,MM:1,dd:1,HH:0,mm:0,ss:0,sss:0},r(o,function(t,n){n<e.length&&(a[e[n]]=+t)}),new Date(a.yyyy,a.MM-1,a.dd,a.HH,a.mm,a.ss||0,1e3*a.sss||0)}return NaN}}function mr(t,e,n,r){return function(i,o,a,s,u,c,l){function f(t){return t&&!(t.getTime&&t.getTime()!==t.getTime())}function p(t){return $(t)&&!S(t)?n(t)||void 0:t}$r(i,o,a,s),dr(i,o,a,s,u,c);var h,d=s&&s.$options&&s.$options.timezone;if(s.$$parserName=t,s.$parsers.push(function(t){if(s.$isEmpty(t))return null;if(e.test(t)){var r=n(t,h);return d&&(r=Q(r,d)),r}}),s.$formatters.push(function(t){if(t&&!S(t))throw Ta("datefmt","Expected `{0}` to be a date",t);return f(t)?(h=t,h&&d&&(h=Q(h,d,!0)),l("date")(t,r,d)):(h=null,"")}),$(a.min)||a.ngMin){var v;s.$validators.min=function(t){return!f(t)||m(v)||n(t)>=v},a.$observe("min",function(t){v=p(t),s.$validate()})}if($(a.max)||a.ngMax){var g;s.$validators.max=function(t){return!f(t)||m(g)||n(t)<=g},a.$observe("max",function(t){g=p(t),s.$validate()})}}}function $r(t,e,n,r){var i=e[0],o=r.$$hasNativeValidators=y(i.validity);o&&r.$parsers.push(function(t){var n=e.prop(jr)||{};return n.badInput||n.typeMismatch?void 0:t})}function yr(t,e,n,r,i,o){if($r(t,e,n,r),dr(t,e,n,r,i,o),r.$$parserName="number",r.$parsers.push(function(t){return r.$isEmpty(t)?null:Uo.test(t)?parseFloat(t):void 0}),r.$formatters.push(function(t){if(!r.$isEmpty(t)){if(!x(t))throw Ta("numfmt","Expected `{0}` to be a number",t);t=t.toString()}return t}),$(n.min)||n.ngMin){var a;r.$validators.min=function(t){return r.$isEmpty(t)||m(a)||t>=a},n.$observe("min",function(t){$(t)&&!x(t)&&(t=parseFloat(t,10)),a=x(t)&&!isNaN(t)?t:void 0,r.$validate()})}if($(n.max)||n.ngMax){var s;r.$validators.max=function(t){return r.$isEmpty(t)||m(s)||s>=t},n.$observe("max",function(t){$(t)&&!x(t)&&(t=parseFloat(t,10)),s=x(t)&&!isNaN(t)?t:void 0,r.$validate()})}}function br(t,e,n,r,i,o){dr(t,e,n,r,i,o),pr(r),r.$$parserName="url",r.$validators.url=function(t,e){var n=t||e;return r.$isEmpty(n)||Lo.test(n)}}function wr(t,e,n,r,i,o){dr(t,e,n,r,i,o),pr(r),r.$$parserName="email",r.$validators.email=function(t,e){var n=t||e;return r.$isEmpty(n)||Ho.test(n)}}function xr(t,e,n,r){m(n.name)&&e.attr("name",a());var i=function(t){e[0].checked&&r.$setViewValue(n.value,t&&t.type)};e.on("click",i),r.$render=function(){var t=n.value;e[0].checked=t==r.$viewValue},n.$observe("value",r.$render)}function Sr(t,e,n,r,i){var o;if($(r)){if(o=t(r),!o.constant)throw Ta("constexpr","Expected constant expression for `{0}`, but saw `{1}`.",n,r);return o(e)}return i}function Cr(t,e,n,r,i,o,a,s){var u=Sr(s,t,"ngTrueValue",n.ngTrueValue,!0),c=Sr(s,t,"ngFalseValue",n.ngFalseValue,!1),l=function(t){r.$setViewValue(e[0].checked,t&&t.type)};e.on("click",l),r.$render=function(){e[0].checked=r.$viewValue},r.$isEmpty=function(t){return t===!1},r.$formatters.push(function(t){return L(t,u)}),r.$parsers.push(function(t){return t?u:c})}function Er(t,e){return t="ngClass"+t,["$animate",function(n){function i(t,e){var n=[];t:for(var r=0;r<t.length;r++){for(var i=t[r],o=0;o<e.length;o++)if(i==e[o])continue t;n.push(i)}return n}function o(t){var e=[];return Jr(t)?(r(t,function(t){e=e.concat(o(t))}),e):w(t)?t.split(" "):y(t)?(r(t,function(t,n){t&&(e=e.concat(n.split(" ")))}),e):t}return{restrict:"AC",link:function(a,s,u){function c(t){var e=f(t,1);u.$addClass(e)}function l(t){var e=f(t,-1);u.$removeClass(e)}function f(t,e){var n=s.data("$classCounts")||vt(),i=[];return r(t,function(t){(e>0||n[t])&&(n[t]=(n[t]||0)+e,n[t]===+(e>0)&&i.push(t))}),s.data("$classCounts",n),i.join(" ")}function p(t,e){var r=i(e,t),o=i(t,e);r=f(r,1),o=f(o,-1),r&&r.length&&n.addClass(s,r),o&&o.length&&n.removeClass(s,o)}function h(t){if(e===!0||(1&a.$index)===e){var n=o(t||[]);if(d){if(!L(t,d)){var r=o(d);p(r,n)}}else c(n)}d=Jr(t)?t.map(function(t){return F(t)}):F(t)}var d;a.$watch(u[t],h,!0),u.$observe("class",function(e){h(a.$eval(u[t]))}),"ngClass"!==t&&a.$watch("$index",function(n,r){var i=1&n;if(i!==(1&r)){var s=o(a.$eval(u[t]));i===e?c(s):l(s)}})}}}]}function Tr(t){function e(t,e,s){m(e)?n("$pending",t,s):r("$pending",t,s),N(e)?e?(l(a.$error,t,s),c(a.$$success,t,s)):(c(a.$error,t,s),l(a.$$success,t,s)):(l(a.$error,t,s),l(a.$$success,t,s)),a.$pending?(i(Sa,!0),a.$valid=a.$invalid=void 0,o("",null)):(i(Sa,!1),a.$valid=kr(a.$error),a.$invalid=!a.$valid,o("",a.$valid));var u;u=a.$pending&&a.$pending[t]?void 0:a.$error[t]?!1:a.$$success[t]?!0:null,o(t,u),a.$$parentForm.$setValidity(t,u,a)}function n(t,e,n){a[t]||(a[t]={}),c(a[t],e,n)}function r(t,e,n){a[t]&&l(a[t],e,n),kr(a[t])&&(a[t]=void 0)}function i(t,e){e&&!u[t]?(f.addClass(s,t),u[t]=!0):!e&&u[t]&&(f.removeClass(s,t),u[t]=!1)}function o(t,e){t=t?"-"+ut(t,"-"):"",i(ma+t,e===!0),i($a+t,e===!1)}var a=t.ctrl,s=t.$element,u={},c=t.set,l=t.unset,f=t.$animate;u[$a]=!(u[ma]=s.hasClass(ma)),a.$setValidity=e}function kr(t){if(t)for(var e in t)if(t.hasOwnProperty(e))return!1;return!0}function Ar(t){t[0].hasAttribute("selected")&&(t[0].selected=!0)}var Or=/^\/(.+)\/([a-z]*)$/,jr="validity",Nr=Object.prototype.hasOwnProperty,Rr=function(t){return w(t)?t.toLowerCase():t},Dr=function(t){return w(t)?t.toUpperCase():t},Ir=function(t){return w(t)?t.replace(/[A-Z]/g,function(t){return String.fromCharCode(32|t.charCodeAt(0))}):t},Pr=function(t){return w(t)?t.replace(/[a-z]/g,function(t){return String.fromCharCode(-33&t.charCodeAt(0))}):t};"i"!=="I".toLowerCase()&&(Rr=Ir,Dr=Pr);var _r,Vr,Mr,qr,Fr=[].slice,Lr=[].splice,Hr=[].push,Ur=Object.prototype.toString,Br=Object.getPrototypeOf,Wr=e("ng"),zr=t.angular||(t.angular={}),Gr=0;_r=t.document.documentMode,h.$inject=[],d.$inject=[];var Jr=Array.isArray,Kr=/^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array\]$/,Qr=function(t){return w(t)?t.trim():t},Yr=function(t){return t.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")},Xr=function(){function e(){try{return new Function(""),!1}catch(t){return!0}}if(!$(Xr.rules)){var n=t.document.querySelector("[ng-csp]")||t.document.querySelector("[data-ng-csp]");if(n){var r=n.getAttribute("ng-csp")||n.getAttribute("data-ng-csp");Xr.rules={noUnsafeEval:!r||-1!==r.indexOf("no-unsafe-eval"),noInlineStyle:!r||-1!==r.indexOf("no-inline-style")}}else Xr.rules={noUnsafeEval:e(),noInlineStyle:!1}}return Xr.rules},Zr=function(){if($(Zr.name_))return Zr.name_;var e,n,r,i,o=ei.length;for(n=0;o>n;++n)if(r=ei[n],e=t.document.querySelector("["+r.replace(":","\\:")+"jq]")){i=e.getAttribute(r+"jq");break}return Zr.name_=i},ti=/:/g,ei=["ng-","data-ng-","ng:","x-ng-"],ni=/[A-Z]/g,ri=!1,ii=1,oi=2,ai=3,si=8,ui=9,ci=11,li={full:"1.5.6",major:1,minor:5,dot:6,codeName:"arrow-stringification"};Ot.expando="ng339";var fi=Ot.cache={},pi=1,hi=function(t,e,n){t.addEventListener(e,n,!1)},di=function(t,e,n){t.removeEventListener(e,n,!1)};Ot._data=function(t){return this.cache[t[this.expando]]||{}};var vi=/([\:\-\_]+(.))/g,gi=/^moz([A-Z])/,mi={mouseleave:"mouseout",mouseenter:"mouseover"},$i=e("jqLite"),yi=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,bi=/<|&#?\w+;/,wi=/<([\w:-]+)/,xi=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,Si={option:[1,'<select multiple="multiple">',"</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Si.optgroup=Si.option,Si.tbody=Si.tfoot=Si.colgroup=Si.caption=Si.thead,Si.th=Si.td;var Ci=t.Node.prototype.contains||function(t){return!!(16&this.compareDocumentPosition(t))},Ei=Ot.prototype={ready:function(e){function n(){r||(r=!0,e())}var r=!1;"complete"===t.document.readyState?t.setTimeout(n):(this.on("DOMContentLoaded",n),Ot(t).on("load",n))},toString:function(){var t=[];return r(this,function(e){t.push(""+e)}),"["+t.join(", ")+"]"},eq:function(t){return Vr(t>=0?this[t]:this[this.length+t])},length:0,push:Hr,sort:[].sort,splice:[].splice},Ti={};r("multiple,selected,checked,disabled,readOnly,required,open".split(","),function(t){Ti[Rr(t)]=t});var ki={};r("input,select,option,textarea,button,form,details".split(","),function(t){ki[t]=!0});var Ai={ngMinlength:"minlength",ngMaxlength:"maxlength",ngMin:"min",ngMax:"max",ngPattern:"pattern"};r({data:Pt,removeData:Dt,hasData:Ct,cleanData:Et},function(t,e){Ot[e]=t}),r({data:Pt,inheritedData:Lt,scope:function(t){return Vr.data(t,"$scope")||Lt(t.parentNode||t,["$isolateScope","$scope"])},isolateScope:function(t){return Vr.data(t,"$isolateScope")||Vr.data(t,"$isolateScopeNoTemplate")},controller:Ft,injector:function(t){return Lt(t,"$injector")},removeAttr:function(t,e){t.removeAttribute(e)},hasClass:_t,css:function(t,e,n){return e=wt(e),$(n)?void(t.style[e]=n):t.style[e]},attr:function(t,e,n){var r=t.nodeType;if(r!==ai&&r!==oi&&r!==si){var i=Rr(e);if(Ti[i]){if(!$(n))return t[e]||(t.attributes.getNamedItem(e)||h).specified?i:void 0;n?(t[e]=!0,t.setAttribute(e,i)):(t[e]=!1,t.removeAttribute(i))}else if($(n))t.setAttribute(e,n);else if(t.getAttribute){var o=t.getAttribute(e,2);return null===o?void 0:o}}},prop:function(t,e,n){return $(n)?void(t[e]=n):t[e]},text:function(){function t(t,e){if(m(e)){var n=t.nodeType;return n===ii||n===ai?t.textContent:""}t.textContent=e}return t.$dv="",t}(),val:function(t,e){if(m(e)){if(t.multiple&&"select"===V(t)){var n=[];return r(t.options,function(t){t.selected&&n.push(t.value||t.text)}),0===n.length?null:n}return t.value}t.value=e},html:function(t,e){return m(e)?t.innerHTML:(Nt(t,!0),void(t.innerHTML=e))},empty:Ht},function(t,e){Ot.prototype[e]=function(e,n){var r,i,o=this.length;if(t!==Ht&&m(2==t.length&&t!==_t&&t!==Ft?e:n)){if(y(e)){for(r=0;o>r;r++)if(t===Pt)t(this[r],e);else for(i in e)t(this[r],i,e[i]);return this}for(var a=t.$dv,s=m(a)?Math.min(o,1):o,u=0;s>u;u++){var c=t(this[u],e,n);a=a?a+c:c}return a}for(r=0;o>r;r++)t(this[r],e,n);return this}}),r({removeData:Dt,on:function(t,e,n,r){if($(r))throw $i("onargs","jqLite#on() does not support the `selector` or `eventData` parameters");if(St(t)){var i=It(t,!0),o=i.events,a=i.handle;a||(a=i.handle=Gt(t,o));for(var s=e.indexOf(" ")>=0?e.split(" "):[e],u=s.length,c=function(e,r,i){var s=o[e];s||(s=o[e]=[],s.specialHandlerWrapper=r,"$destroy"===e||i||hi(t,e,a)),s.push(n)};u--;)e=s[u],mi[e]?(c(mi[e],Kt),c(e,void 0,!0)):c(e)}},off:Rt,one:function(t,e,n){t=Vr(t),t.on(e,function r(){t.off(e,n),t.off(e,r)}),t.on(e,n)},replaceWith:function(t,e){var n,i=t.parentNode;Nt(t),r(new Ot(e),function(e){n?i.insertBefore(e,n.nextSibling):i.replaceChild(e,t),n=e})},children:function(t){var e=[];return r(t.childNodes,function(t){t.nodeType===ii&&e.push(t)}),e},contents:function(t){return t.contentDocument||t.childNodes||[]},append:function(t,e){var n=t.nodeType;if(n===ii||n===ci){e=new Ot(e);for(var r=0,i=e.length;i>r;r++){var o=e[r];t.appendChild(o)}}},prepend:function(t,e){if(t.nodeType===ii){var n=t.firstChild;r(new Ot(e),function(e){t.insertBefore(e,n)})}},wrap:function(t,e){At(t,Vr(e).eq(0).clone()[0])},remove:Ut,detach:function(t){Ut(t,!0)},after:function(t,e){var n=t,r=t.parentNode;e=new Ot(e);for(var i=0,o=e.length;o>i;i++){var a=e[i];r.insertBefore(a,n.nextSibling),n=a}},addClass:Mt,removeClass:Vt,toggleClass:function(t,e,n){e&&r(e.split(" "),function(e){var r=n;m(r)&&(r=!_t(t,e)),(r?Mt:Vt)(t,e)})},parent:function(t){
var e=t.parentNode;return e&&e.nodeType!==ci?e:null},next:function(t){return t.nextElementSibling},find:function(t,e){return t.getElementsByTagName?t.getElementsByTagName(e):[]},clone:jt,triggerHandler:function(t,e,n){var i,o,a,s=e.type||e,u=It(t),l=u&&u.events,f=l&&l[s];f&&(i={preventDefault:function(){this.defaultPrevented=!0},isDefaultPrevented:function(){return this.defaultPrevented===!0},stopImmediatePropagation:function(){this.immediatePropagationStopped=!0},isImmediatePropagationStopped:function(){return this.immediatePropagationStopped===!0},stopPropagation:h,type:s,target:t},e.type&&(i=c(i,e)),o=F(f),a=n?[i].concat(n):[i],r(o,function(e){i.isImmediatePropagationStopped()||e.apply(t,a)}))}},function(t,e){Ot.prototype[e]=function(e,n,r){for(var i,o=0,a=this.length;a>o;o++)m(i)?(i=t(this[o],e,n,r),$(i)&&(i=Vr(i))):qt(i,t(this[o],e,n,r));return $(i)?i:this},Ot.prototype.bind=Ot.prototype.on,Ot.prototype.unbind=Ot.prototype.off}),Xt.prototype={put:function(t,e){this[Yt(t,this.nextUid)]=e},get:function(t){return this[Yt(t,this.nextUid)]},remove:function(t){var e=this[t=Yt(t,this.nextUid)];return delete this[t],e}};var Oi=[function(){this.$get=[function(){return Xt}]}],ji=/^([^\(]+?)=>/,Ni=/^[^\(]*\(\s*([^\)]*)\)/m,Ri=/,/,Di=/^\s*(_?)(\S+?)\1\s*$/,Ii=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,Pi=e("$injector");re.$$annotate=ne;var _i=e("$animate"),Vi=1,Mi="ng-animate",qi=function(){this.$get=h},Fi=function(){var t=new Xt,e=[];this.$get=["$$AnimateRunner","$rootScope",function(n,i){function o(t,e,n){var i=!1;return e&&(e=w(e)?e.split(" "):Jr(e)?e:[],r(e,function(e){e&&(i=!0,t[e]=n)})),i}function a(){r(e,function(e){var n=t.get(e);if(n){var i=se(e.attr("class")),o="",a="";r(n,function(t,e){var n=!!i[e];t!==n&&(t?o+=(o.length?" ":"")+e:a+=(a.length?" ":"")+e)}),r(e,function(t){o&&Mt(t,o),a&&Vt(t,a)}),t.remove(e)}}),e.length=0}function s(n,r,s){var u=t.get(n)||{},c=o(u,r,!0),l=o(u,s,!1);(c||l)&&(t.put(n,u),e.push(n),1===e.length&&i.$$postDigest(a))}return{enabled:h,on:h,off:h,pin:h,push:function(t,e,r,i){i&&i(),r=r||{},r.from&&t.css(r.from),r.to&&t.css(r.to),(r.addClass||r.removeClass)&&s(t,r.addClass,r.removeClass);var o=new n;return o.complete(),o}}}]},Li=["$provide",function(t){var e=this;this.$$registeredAnimations=Object.create(null),this.register=function(n,r){if(n&&"."!==n.charAt(0))throw _i("notcsel","Expecting class selector starting with '.' got '{0}'.",n);var i=n+"-animation";e.$$registeredAnimations[n.substr(1)]=i,t.factory(i,r)},this.classNameFilter=function(t){if(1===arguments.length&&(this.$$classNameFilter=t instanceof RegExp?t:null,this.$$classNameFilter)){var e=new RegExp("(\\s+|\\/)"+Mi+"(\\s+|\\/)");if(e.test(this.$$classNameFilter.toString()))throw _i("nongcls",'$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.',Mi)}return this.$$classNameFilter},this.$get=["$$animateQueue",function(t){function e(t,e,n){if(n){var r=ae(n);!r||r.parentNode||r.previousElementSibling||(n=null)}n?n.after(t):e.prepend(t)}return{on:t.on,off:t.off,pin:t.pin,enabled:t.enabled,cancel:function(t){t.end&&t.end()},enter:function(n,r,i,o){return r=r&&Vr(r),i=i&&Vr(i),r=r||i.parent(),e(n,r,i),t.push(n,"enter",ue(o))},move:function(n,r,i,o){return r=r&&Vr(r),i=i&&Vr(i),r=r||i.parent(),e(n,r,i),t.push(n,"move",ue(o))},leave:function(e,n){return t.push(e,"leave",ue(n),function(){e.remove()})},addClass:function(e,n,r){return r=ue(r),r.addClass=oe(r.addclass,n),t.push(e,"addClass",r)},removeClass:function(e,n,r){return r=ue(r),r.removeClass=oe(r.removeClass,n),t.push(e,"removeClass",r)},setClass:function(e,n,r,i){return i=ue(i),i.addClass=oe(i.addClass,n),i.removeClass=oe(i.removeClass,r),t.push(e,"setClass",i)},animate:function(e,n,r,i,o){return o=ue(o),o.from=o.from?c(o.from,n):n,o.to=o.to?c(o.to,r):r,i=i||"ng-inline-animate",o.tempClasses=oe(o.tempClasses,i),t.push(e,"animate",o)}}}]}],Hi=function(){this.$get=["$$rAF",function(t){function e(e){n.push(e),n.length>1||t(function(){for(var t=0;t<n.length;t++)n[t]();n=[]})}var n=[];return function(){var t=!1;return e(function(){t=!0}),function(n){t?n():e(n)}}}]},Ui=function(){this.$get=["$q","$sniffer","$$animateAsyncRun","$document","$timeout",function(t,e,n,i,o){function a(t){this.setHost(t);var e=n(),r=function(t){o(t,0,!1)};this._doneCallbacks=[],this._tick=function(t){var n=i[0];n&&n.hidden?r(t):e(t)},this._state=0}var s=0,u=1,c=2;return a.chain=function(t,e){function n(){return r===t.length?void e(!0):void t[r](function(t){return t===!1?void e(!1):(r++,void n())})}var r=0;n()},a.all=function(t,e){function n(n){o=o&&n,++i===t.length&&e(o)}var i=0,o=!0;r(t,function(t){t.done(n)})},a.prototype={setHost:function(t){this.host=t||{}},done:function(t){this._state===c?t():this._doneCallbacks.push(t)},progress:h,getPromise:function(){if(!this.promise){var e=this;this.promise=t(function(t,n){e.done(function(e){e===!1?n():t()})})}return this.promise},then:function(t,e){return this.getPromise().then(t,e)},"catch":function(t){return this.getPromise()["catch"](t)},"finally":function(t){return this.getPromise()["finally"](t)},pause:function(){this.host.pause&&this.host.pause()},resume:function(){this.host.resume&&this.host.resume()},end:function(){this.host.end&&this.host.end(),this._resolve(!0)},cancel:function(){this.host.cancel&&this.host.cancel(),this._resolve(!1)},complete:function(t){var e=this;e._state===s&&(e._state=u,e._tick(function(){e._resolve(t)}))},_resolve:function(t){this._state!==c&&(r(this._doneCallbacks,function(e){e(t)}),this._doneCallbacks.length=0,this._state=c)}},a}]},Bi=function(){this.$get=["$$rAF","$q","$$AnimateRunner",function(t,e,n){return function(e,r){function i(){return t(function(){o(),s||u.complete(),s=!0}),u}function o(){a.addClass&&(e.addClass(a.addClass),a.addClass=null),a.removeClass&&(e.removeClass(a.removeClass),a.removeClass=null),a.to&&(e.css(a.to),a.to=null)}var a=r||{};a.$$prepared||(a=q(a)),a.cleanupStyles&&(a.from=a.to=null),a.from&&(e.css(a.from),a.from=null);var s,u=new n;return{start:i,end:i}}}]},Wi=e("$compile"),zi=new he;de.$inject=["$provide","$$sanitizeUriProvider"],ve.prototype.isFirstChange=function(){return this.previousValue===zi};var Gi=/^((?:x|data)[\:\-_])/i,Ji=e("$controller"),Ki=/^(\S+)(\s+as\s+([\w$]+))?$/,Qi=function(){this.$get=["$document",function(t){return function(e){return e?!e.nodeType&&e instanceof Vr&&(e=e[0]):e=t[0].body,e.offsetWidth+1}}]},Yi="application/json",Xi={"Content-Type":Yi+";charset=utf-8"},Zi=/^\[|^\{(?!\{)/,to={"[":/]$/,"{":/}$/},eo=/^\)\]\}',?\n/,no=e("$http"),ro=function(t){return function(){throw no("legacy","The method `{0}` on the promise returned from `$http` has been disabled.",t)}},io=zr.$interpolateMinErr=e("$interpolate");io.throwNoconcat=function(t){throw io("noconcat","Error while interpolating: {0}\nStrict Contextual Escaping disallows interpolations that concatenate multiple expressions when a trusted value is required.  See http://docs.angularjs.org/api/ng.$sce",t)},io.interr=function(t,e){return io("interr","Can't interpolate: {0}\n{1}",t,e.toString())};var oo=/^([^\?#]*)(\?([^#]*))?(#(.*))?$/,ao={http:80,https:443,ftp:21},so=e("$location"),uo={$$html5:!1,$$replace:!1,absUrl:Qe("$$absUrl"),url:function(t){if(m(t))return this.$$url;var e=oo.exec(t);return(e[1]||""===t)&&this.path(decodeURIComponent(e[1])),(e[2]||e[1]||""===t)&&this.search(e[3]||""),this.hash(e[5]||""),this},protocol:Qe("$$protocol"),host:Qe("$$host"),port:Qe("$$port"),path:Ye("$$path",function(t){return t=null!==t?t.toString():"","/"==t.charAt(0)?t:"/"+t}),search:function(t,e){switch(arguments.length){case 0:return this.$$search;case 1:if(w(t)||x(t))t=t.toString(),this.$$search=Z(t);else{if(!y(t))throw so("isrcharg","The first argument of the `$location#search()` call must be a string or an object.");t=q(t,{}),r(t,function(e,n){null==e&&delete t[n]}),this.$$search=t}break;default:m(e)||null===e?delete this.$$search[t]:this.$$search[t]=e}return this.$$compose(),this},hash:Ye("$$hash",function(t){return null!==t?t.toString():""}),replace:function(){return this.$$replace=!0,this}};r([Ke,Je,Ge],function(t){t.prototype=Object.create(uo),t.prototype.state=function(e){if(!arguments.length)return this.$$state;if(t!==Ge||!this.$$html5)throw so("nostate","History API state support is available only in HTML5 mode and only in browsers supporting HTML5 History API");return this.$$state=m(e)?null:e,this}});var co=e("$parse"),lo=Function.prototype.call,fo=Function.prototype.apply,po=Function.prototype.bind,ho=vt();r("+ - * / % === !== == != < > <= >= && || ! = |".split(" "),function(t){ho[t]=!0});var vo={n:"\n",f:"\f",r:"\r",t:"	",v:"\x0B","'":"'",'"':'"'},go=function(t){this.options=t};go.prototype={constructor:go,lex:function(t){for(this.text=t,this.index=0,this.tokens=[];this.index<this.text.length;){var e=this.text.charAt(this.index);if('"'===e||"'"===e)this.readString(e);else if(this.isNumber(e)||"."===e&&this.isNumber(this.peek()))this.readNumber();else if(this.isIdentifierStart(this.peekMultichar()))this.readIdent();else if(this.is(e,"(){}[].,;:?"))this.tokens.push({index:this.index,text:e}),this.index++;else if(this.isWhitespace(e))this.index++;else{var n=e+this.peek(),r=n+this.peek(2),i=ho[e],o=ho[n],a=ho[r];if(i||o||a){var s=a?r:o?n:e;this.tokens.push({index:this.index,text:s,operator:!0}),this.index+=s.length}else this.throwError("Unexpected next character ",this.index,this.index+1)}}return this.tokens},is:function(t,e){return-1!==e.indexOf(t)},peek:function(t){var e=t||1;return this.index+e<this.text.length?this.text.charAt(this.index+e):!1},isNumber:function(t){return t>="0"&&"9">=t&&"string"==typeof t},isWhitespace:function(t){return" "===t||"\r"===t||"	"===t||"\n"===t||"\x0B"===t||" "===t},isIdentifierStart:function(t){return this.options.isIdentifierStart?this.options.isIdentifierStart(t,this.codePointAt(t)):this.isValidIdentifierStart(t)},isValidIdentifierStart:function(t){return t>="a"&&"z">=t||t>="A"&&"Z">=t||"_"===t||"$"===t},isIdentifierContinue:function(t){return this.options.isIdentifierContinue?this.options.isIdentifierContinue(t,this.codePointAt(t)):this.isValidIdentifierContinue(t)},isValidIdentifierContinue:function(t,e){return this.isValidIdentifierStart(t,e)||this.isNumber(t)},codePointAt:function(t){return 1===t.length?t.charCodeAt(0):(t.charCodeAt(0)<<10)+t.charCodeAt(1)-56613888},peekMultichar:function(){var t=this.text.charAt(this.index),e=this.peek();if(!e)return t;var n=t.charCodeAt(0),r=e.charCodeAt(0);return n>=55296&&56319>=n&&r>=56320&&57343>=r?t+e:t},isExpOperator:function(t){return"-"===t||"+"===t||this.isNumber(t)},throwError:function(t,e,n){n=n||this.index;var r=$(e)?"s "+e+"-"+this.index+" ["+this.text.substring(e,n)+"]":" "+n;throw co("lexerr","Lexer Error: {0} at column{1} in expression [{2}].",t,r,this.text)},readNumber:function(){for(var t="",e=this.index;this.index<this.text.length;){var n=Rr(this.text.charAt(this.index));if("."==n||this.isNumber(n))t+=n;else{var r=this.peek();if("e"==n&&this.isExpOperator(r))t+=n;else if(this.isExpOperator(n)&&r&&this.isNumber(r)&&"e"==t.charAt(t.length-1))t+=n;else{if(!this.isExpOperator(n)||r&&this.isNumber(r)||"e"!=t.charAt(t.length-1))break;this.throwError("Invalid exponent")}}this.index++}this.tokens.push({index:e,text:t,constant:!0,value:Number(t)})},readIdent:function(){var t=this.index;for(this.index+=this.peekMultichar().length;this.index<this.text.length;){var e=this.peekMultichar();if(!this.isIdentifierContinue(e))break;this.index+=e.length}this.tokens.push({index:t,text:this.text.slice(t,this.index),identifier:!0})},readString:function(t){var e=this.index;this.index++;for(var n="",r=t,i=!1;this.index<this.text.length;){var o=this.text.charAt(this.index);if(r+=o,i){if("u"===o){var a=this.text.substring(this.index+1,this.index+5);a.match(/[\da-f]{4}/i)||this.throwError("Invalid unicode escape [\\u"+a+"]"),this.index+=4,n+=String.fromCharCode(parseInt(a,16))}else{var s=vo[o];n+=s||o}i=!1}else if("\\"===o)i=!0;else{if(o===t)return this.index++,void this.tokens.push({index:e,text:r,constant:!0,value:n});n+=o}this.index++}this.throwError("Unterminated quote",e)}};var mo=function(t,e){this.lexer=t,this.options=e};mo.Program="Program",mo.ExpressionStatement="ExpressionStatement",mo.AssignmentExpression="AssignmentExpression",mo.ConditionalExpression="ConditionalExpression",mo.LogicalExpression="LogicalExpression",mo.BinaryExpression="BinaryExpression",mo.UnaryExpression="UnaryExpression",mo.CallExpression="CallExpression",mo.MemberExpression="MemberExpression",mo.Identifier="Identifier",mo.Literal="Literal",mo.ArrayExpression="ArrayExpression",mo.Property="Property",mo.ObjectExpression="ObjectExpression",mo.ThisExpression="ThisExpression",mo.LocalsExpression="LocalsExpression",mo.NGValueParameter="NGValueParameter",mo.prototype={ast:function(t){this.text=t,this.tokens=this.lexer.lex(t);var e=this.program();return 0!==this.tokens.length&&this.throwError("is an unexpected token",this.tokens[0]),e},program:function(){for(var t=[];;)if(this.tokens.length>0&&!this.peek("}",")",";","]")&&t.push(this.expressionStatement()),!this.expect(";"))return{type:mo.Program,body:t}},expressionStatement:function(){return{type:mo.ExpressionStatement,expression:this.filterChain()}},filterChain:function(){for(var t,e=this.expression();t=this.expect("|");)e=this.filter(e);return e},expression:function(){return this.assignment()},assignment:function(){var t=this.ternary();return this.expect("=")&&(t={type:mo.AssignmentExpression,left:t,right:this.assignment(),operator:"="}),t},ternary:function(){var t,e,n=this.logicalOR();return this.expect("?")&&(t=this.expression(),this.consume(":"))?(e=this.expression(),{type:mo.ConditionalExpression,test:n,alternate:t,consequent:e}):n},logicalOR:function(){for(var t=this.logicalAND();this.expect("||");)t={type:mo.LogicalExpression,operator:"||",left:t,right:this.logicalAND()};return t},logicalAND:function(){for(var t=this.equality();this.expect("&&");)t={type:mo.LogicalExpression,operator:"&&",left:t,right:this.equality()};return t},equality:function(){for(var t,e=this.relational();t=this.expect("==","!=","===","!==");)e={type:mo.BinaryExpression,operator:t.text,left:e,right:this.relational()};return e},relational:function(){for(var t,e=this.additive();t=this.expect("<",">","<=",">=");)e={type:mo.BinaryExpression,operator:t.text,left:e,right:this.additive()};return e},additive:function(){for(var t,e=this.multiplicative();t=this.expect("+","-");)e={type:mo.BinaryExpression,operator:t.text,left:e,right:this.multiplicative()};return e},multiplicative:function(){for(var t,e=this.unary();t=this.expect("*","/","%");)e={type:mo.BinaryExpression,operator:t.text,left:e,right:this.unary()};return e},unary:function(){var t;return(t=this.expect("+","-","!"))?{type:mo.UnaryExpression,operator:t.text,prefix:!0,argument:this.unary()}:this.primary()},primary:function(){var t;this.expect("(")?(t=this.filterChain(),this.consume(")")):this.expect("[")?t=this.arrayDeclaration():this.expect("{")?t=this.object():this.selfReferential.hasOwnProperty(this.peek().text)?t=q(this.selfReferential[this.consume().text]):this.options.literals.hasOwnProperty(this.peek().text)?t={type:mo.Literal,value:this.options.literals[this.consume().text]}:this.peek().identifier?t=this.identifier():this.peek().constant?t=this.constant():this.throwError("not a primary expression",this.peek());for(var e;e=this.expect("(","[",".");)"("===e.text?(t={type:mo.CallExpression,callee:t,arguments:this.parseArguments()},this.consume(")")):"["===e.text?(t={type:mo.MemberExpression,object:t,property:this.expression(),computed:!0},this.consume("]")):"."===e.text?t={type:mo.MemberExpression,object:t,property:this.identifier(),computed:!1}:this.throwError("IMPOSSIBLE");return t},filter:function(t){for(var e=[t],n={type:mo.CallExpression,callee:this.identifier(),arguments:e,filter:!0};this.expect(":");)e.push(this.expression());return n},parseArguments:function(){var t=[];if(")"!==this.peekToken().text)do t.push(this.expression());while(this.expect(","));return t},identifier:function(){var t=this.consume();return t.identifier||this.throwError("is not a valid identifier",t),{type:mo.Identifier,name:t.text}},constant:function(){return{type:mo.Literal,value:this.consume().value}},arrayDeclaration:function(){var t=[];if("]"!==this.peekToken().text)do{if(this.peek("]"))break;t.push(this.expression())}while(this.expect(","));return this.consume("]"),{type:mo.ArrayExpression,elements:t}},object:function(){var t,e=[];if("}"!==this.peekToken().text)do{if(this.peek("}"))break;t={type:mo.Property,kind:"init"},this.peek().constant?(t.key=this.constant(),t.computed=!1,this.consume(":"),t.value=this.expression()):this.peek().identifier?(t.key=this.identifier(),t.computed=!1,this.peek(":")?(this.consume(":"),t.value=this.expression()):t.value=t.key):this.peek("[")?(this.consume("["),t.key=this.expression(),this.consume("]"),t.computed=!0,this.consume(":"),t.value=this.expression()):this.throwError("invalid key",this.peek()),e.push(t)}while(this.expect(","));return this.consume("}"),{type:mo.ObjectExpression,properties:e}},throwError:function(t,e){throw co("syntax","Syntax Error: Token '{0}' {1} at column {2} of the expression [{3}] starting at [{4}].",e.text,t,e.index+1,this.text,this.text.substring(e.index))},consume:function(t){if(0===this.tokens.length)throw co("ueoe","Unexpected end of expression: {0}",this.text);var e=this.expect(t);return e||this.throwError("is unexpected, expecting ["+t+"]",this.peek()),e},peekToken:function(){if(0===this.tokens.length)throw co("ueoe","Unexpected end of expression: {0}",this.text);return this.tokens[0]},peek:function(t,e,n,r){return this.peekAhead(0,t,e,n,r)},peekAhead:function(t,e,n,r,i){if(this.tokens.length>t){var o=this.tokens[t],a=o.text;if(a===e||a===n||a===r||a===i||!e&&!n&&!r&&!i)return o}return!1},expect:function(t,e,n,r){var i=this.peek(t,e,n,r);return i?(this.tokens.shift(),i):!1},selfReferential:{"this":{type:mo.ThisExpression},$locals:{type:mo.LocalsExpression}}},vn.prototype={compile:function(t,e){var n=this,i=this.astBuilder.ast(t);this.state={nextId:0,filters:{},expensiveChecks:e,fn:{vars:[],body:[],own:{}},assign:{vars:[],body:[],own:{}},inputs:[]},cn(i,n.$filter);var o,a="";if(this.stage="assign",o=pn(i)){this.state.computing="assign";var s=this.nextId();this.recurse(o,s),this.return_(s),a="fn.assign="+this.generateFunction("assign","s,v,l")}var u=ln(i.body);n.stage="inputs",r(u,function(t,e){var r="fn"+e;n.state[r]={vars:[],body:[],own:{}},n.state.computing=r;var i=n.nextId();n.recurse(t,i),n.return_(i),n.state.inputs.push(r),t.watchId=e}),this.state.computing="fn",this.stage="main",this.recurse(i);var c='"'+this.USE+" "+this.STRICT+'";\n'+this.filterPrefix()+"var fn="+this.generateFunction("fn","s,l,a,i")+a+this.watchFns()+"return fn;",l=new Function("$filter","ensureSafeMemberName","ensureSafeObject","ensureSafeFunction","getStringValue","ensureSafeAssignContext","ifDefined","plus","text",c)(this.$filter,tn,nn,rn,en,on,an,sn,t);return this.state=this.stage=void 0,l.literal=hn(i),l.constant=dn(i),l},USE:"use",STRICT:"strict",watchFns:function(){var t=[],e=this.state.inputs,n=this;return r(e,function(e){t.push("var "+e+"="+n.generateFunction(e,"s"))}),e.length&&t.push("fn.inputs=["+e.join(",")+"];"),t.join("")},generateFunction:function(t,e){return"function("+e+"){"+this.varsPrefix(t)+this.body(t)+"};"},filterPrefix:function(){var t=[],e=this;return r(this.state.filters,function(n,r){t.push(n+"=$filter("+e.escape(r)+")")}),t.length?"var "+t.join(",")+";":""},varsPrefix:function(t){return this.state[t].vars.length?"var "+this.state[t].vars.join(",")+";":""},body:function(t){return this.state[t].body.join("")},recurse:function(t,e,n,i,o,a){var s,u,c,l,f,p=this;if(i=i||h,!a&&$(t.watchId))return e=e||this.nextId(),void this.if_("i",this.lazyAssign(e,this.computedMember("i",t.watchId)),this.lazyRecurse(t,e,n,i,o,!0));switch(t.type){case mo.Program:r(t.body,function(e,n){p.recurse(e.expression,void 0,void 0,function(t){u=t}),n!==t.body.length-1?p.current().body.push(u,";"):p.return_(u)});break;case mo.Literal:l=this.escape(t.value),this.assign(e,l),i(l);break;case mo.UnaryExpression:this.recurse(t.argument,void 0,void 0,function(t){u=t}),l=t.operator+"("+this.ifDefined(u,0)+")",this.assign(e,l),i(l);break;case mo.BinaryExpression:this.recurse(t.left,void 0,void 0,function(t){s=t}),this.recurse(t.right,void 0,void 0,function(t){u=t}),l="+"===t.operator?this.plus(s,u):"-"===t.operator?this.ifDefined(s,0)+t.operator+this.ifDefined(u,0):"("+s+")"+t.operator+"("+u+")",this.assign(e,l),i(l);break;case mo.LogicalExpression:e=e||this.nextId(),p.recurse(t.left,e),p.if_("&&"===t.operator?e:p.not(e),p.lazyRecurse(t.right,e)),i(e);break;case mo.ConditionalExpression:e=e||this.nextId(),p.recurse(t.test,e),p.if_(e,p.lazyRecurse(t.alternate,e),p.lazyRecurse(t.consequent,e)),i(e);break;case mo.Identifier:e=e||this.nextId(),n&&(n.context="inputs"===p.stage?"s":this.assign(this.nextId(),this.getHasOwnProperty("l",t.name)+"?l:s"),n.computed=!1,n.name=t.name),tn(t.name),p.if_("inputs"===p.stage||p.not(p.getHasOwnProperty("l",t.name)),function(){p.if_("inputs"===p.stage||"s",function(){o&&1!==o&&p.if_(p.not(p.nonComputedMember("s",t.name)),p.lazyAssign(p.nonComputedMember("s",t.name),"{}")),p.assign(e,p.nonComputedMember("s",t.name))})},e&&p.lazyAssign(e,p.nonComputedMember("l",t.name))),(p.state.expensiveChecks||mn(t.name))&&p.addEnsureSafeObject(e),i(e);break;case mo.MemberExpression:s=n&&(n.context=this.nextId())||this.nextId(),e=e||this.nextId(),p.recurse(t.object,s,void 0,function(){p.if_(p.notNull(s),function(){o&&1!==o&&p.addEnsureSafeAssignContext(s),t.computed?(u=p.nextId(),p.recurse(t.property,u),p.getStringValue(u),p.addEnsureSafeMemberName(u),o&&1!==o&&p.if_(p.not(p.computedMember(s,u)),p.lazyAssign(p.computedMember(s,u),"{}")),l=p.ensureSafeObject(p.computedMember(s,u)),p.assign(e,l),n&&(n.computed=!0,n.name=u)):(tn(t.property.name),o&&1!==o&&p.if_(p.not(p.nonComputedMember(s,t.property.name)),p.lazyAssign(p.nonComputedMember(s,t.property.name),"{}")),l=p.nonComputedMember(s,t.property.name),(p.state.expensiveChecks||mn(t.property.name))&&(l=p.ensureSafeObject(l)),p.assign(e,l),n&&(n.computed=!1,n.name=t.property.name))},function(){p.assign(e,"undefined")}),i(e)},!!o);break;case mo.CallExpression:e=e||this.nextId(),t.filter?(u=p.filter(t.callee.name),c=[],r(t.arguments,function(t){var e=p.nextId();p.recurse(t,e),c.push(e)}),l=u+"("+c.join(",")+")",p.assign(e,l),i(e)):(u=p.nextId(),s={},c=[],p.recurse(t.callee,u,s,function(){p.if_(p.notNull(u),function(){p.addEnsureSafeFunction(u),r(t.arguments,function(t){p.recurse(t,p.nextId(),void 0,function(t){c.push(p.ensureSafeObject(t))})}),s.name?(p.state.expensiveChecks||p.addEnsureSafeObject(s.context),l=p.member(s.context,s.name,s.computed)+"("+c.join(",")+")"):l=u+"("+c.join(",")+")",l=p.ensureSafeObject(l),p.assign(e,l)},function(){p.assign(e,"undefined")}),i(e)}));break;case mo.AssignmentExpression:if(u=this.nextId(),s={},!fn(t.left))throw co("lval","Trying to assign a value to a non l-value");this.recurse(t.left,void 0,s,function(){p.if_(p.notNull(s.context),function(){p.recurse(t.right,u),p.addEnsureSafeObject(p.member(s.context,s.name,s.computed)),p.addEnsureSafeAssignContext(s.context),l=p.member(s.context,s.name,s.computed)+t.operator+u,p.assign(e,l),i(e||l)})},1);break;case mo.ArrayExpression:c=[],r(t.elements,function(t){p.recurse(t,p.nextId(),void 0,function(t){c.push(t)})}),l="["+c.join(",")+"]",this.assign(e,l),i(l);break;case mo.ObjectExpression:c=[],f=!1,r(t.properties,function(t){t.computed&&(f=!0)}),f?(e=e||this.nextId(),this.assign(e,"{}"),r(t.properties,function(t){t.computed?(s=p.nextId(),p.recurse(t.key,s)):s=t.key.type===mo.Identifier?t.key.name:""+t.key.value,u=p.nextId(),p.recurse(t.value,u),p.assign(p.member(e,s,t.computed),u)})):(r(t.properties,function(e){p.recurse(e.value,t.constant?void 0:p.nextId(),void 0,function(t){c.push(p.escape(e.key.type===mo.Identifier?e.key.name:""+e.key.value)+":"+t)})}),l="{"+c.join(",")+"}",this.assign(e,l)),i(e||l);break;case mo.ThisExpression:this.assign(e,"s"),i("s");break;case mo.LocalsExpression:this.assign(e,"l"),i("l");break;case mo.NGValueParameter:this.assign(e,"v"),i("v")}},getHasOwnProperty:function(t,e){var n=t+"."+e,r=this.current().own;return r.hasOwnProperty(n)||(r[n]=this.nextId(!1,t+"&&("+this.escape(e)+" in "+t+")")),r[n]},assign:function(t,e){return t?(this.current().body.push(t,"=",e,";"),t):void 0},filter:function(t){return this.state.filters.hasOwnProperty(t)||(this.state.filters[t]=this.nextId(!0)),this.state.filters[t]},ifDefined:function(t,e){return"ifDefined("+t+","+this.escape(e)+")"},plus:function(t,e){return"plus("+t+","+e+")"},return_:function(t){this.current().body.push("return ",t,";")},if_:function(t,e,n){if(t===!0)e();else{var r=this.current().body;r.push("if(",t,"){"),e(),r.push("}"),n&&(r.push("else{"),n(),r.push("}"))}},not:function(t){return"!("+t+")"},notNull:function(t){return t+"!=null"},nonComputedMember:function(t,e){var n=/[$_a-zA-Z][$_a-zA-Z0-9]*/,r=/[^$_a-zA-Z0-9]/g;return n.test(e)?t+"."+e:t+'["'+e.replace(r,this.stringEscapeFn)+'"]'},computedMember:function(t,e){return t+"["+e+"]"},member:function(t,e,n){return n?this.computedMember(t,e):this.nonComputedMember(t,e)},addEnsureSafeObject:function(t){this.current().body.push(this.ensureSafeObject(t),";")},addEnsureSafeMemberName:function(t){this.current().body.push(this.ensureSafeMemberName(t),";")},addEnsureSafeFunction:function(t){this.current().body.push(this.ensureSafeFunction(t),";")},addEnsureSafeAssignContext:function(t){this.current().body.push(this.ensureSafeAssignContext(t),";")},ensureSafeObject:function(t){return"ensureSafeObject("+t+",text)"},ensureSafeMemberName:function(t){return"ensureSafeMemberName("+t+",text)"},ensureSafeFunction:function(t){return"ensureSafeFunction("+t+",text)"},getStringValue:function(t){this.assign(t,"getStringValue("+t+")")},ensureSafeAssignContext:function(t){return"ensureSafeAssignContext("+t+",text)"},lazyRecurse:function(t,e,n,r,i,o){var a=this;return function(){a.recurse(t,e,n,r,i,o)}},lazyAssign:function(t,e){var n=this;return function(){n.assign(t,e)}},stringEscapeRegex:/[^ a-zA-Z0-9]/g,stringEscapeFn:function(t){return"\\u"+("0000"+t.charCodeAt(0).toString(16)).slice(-4)},escape:function(t){if(w(t))return"'"+t.replace(this.stringEscapeRegex,this.stringEscapeFn)+"'";if(x(t))return t.toString();if(t===!0)return"true";if(t===!1)return"false";if(null===t)return"null";if("undefined"==typeof t)return"undefined";throw co("esc","IMPOSSIBLE")},nextId:function(t,e){var n="v"+this.state.nextId++;return t||this.current().vars.push(n+(e?"="+e:"")),n},current:function(){return this.state[this.state.computing]}},gn.prototype={compile:function(t,e){var n=this,i=this.astBuilder.ast(t);this.expression=t,this.expensiveChecks=e,cn(i,n.$filter);var o,a;(o=pn(i))&&(a=this.recurse(o));var s,u=ln(i.body);u&&(s=[],r(u,function(t,e){var r=n.recurse(t);t.input=r,s.push(r),t.watchId=e}));var c=[];r(i.body,function(t){c.push(n.recurse(t.expression))});var l=0===i.body.length?h:1===i.body.length?c[0]:function(t,e){var n;return r(c,function(r){n=r(t,e)}),n};return a&&(l.assign=function(t,e,n){return a(t,n,e)}),s&&(l.inputs=s),l.literal=hn(i),l.constant=dn(i),l},recurse:function(t,e,n){var i,o,a,s=this;if(t.input)return this.inputs(t.input,t.watchId);switch(t.type){case mo.Literal:return this.value(t.value,e);case mo.UnaryExpression:return o=this.recurse(t.argument),this["unary"+t.operator](o,e);case mo.BinaryExpression:return i=this.recurse(t.left),o=this.recurse(t.right),this["binary"+t.operator](i,o,e);case mo.LogicalExpression:return i=this.recurse(t.left),o=this.recurse(t.right),this["binary"+t.operator](i,o,e);case mo.ConditionalExpression:return this["ternary?:"](this.recurse(t.test),this.recurse(t.alternate),this.recurse(t.consequent),e);case mo.Identifier:return tn(t.name,s.expression),s.identifier(t.name,s.expensiveChecks||mn(t.name),e,n,s.expression);case mo.MemberExpression:return i=this.recurse(t.object,!1,!!n),t.computed||(tn(t.property.name,s.expression),o=t.property.name),t.computed&&(o=this.recurse(t.property)),t.computed?this.computedMember(i,o,e,n,s.expression):this.nonComputedMember(i,o,s.expensiveChecks,e,n,s.expression);case mo.CallExpression:return a=[],r(t.arguments,function(t){a.push(s.recurse(t))}),t.filter&&(o=this.$filter(t.callee.name)),t.filter||(o=this.recurse(t.callee,!0)),t.filter?function(t,n,r,i){for(var s=[],u=0;u<a.length;++u)s.push(a[u](t,n,r,i));var c=o.apply(void 0,s,i);return e?{context:void 0,name:void 0,value:c}:c}:function(t,n,r,i){var u,c=o(t,n,r,i);if(null!=c.value){nn(c.context,s.expression),rn(c.value,s.expression);for(var l=[],f=0;f<a.length;++f)l.push(nn(a[f](t,n,r,i),s.expression));u=nn(c.value.apply(c.context,l),s.expression)}return e?{value:u}:u};case mo.AssignmentExpression:return i=this.recurse(t.left,!0,1),o=this.recurse(t.right),function(t,n,r,a){var u=i(t,n,r,a),c=o(t,n,r,a);return nn(u.value,s.expression),on(u.context),u.context[u.name]=c,e?{value:c}:c};case mo.ArrayExpression:return a=[],r(t.elements,function(t){a.push(s.recurse(t))}),function(t,n,r,i){for(var o=[],s=0;s<a.length;++s)o.push(a[s](t,n,r,i));return e?{value:o}:o};case mo.ObjectExpression:return a=[],r(t.properties,function(t){t.computed?a.push({key:s.recurse(t.key),computed:!0,value:s.recurse(t.value)}):a.push({key:t.key.type===mo.Identifier?t.key.name:""+t.key.value,computed:!1,value:s.recurse(t.value)})}),function(t,n,r,i){for(var o={},s=0;s<a.length;++s)a[s].computed?o[a[s].key(t,n,r,i)]=a[s].value(t,n,r,i):o[a[s].key]=a[s].value(t,n,r,i);return e?{value:o}:o};case mo.ThisExpression:return function(t){return e?{value:t}:t};case mo.LocalsExpression:return function(t,n){return e?{value:n}:n};case mo.NGValueParameter:return function(t,n,r){return e?{value:r}:r}}},"unary+":function(t,e){return function(n,r,i,o){var a=t(n,r,i,o);return a=$(a)?+a:0,e?{value:a}:a}},"unary-":function(t,e){return function(n,r,i,o){var a=t(n,r,i,o);return a=$(a)?-a:0,e?{value:a}:a}},"unary!":function(t,e){return function(n,r,i,o){var a=!t(n,r,i,o);return e?{value:a}:a}},"binary+":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a),u=e(r,i,o,a),c=sn(s,u);return n?{value:c}:c}},"binary-":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a),u=e(r,i,o,a),c=($(s)?s:0)-($(u)?u:0);return n?{value:c}:c}},"binary*":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)*e(r,i,o,a);return n?{value:s}:s}},"binary/":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)/e(r,i,o,a);return n?{value:s}:s}},"binary%":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)%e(r,i,o,a);return n?{value:s}:s}},"binary===":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)===e(r,i,o,a);return n?{value:s}:s}},"binary!==":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)!==e(r,i,o,a);return n?{value:s}:s}},"binary==":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)==e(r,i,o,a);return n?{value:s}:s}},"binary!=":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)!=e(r,i,o,a);return n?{value:s}:s}},"binary<":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)<e(r,i,o,a);return n?{value:s}:s}},"binary>":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)>e(r,i,o,a);return n?{value:s}:s}},"binary<=":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)<=e(r,i,o,a);return n?{value:s}:s}},"binary>=":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)>=e(r,i,o,a);return n?{value:s}:s}},"binary&&":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)&&e(r,i,o,a);return n?{value:s}:s}},"binary||":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)||e(r,i,o,a);return n?{value:s}:s}},"ternary?:":function(t,e,n,r){return function(i,o,a,s){var u=t(i,o,a,s)?e(i,o,a,s):n(i,o,a,s);return r?{value:u}:u}},value:function(t,e){return function(){return e?{context:void 0,name:void 0,value:t}:t}},identifier:function(t,e,n,r,i){return function(o,a,s,u){
var c=a&&t in a?a:o;r&&1!==r&&c&&!c[t]&&(c[t]={});var l=c?c[t]:void 0;return e&&nn(l,i),n?{context:c,name:t,value:l}:l}},computedMember:function(t,e,n,r,i){return function(o,a,s,u){var c,l,f=t(o,a,s,u);return null!=f&&(c=e(o,a,s,u),c=en(c),tn(c,i),r&&1!==r&&(on(f),f&&!f[c]&&(f[c]={})),l=f[c],nn(l,i)),n?{context:f,name:c,value:l}:l}},nonComputedMember:function(t,e,n,r,i,o){return function(a,s,u,c){var l=t(a,s,u,c);i&&1!==i&&(on(l),l&&!l[e]&&(l[e]={}));var f=null!=l?l[e]:void 0;return(n||mn(e))&&nn(f,o),r?{context:l,name:e,value:f}:f}},inputs:function(t,e){return function(n,r,i,o){return o?o[e]:t(n,r,i)}}};var $o=function(t,e,n){this.lexer=t,this.$filter=e,this.options=n,this.ast=new mo(t,n),this.astCompiler=n.csp?new gn(this.ast,e):new vn(this.ast,e)};$o.prototype={constructor:$o,parse:function(t){return this.astCompiler.compile(t,this.options.expensiveChecks)}};var yo=Object.prototype.valueOf,bo=e("$sce"),wo={HTML:"html",CSS:"css",URL:"url",RESOURCE_URL:"resourceUrl",JS:"js"},xo=e("$compile"),So=t.document.createElement("a"),Co=In(t.location.href);Vn.$inject=["$document"],qn.$inject=["$provide"];var Eo=22,To=".",ko="0";Bn.$inject=["$locale"],Wn.$inject=["$locale"];var Ao={yyyy:Qn("FullYear",4,0,!1,!0),yy:Qn("FullYear",2,0,!0,!0),y:Qn("FullYear",1,0,!1,!0),MMMM:Yn("Month"),MMM:Yn("Month",!0),MM:Qn("Month",2,1),M:Qn("Month",1,1),LLLL:Yn("Month",!1,!0),dd:Qn("Date",2),d:Qn("Date",1),HH:Qn("Hours",2),H:Qn("Hours",1),hh:Qn("Hours",2,-12),h:Qn("Hours",1,-12),mm:Qn("Minutes",2),m:Qn("Minutes",1),ss:Qn("Seconds",2),s:Qn("Seconds",1),sss:Qn("Milliseconds",3),EEEE:Yn("Day"),EEE:Yn("Day",!0),a:nr,Z:Xn,ww:er(2),w:er(1),G:rr,GG:rr,GGG:rr,GGGG:ir},Oo=/((?:[^yMLdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,jo=/^\-?\d+$/;or.$inject=["$locale"];var No=v(Rr),Ro=v(Dr);ur.$inject=["$parse"];var Do=v({restrict:"E",compile:function(t,e){return e.href||e.xlinkHref?void 0:function(t,e){if("a"===e[0].nodeName.toLowerCase()){var n="[object SVGAnimatedString]"===Ur.call(e.prop("href"))?"xlink:href":"href";e.on("click",function(t){e.attr(n)||t.preventDefault()})}}}}),Io={};r(Ti,function(t,e){function n(t,n,i){t.$watch(i[r],function(t){i.$set(e,!!t)})}if("multiple"!=t){var r=ge("ng-"+e),i=n;"checked"===t&&(i=function(t,e,i){i.ngModel!==i[r]&&n(t,e,i)}),Io[r]=function(){return{restrict:"A",priority:100,link:i}}}}),r(Ai,function(t,e){Io[e]=function(){return{priority:100,link:function(t,n,r){if("ngPattern"===e&&"/"==r.ngPattern.charAt(0)){var i=r.ngPattern.match(Or);if(i)return void r.$set("ngPattern",new RegExp(i[1],i[2]))}t.$watch(r[e],function(t){r.$set(e,t)})}}}}),r(["src","srcset","href"],function(t){var e=ge("ng-"+t);Io[e]=function(){return{priority:99,link:function(n,r,i){var o=t,a=t;"href"===t&&"[object SVGAnimatedString]"===Ur.call(r.prop("href"))&&(a="xlinkHref",i.$attr[a]="xlink:href",o=null),i.$observe(e,function(e){return e?(i.$set(a,e),void(_r&&o&&r.prop(o,i[a]))):void("href"===t&&i.$set(a,null))})}}}});var Po={$addControl:h,$$renameControl:lr,$removeControl:h,$setValidity:h,$setDirty:h,$setPristine:h,$setSubmitted:h},_o="ng-submitted";fr.$inject=["$element","$attrs","$scope","$animate","$interpolate"];var Vo=function(t){return["$timeout","$parse",function(e,n){function r(t){return""===t?n('this[""]').assign:n(t).assign||h}var i={name:"form",restrict:t?"EAC":"E",require:["form","^^?form"],controller:fr,compile:function(n,i){n.addClass(ya).addClass(ma);var o=i.name?"name":t&&i.ngForm?"ngForm":!1;return{pre:function(t,n,i,a){var s=a[0];if(!("action"in i)){var u=function(e){t.$apply(function(){s.$commitViewValue(),s.$setSubmitted()}),e.preventDefault()};hi(n[0],"submit",u),n.on("$destroy",function(){e(function(){di(n[0],"submit",u)},0,!1)})}var l=a[1]||s.$$parentForm;l.$addControl(s);var f=o?r(s.$name):h;o&&(f(t,s),i.$observe(o,function(e){s.$name!==e&&(f(t,void 0),s.$$parentForm.$$renameControl(s,e),(f=r(s.$name))(t,s))})),n.on("$destroy",function(){s.$$parentForm.$removeControl(s),f(t,void 0),c(s,Po)})}}}};return i}]},Mo=Vo(),qo=Vo(!0),Fo=/^\d{4,}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+(?:[+-][0-2]\d:[0-5]\d|Z)$/,Lo=/^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:\/?#]+|\[[a-f\d:]+\])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i,Ho=/^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i,Uo=/^\s*(\-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/,Bo=/^(\d{4,})-(\d{2})-(\d{2})$/,Wo=/^(\d{4,})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,zo=/^(\d{4,})-W(\d\d)$/,Go=/^(\d{4,})-(\d\d)$/,Jo=/^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,Ko="keydown wheel mousedown",Qo=vt();r("date,datetime-local,month,time,week".split(","),function(t){Qo[t]=!0});var Yo={text:hr,date:mr("date",Bo,gr(Bo,["yyyy","MM","dd"]),"yyyy-MM-dd"),"datetime-local":mr("datetimelocal",Wo,gr(Wo,["yyyy","MM","dd","HH","mm","ss","sss"]),"yyyy-MM-ddTHH:mm:ss.sss"),time:mr("time",Jo,gr(Jo,["HH","mm","ss","sss"]),"HH:mm:ss.sss"),week:mr("week",zo,vr,"yyyy-Www"),month:mr("month",Go,gr(Go,["yyyy","MM"]),"yyyy-MM"),number:yr,url:br,email:wr,radio:xr,checkbox:Cr,hidden:h,button:h,submit:h,reset:h,file:h},Xo=["$browser","$sniffer","$filter","$parse",function(t,e,n,r){return{restrict:"E",require:["?ngModel"],link:{pre:function(i,o,a,s){s[0]&&(Yo[Rr(a.type)]||Yo.text)(i,o,a,s[0],e,t,n,r)}}}}],Zo=/^(true|false|\d+)$/,ta=function(){return{restrict:"A",priority:100,compile:function(t,e){return Zo.test(e.ngValue)?function(t,e,n){n.$set("value",t.$eval(n.ngValue))}:function(t,e,n){t.$watch(n.ngValue,function(t){n.$set("value",t)})}}}},ea=["$compile",function(t){return{restrict:"AC",compile:function(e){return t.$$addBindingClass(e),function(e,n,r){t.$$addBindingInfo(n,r.ngBind),n=n[0],e.$watch(r.ngBind,function(t){n.textContent=m(t)?"":t})}}}}],na=["$interpolate","$compile",function(t,e){return{compile:function(n){return e.$$addBindingClass(n),function(n,r,i){var o=t(r.attr(i.$attr.ngBindTemplate));e.$$addBindingInfo(r,o.expressions),r=r[0],i.$observe("ngBindTemplate",function(t){r.textContent=m(t)?"":t})}}}}],ra=["$sce","$parse","$compile",function(t,e,n){return{restrict:"A",compile:function(r,i){var o=e(i.ngBindHtml),a=e(i.ngBindHtml,function(e){return t.valueOf(e)});return n.$$addBindingClass(r),function(e,r,i){n.$$addBindingInfo(r,i.ngBindHtml),e.$watch(a,function(){var n=o(e);r.html(t.getTrustedHtml(n)||"")})}}}}],ia=v({restrict:"A",require:"ngModel",link:function(t,e,n,r){r.$viewChangeListeners.push(function(){t.$eval(n.ngChange)})}}),oa=Er("",!0),aa=Er("Odd",0),sa=Er("Even",1),ua=cr({compile:function(t,e){e.$set("ngCloak",void 0),t.removeClass("ng-cloak")}}),ca=[function(){return{restrict:"A",scope:!0,controller:"@",priority:500}}],la={},fa={blur:!0,focus:!0};r("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "),function(t){var e=ge("ng-"+t);la[e]=["$parse","$rootScope",function(n,r){return{restrict:"A",compile:function(i,o){var a=n(o[e],null,!0);return function(e,n){n.on(t,function(n){var i=function(){a(e,{$event:n})};fa[t]&&r.$$phase?e.$evalAsync(i):e.$apply(i)})}}}}]});var pa=["$animate","$compile",function(t,e){return{multiElement:!0,transclude:"element",priority:600,terminal:!0,restrict:"A",$$tlb:!0,link:function(n,r,i,o,a){var s,u,c;n.$watch(i.ngIf,function(n){n?u||a(function(n,o){u=o,n[n.length++]=e.$$createComment("end ngIf",i.ngIf),s={clone:n},t.enter(n,r.parent(),r)}):(c&&(c.remove(),c=null),u&&(u.$destroy(),u=null),s&&(c=dt(s.clone),t.leave(c).then(function(){c=null}),s=null))})}}}],ha=["$templateRequest","$anchorScroll","$animate",function(t,e,n){return{restrict:"ECA",priority:400,terminal:!0,transclude:"element",controller:zr.noop,compile:function(r,i){var o=i.ngInclude||i.src,a=i.onload||"",s=i.autoscroll;return function(r,i,u,c,l){var f,p,h,d=0,v=function(){p&&(p.remove(),p=null),f&&(f.$destroy(),f=null),h&&(n.leave(h).then(function(){p=null}),p=h,h=null)};r.$watch(o,function(o){var u=function(){!$(s)||s&&!r.$eval(s)||e()},p=++d;o?(t(o,!0).then(function(t){if(!r.$$destroyed&&p===d){var e=r.$new();c.template=t;var s=l(e,function(t){v(),n.enter(t,null,i).then(u)});f=e,h=s,f.$emit("$includeContentLoaded",o),r.$eval(a)}},function(){r.$$destroyed||p===d&&(v(),r.$emit("$includeContentError",o))}),r.$emit("$includeContentRequested",o)):(v(),c.template=null)})}}}}],da=["$compile",function(e){return{restrict:"ECA",priority:-400,require:"ngInclude",link:function(n,r,i,o){return Ur.call(r[0]).match(/SVG/)?(r.empty(),void e(Tt(o.template,t.document).childNodes)(n,function(t){r.append(t)},{futureParentElement:r})):(r.html(o.template),void e(r.contents())(n))}}}],va=cr({priority:450,compile:function(){return{pre:function(t,e,n){t.$eval(n.ngInit)}}}}),ga=function(){return{restrict:"A",priority:100,require:"ngModel",link:function(t,e,n,i){var o=e.attr(n.$attr.ngList)||", ",a="false"!==n.ngTrim,s=a?Qr(o):o,u=function(t){if(!m(t)){var e=[];return t&&r(t.split(s),function(t){t&&e.push(a?Qr(t):t)}),e}};i.$parsers.push(u),i.$formatters.push(function(t){return Jr(t)?t.join(o):void 0}),i.$isEmpty=function(t){return!t||!t.length}}}},ma="ng-valid",$a="ng-invalid",ya="ng-pristine",ba="ng-dirty",wa="ng-untouched",xa="ng-touched",Sa="ng-pending",Ca="ng-empty",Ea="ng-not-empty",Ta=e("ngModel"),ka=["$scope","$exceptionHandler","$attrs","$element","$parse","$animate","$timeout","$rootScope","$q","$interpolate",function(t,e,n,i,o,a,s,u,c,l){this.$viewValue=Number.NaN,this.$modelValue=Number.NaN,this.$$rawModelValue=void 0,this.$validators={},this.$asyncValidators={},this.$parsers=[],this.$formatters=[],this.$viewChangeListeners=[],this.$untouched=!0,this.$touched=!1,this.$pristine=!0,this.$dirty=!1,this.$valid=!0,this.$invalid=!1,this.$error={},this.$$success={},this.$pending=void 0,this.$name=l(n.name||"",!1)(t),this.$$parentForm=Po;var f,p=o(n.ngModel),d=p.assign,v=p,g=d,y=null,b=this;this.$$setOptions=function(t){if(b.$options=t,t&&t.getterSetter){var e=o(n.ngModel+"()"),r=o(n.ngModel+"($$$p)");v=function(t){var n=p(t);return C(n)&&(n=e(t)),n},g=function(t,e){C(p(t))?r(t,{$$$p:e}):d(t,e)}}else if(!p.assign)throw Ta("nonassign","Expression '{0}' is non-assignable. Element: {1}",n.ngModel,Y(i))},this.$render=h,this.$isEmpty=function(t){return m(t)||""===t||null===t||t!==t},this.$$updateEmptyClasses=function(t){b.$isEmpty(t)?(a.removeClass(i,Ea),a.addClass(i,Ca)):(a.removeClass(i,Ca),a.addClass(i,Ea))};var w=0;Tr({ctrl:this,$element:i,set:function(t,e){t[e]=!0},unset:function(t,e){delete t[e]},$animate:a}),this.$setPristine=function(){b.$dirty=!1,b.$pristine=!0,a.removeClass(i,ba),a.addClass(i,ya)},this.$setDirty=function(){b.$dirty=!0,b.$pristine=!1,a.removeClass(i,ya),a.addClass(i,ba),b.$$parentForm.$setDirty()},this.$setUntouched=function(){b.$touched=!1,b.$untouched=!0,a.setClass(i,wa,xa)},this.$setTouched=function(){b.$touched=!0,b.$untouched=!1,a.setClass(i,xa,wa)},this.$rollbackViewValue=function(){s.cancel(y),b.$viewValue=b.$$lastCommittedViewValue,b.$render()},this.$validate=function(){if(!x(b.$modelValue)||!isNaN(b.$modelValue)){var t=b.$$lastCommittedViewValue,e=b.$$rawModelValue,n=b.$valid,r=b.$modelValue,i=b.$options&&b.$options.allowInvalid;b.$$runValidators(e,t,function(t){i||n===t||(b.$modelValue=t?e:void 0,b.$modelValue!==r&&b.$$writeModelToScope())})}},this.$$runValidators=function(t,e,n){function i(){var t=b.$$parserName||"parse";return m(f)?(s(t,null),!0):(f||(r(b.$validators,function(t,e){s(e,null)}),r(b.$asyncValidators,function(t,e){s(e,null)})),s(t,f),f)}function o(){var n=!0;return r(b.$validators,function(r,i){var o=r(t,e);n=n&&o,s(i,o)}),n?!0:(r(b.$asyncValidators,function(t,e){s(e,null)}),!1)}function a(){var n=[],i=!0;r(b.$asyncValidators,function(r,o){var a=r(t,e);if(!R(a))throw Ta("nopromise","Expected asynchronous validator to return a promise but got '{0}' instead.",a);s(o,void 0),n.push(a.then(function(){s(o,!0)},function(){i=!1,s(o,!1)}))}),n.length?c.all(n).then(function(){u(i)},h):u(!0)}function s(t,e){l===w&&b.$setValidity(t,e)}function u(t){l===w&&n(t)}w++;var l=w;return i()&&o()?void a():void u(!1)},this.$commitViewValue=function(){var t=b.$viewValue;s.cancel(y),(b.$$lastCommittedViewValue!==t||""===t&&b.$$hasNativeValidators)&&(b.$$updateEmptyClasses(t),b.$$lastCommittedViewValue=t,b.$pristine&&this.$setDirty(),this.$$parseAndValidate())},this.$$parseAndValidate=function(){function e(){b.$modelValue!==o&&b.$$writeModelToScope()}var n=b.$$lastCommittedViewValue,r=n;if(f=m(r)?void 0:!0)for(var i=0;i<b.$parsers.length;i++)if(r=b.$parsers[i](r),m(r)){f=!1;break}x(b.$modelValue)&&isNaN(b.$modelValue)&&(b.$modelValue=v(t));var o=b.$modelValue,a=b.$options&&b.$options.allowInvalid;b.$$rawModelValue=r,a&&(b.$modelValue=r,e()),b.$$runValidators(r,b.$$lastCommittedViewValue,function(t){a||(b.$modelValue=t?r:void 0,e())})},this.$$writeModelToScope=function(){g(t,b.$modelValue),r(b.$viewChangeListeners,function(t){try{t()}catch(n){e(n)}})},this.$setViewValue=function(t,e){b.$viewValue=t,b.$options&&!b.$options.updateOnDefault||b.$$debounceViewValueCommit(e)},this.$$debounceViewValueCommit=function(e){var n,r=0,i=b.$options;i&&$(i.debounce)&&(n=i.debounce,x(n)?r=n:x(n[e])?r=n[e]:x(n["default"])&&(r=n["default"])),s.cancel(y),r?y=s(function(){b.$commitViewValue()},r):u.$$phase?b.$commitViewValue():t.$apply(function(){b.$commitViewValue()})},t.$watch(function(){var e=v(t);if(e!==b.$modelValue&&(b.$modelValue===b.$modelValue||e===e)){b.$modelValue=b.$$rawModelValue=e,f=void 0;for(var n=b.$formatters,r=n.length,i=e;r--;)i=n[r](i);b.$viewValue!==i&&(b.$$updateEmptyClasses(i),b.$viewValue=b.$$lastCommittedViewValue=i,b.$render(),b.$$runValidators(e,i,h))}return e})}],Aa=["$rootScope",function(t){return{restrict:"A",require:["ngModel","^?form","^?ngModelOptions"],controller:ka,priority:1,compile:function(e){return e.addClass(ya).addClass(wa).addClass(ma),{pre:function(t,e,n,r){var i=r[0],o=r[1]||i.$$parentForm;i.$$setOptions(r[2]&&r[2].$options),o.$addControl(i),n.$observe("name",function(t){i.$name!==t&&i.$$parentForm.$$renameControl(i,t)}),t.$on("$destroy",function(){i.$$parentForm.$removeControl(i)})},post:function(e,n,r,i){var o=i[0];o.$options&&o.$options.updateOn&&n.on(o.$options.updateOn,function(t){o.$$debounceViewValueCommit(t&&t.type)}),n.on("blur",function(){o.$touched||(t.$$phase?e.$evalAsync(o.$setTouched):e.$apply(o.$setTouched))})}}}}}],Oa=/(\s+|^)default(\s+|$)/,ja=function(){return{restrict:"A",controller:["$scope","$attrs",function(t,e){var n=this;this.$options=q(t.$eval(e.ngModelOptions)),$(this.$options.updateOn)?(this.$options.updateOnDefault=!1,this.$options.updateOn=Qr(this.$options.updateOn.replace(Oa,function(){return n.$options.updateOnDefault=!0," "}))):this.$options.updateOnDefault=!0}]}},Na=cr({terminal:!0,priority:1e3}),Ra=e("ngOptions"),Da=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,Ia=["$compile","$document","$parse",function(e,i,o){function a(t,e,r){function i(t,e,n,r,i){this.selectValue=t,this.viewValue=e,this.label=n,this.group=r,this.disabled=i}function a(t){var e;if(!c&&n(t))e=t;else{e=[];for(var r in t)t.hasOwnProperty(r)&&"$"!==r.charAt(0)&&e.push(r)}return e}var s=t.match(Da);if(!s)throw Ra("iexp","Expected expression in form of '_select_ (as _label_)? for (_key_,)?_value_ in _collection_' but got '{0}'. Element: {1}",t,Y(e));var u=s[5]||s[7],c=s[6],l=/ as /.test(s[0])&&s[1],f=s[9],p=o(s[2]?s[1]:u),h=l&&o(l),d=h||p,v=f&&o(f),g=f?function(t,e){return v(r,e)}:function(t){return Yt(t)},m=function(t,e){return g(t,S(t,e))},$=o(s[2]||s[1]),y=o(s[3]||""),b=o(s[4]||""),w=o(s[8]),x={},S=c?function(t,e){return x[c]=e,x[u]=t,x}:function(t){return x[u]=t,x};return{trackBy:f,getTrackByValue:m,getWatchables:o(w,function(t){var e=[];t=t||[];for(var n=a(t),i=n.length,o=0;i>o;o++){var u=t===n?o:n[o],c=t[u],l=S(c,u),f=g(c,l);if(e.push(f),s[2]||s[1]){var p=$(r,l);e.push(p)}if(s[4]){var h=b(r,l);e.push(h)}}return e}),getOptions:function(){for(var t=[],e={},n=w(r)||[],o=a(n),s=o.length,u=0;s>u;u++){var c=n===o?u:o[u],l=n[c],p=S(l,c),h=d(r,p),v=g(h,p),x=$(r,p),C=y(r,p),E=b(r,p),T=new i(v,h,x,C,E);t.push(T),e[v]=T}return{items:t,selectValueMap:e,getOptionFromViewValue:function(t){return e[m(t)]},getViewValueFromOption:function(t){return f?zr.copy(t.viewValue):t.viewValue}}}}}function s(t,n,o,s){function l(t,e){var n=u.cloneNode(!1);e.appendChild(n),f(t,n)}function f(t,e){t.element=e,e.disabled=t.disabled,t.label!==e.label&&(e.label=t.label,e.textContent=t.label),t.value!==e.value&&(e.value=t.selectValue)}function p(){var t=S&&d.readValue();if(S)for(var e=S.items.length-1;e>=0;e--){var r=S.items[e];Ut(r.group?r.element.parentNode:r.element)}S=C.getOptions();var i={};if(w&&n.prepend(h),S.items.forEach(function(t){var e;$(t.group)?(e=i[t.group],e||(e=c.cloneNode(!1),E.appendChild(e),e.label=t.group,i[t.group]=e),l(t,e)):l(t,E)}),n[0].appendChild(E),v.$render(),!v.$isEmpty(t)){var o=d.readValue(),a=C.trackBy||g;(a?L(t,o):t===o)||(v.$setViewValue(o),v.$render())}}for(var h,d=s[0],v=s[1],g=o.multiple,m=0,y=n.children(),b=y.length;b>m;m++)if(""===y[m].value){h=y.eq(m);break}var w=!!h,x=Vr(u.cloneNode(!1));x.val("?");var S,C=a(o.ngOptions,n,t),E=i[0].createDocumentFragment(),T=function(){w||n.prepend(h),n.val(""),h.prop("selected",!0),h.attr("selected",!0)},k=function(){w||h.remove()},A=function(){n.prepend(x),n.val("?"),x.prop("selected",!0),x.attr("selected",!0)},O=function(){x.remove()};g?(v.$isEmpty=function(t){return!t||0===t.length},d.writeValue=function(t){S.items.forEach(function(t){t.element.selected=!1}),t&&t.forEach(function(t){var e=S.getOptionFromViewValue(t);e&&(e.element.selected=!0)})},d.readValue=function(){var t=n.val()||[],e=[];return r(t,function(t){var n=S.selectValueMap[t];n&&!n.disabled&&e.push(S.getViewValueFromOption(n))}),e},C.trackBy&&t.$watchCollection(function(){return Jr(v.$viewValue)?v.$viewValue.map(function(t){return C.getTrackByValue(t)}):void 0},function(){v.$render()})):(d.writeValue=function(t){var e=S.getOptionFromViewValue(t);e?(n[0].value!==e.selectValue&&(O(),k(),n[0].value=e.selectValue,e.element.selected=!0),e.element.setAttribute("selected","selected")):null===t||w?(O(),T()):(k(),A())},d.readValue=function(){var t=S.selectValueMap[n.val()];return t&&!t.disabled?(k(),O(),S.getViewValueFromOption(t)):null},C.trackBy&&t.$watch(function(){return C.getTrackByValue(v.$viewValue)},function(){v.$render()})),w?(h.remove(),e(h)(t),h.removeClass("ng-scope")):h=Vr(u.cloneNode(!1)),n.empty(),p(),t.$watchCollection(C.getWatchables,p)}var u=t.document.createElement("option"),c=t.document.createElement("optgroup");return{restrict:"A",terminal:!0,require:["select","ngModel"],link:{pre:function(t,e,n,r){r[0].registerOption=h},post:s}}}],Pa=["$locale","$interpolate","$log",function(t,e,n){var i=/{}/g,o=/^when(Minus)?(.+)$/;return{link:function(a,s,u){function c(t){s.text(t||"")}var l,f=u.count,p=u.$attr.when&&s.attr(u.$attr.when),d=u.offset||0,v=a.$eval(p)||{},g={},$=e.startSymbol(),y=e.endSymbol(),b=$+f+"-"+d+y,w=zr.noop;r(u,function(t,e){var n=o.exec(e);if(n){var r=(n[1]?"-":"")+Rr(n[2]);v[r]=s.attr(u.$attr[e])}}),r(v,function(t,n){g[n]=e(t.replace(i,b))}),a.$watch(f,function(e){var r=parseFloat(e),i=isNaN(r);if(i||r in v||(r=t.pluralCat(r-d)),r!==l&&!(i&&x(l)&&isNaN(l))){w();var o=g[r];m(o)?(null!=e&&n.debug("ngPluralize: no rule defined for '"+r+"' in "+p),w=h,c()):w=a.$watch(o,c),l=r}})}}}],_a=["$parse","$animate","$compile",function(t,i,o){var a="$$NG_REMOVED",s=e("ngRepeat"),u=function(t,e,n,r,i,o,a){t[n]=r,i&&(t[i]=o),t.$index=e,t.$first=0===e,t.$last=e===a-1,t.$middle=!(t.$first||t.$last),t.$odd=!(t.$even=0===(1&e))},c=function(t){return t.clone[0]},l=function(t){return t.clone[t.clone.length-1]};return{restrict:"A",multiElement:!0,transclude:"element",priority:1e3,terminal:!0,$$tlb:!0,compile:function(e,f){var p=f.ngRepeat,h=o.$$createComment("end ngRepeat",p),d=p.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);if(!d)throw s("iexp","Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",p);var v=d[1],g=d[2],m=d[3],$=d[4];if(d=v.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/),!d)throw s("iidexp","'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",v);var y=d[3]||d[1],b=d[2];if(m&&(!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(m)||/^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(m)))throw s("badident","alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.",m);var w,x,S,C,E={$id:Yt};return $?w=t($):(S=function(t,e){return Yt(e)},C=function(t){return t}),function(t,e,o,f,d){w&&(x=function(e,n,r){return b&&(E[b]=e),E[y]=n,E.$index=r,w(t,E)});var v=vt();t.$watchCollection(g,function(o){var f,g,$,w,E,T,k,A,O,j,N,R,D=e[0],I=vt();if(m&&(t[m]=o),n(o))O=o,A=x||S;else{A=x||C,O=[];for(var P in o)Nr.call(o,P)&&"$"!==P.charAt(0)&&O.push(P)}for(w=O.length,N=new Array(w),f=0;w>f;f++)if(E=o===O?f:O[f],T=o[E],k=A(E,T,f),v[k])j=v[k],delete v[k],I[k]=j,N[f]=j;else{if(I[k])throw r(N,function(t){t&&t.scope&&(v[t.id]=t)}),s("dupes","Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}",p,k,T);N[f]={id:k,scope:void 0,clone:void 0},I[k]=!0}for(var _ in v){if(j=v[_],R=dt(j.clone),i.leave(R),R[0].parentNode)for(f=0,g=R.length;g>f;f++)R[f][a]=!0;j.scope.$destroy()}for(f=0;w>f;f++)if(E=o===O?f:O[f],T=o[E],j=N[f],j.scope){$=D;do $=$.nextSibling;while($&&$[a]);c(j)!=$&&i.move(dt(j.clone),null,D),D=l(j),u(j.scope,f,y,T,b,E,w)}else d(function(t,e){j.scope=e;var n=h.cloneNode(!1);t[t.length++]=n,i.enter(t,null,D),D=n,j.clone=t,I[j.id]=j,u(j.scope,f,y,T,b,E,w)});v=I})}}}}],Va="ng-hide",Ma="ng-hide-animate",qa=["$animate",function(t){return{restrict:"A",multiElement:!0,link:function(e,n,r){e.$watch(r.ngShow,function(e){t[e?"removeClass":"addClass"](n,Va,{tempClasses:Ma})})}}}],Fa=["$animate",function(t){return{restrict:"A",multiElement:!0,link:function(e,n,r){e.$watch(r.ngHide,function(e){t[e?"addClass":"removeClass"](n,Va,{tempClasses:Ma})})}}}],La=cr(function(t,e,n){t.$watch(n.ngStyle,function(t,n){n&&t!==n&&r(n,function(t,n){e.css(n,"")}),t&&e.css(t)},!0)}),Ha=["$animate","$compile",function(t,e){return{require:"ngSwitch",controller:["$scope",function(){this.cases={}}],link:function(n,i,o,a){var s=o.ngSwitch||o.on,u=[],c=[],l=[],f=[],p=function(t,e){return function(){t.splice(e,1)}};n.$watch(s,function(n){var i,o;for(i=0,o=l.length;o>i;++i)t.cancel(l[i]);for(l.length=0,i=0,o=f.length;o>i;++i){var s=dt(c[i].clone);f[i].$destroy();var h=l[i]=t.leave(s);h.then(p(l,i))}c.length=0,f.length=0,(u=a.cases["!"+n]||a.cases["?"])&&r(u,function(n){n.transclude(function(r,i){f.push(i);var o=n.element;r[r.length++]=e.$$createComment("end ngSwitchWhen");var a={clone:r};c.push(a),t.enter(r,o.parent(),o)})})})}}}],Ua=cr({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(t,e,n,r,i){r.cases["!"+n.ngSwitchWhen]=r.cases["!"+n.ngSwitchWhen]||[],r.cases["!"+n.ngSwitchWhen].push({transclude:i,element:e})}}),Ba=cr({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(t,e,n,r,i){r.cases["?"]=r.cases["?"]||[],r.cases["?"].push({transclude:i,element:e})}}),Wa=e("ngTransclude"),za=cr({restrict:"EAC",link:function(t,e,n,r,i){function o(t){t.length&&(e.empty(),e.append(t))}if(n.ngTransclude===n.$attr.ngTransclude&&(n.ngTransclude=""),!i)throw Wa("orphan","Illegal use of ngTransclude directive in the template! No parent directive that requires a transclusion found. Element: {0}",Y(e));var a=n.ngTransclude||n.ngTranscludeSlot;i(o,null,a)}}),Ga=["$templateCache",function(t){return{restrict:"E",terminal:!0,compile:function(e,n){if("text/ng-template"==n.type){var r=n.id,i=e[0].text;t.put(r,i)}}}}],Ja={$setViewValue:h,$render:h},Ka=["$element","$scope",function(e,n){var r=this,i=new Xt;r.ngModelCtrl=Ja,r.unknownOption=Vr(t.document.createElement("option")),r.renderUnknownOption=function(t){var n="? "+Yt(t)+" ?";r.unknownOption.val(n),e.prepend(r.unknownOption),e.val(n)},n.$on("$destroy",function(){r.renderUnknownOption=h}),r.removeUnknownOption=function(){r.unknownOption.parent()&&r.unknownOption.remove()},r.readValue=function(){return r.removeUnknownOption(),e.val()},r.writeValue=function(t){r.hasOption(t)?(r.removeUnknownOption(),e.val(t),""===t&&r.emptyOption.prop("selected",!0)):null==t&&r.emptyOption?(r.removeUnknownOption(),e.val("")):r.renderUnknownOption(t)},r.addOption=function(t,e){if(e[0].nodeType!==si){pt(t,'"option value"'),""===t&&(r.emptyOption=e);var n=i.get(t)||0;i.put(t,n+1),r.ngModelCtrl.$render(),Ar(e)}},r.removeOption=function(t){var e=i.get(t);e&&(1===e?(i.remove(t),""===t&&(r.emptyOption=void 0)):i.put(t,e-1))},r.hasOption=function(t){return!!i.get(t)},r.registerOption=function(t,e,n,i,o){if(i){var a;n.$observe("value",function(t){$(a)&&r.removeOption(a),a=t,r.addOption(t,e)})}else o?t.$watch(o,function(t,i){n.$set("value",t),i!==t&&r.removeOption(i),r.addOption(t,e)}):r.addOption(n.value,e);e.on("$destroy",function(){r.removeOption(n.value),r.ngModelCtrl.$render()})}}],Qa=function(){function t(t,e,n,i){var o=i[1];if(o){var a=i[0];if(a.ngModelCtrl=o,e.on("change",function(){t.$apply(function(){o.$setViewValue(a.readValue())})}),n.multiple){a.readValue=function(){var t=[];return r(e.find("option"),function(e){e.selected&&t.push(e.value)}),t},a.writeValue=function(t){var n=new Xt(t);r(e.find("option"),function(t){t.selected=$(n.get(t.value))})};var s,u=NaN;t.$watch(function(){u!==o.$viewValue||L(s,o.$viewValue)||(s=F(o.$viewValue),o.$render()),u=o.$viewValue}),o.$isEmpty=function(t){return!t||0===t.length}}}}function e(t,e,n,r){var i=r[1];if(i){var o=r[0];i.$render=function(){o.writeValue(i.$viewValue)}}}return{restrict:"E",require:["select","?ngModel"],controller:Ka,priority:1,link:{pre:t,post:e}}},Ya=["$interpolate",function(t){return{restrict:"E",priority:100,compile:function(e,n){if($(n.value))var r=t(n.value,!0);else{var i=t(e.text(),!0);i||n.$set("value",e.text())}return function(t,e,n){var o="$selectController",a=e.parent(),s=a.data(o)||a.parent().data(o);s&&s.registerOption(t,e,n,r,i)}}}}],Xa=v({restrict:"E",terminal:!1}),Za=function(){return{restrict:"A",require:"?ngModel",link:function(t,e,n,r){r&&(n.required=!0,r.$validators.required=function(t,e){return!n.required||!r.$isEmpty(e)},n.$observe("required",function(){r.$validate()}))}}},ts=function(){return{restrict:"A",require:"?ngModel",link:function(t,n,r,i){if(i){var o,a=r.ngPattern||r.pattern;r.$observe("pattern",function(t){if(w(t)&&t.length>0&&(t=new RegExp("^"+t+"$")),t&&!t.test)throw e("ngPattern")("noregexp","Expected {0} to be a RegExp but was {1}. Element: {2}",a,t,Y(n));o=t||void 0,i.$validate()}),i.$validators.pattern=function(t,e){return i.$isEmpty(e)||m(o)||o.test(e)}}}}},es=function(){return{restrict:"A",require:"?ngModel",link:function(t,e,n,r){if(r){var i=-1;n.$observe("maxlength",function(t){var e=f(t);i=isNaN(e)?-1:e,r.$validate()}),r.$validators.maxlength=function(t,e){return 0>i||r.$isEmpty(e)||e.length<=i}}}}},ns=function(){return{restrict:"A",require:"?ngModel",link:function(t,e,n,r){if(r){var i=0;n.$observe("minlength",function(t){i=f(t)||0,r.$validate()}),r.$validators.minlength=function(t,e){return r.$isEmpty(e)||e.length>=i}}}}};return t.angular.bootstrap?void(t.console&&console.log("WARNING: Tried to load angular more than once.")):(ct(),yt(zr),zr.module("ngLocale",[],["$provide",function(t){function e(t){t+="";var e=t.indexOf(".");return-1==e?0:t.length-e-1}function n(t,n){var r=n;void 0===r&&(r=Math.min(e(t),3));var i=Math.pow(10,r),o=(t*i|0)%i;return{v:r,f:o}}var r={ZERO:"zero",ONE:"one",TWO:"two",FEW:"few",MANY:"many",OTHER:"other"};t.value("$locale",{DATETIME_FORMATS:{AMPMS:["AM","PM"],DAY:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],ERANAMES:["Before Christ","Anno Domini"],ERAS:["BC","AD"],FIRSTDAYOFWEEK:6,MONTH:["January","February","March","April","May","June","July","August","September","October","November","December"],SHORTDAY:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],SHORTMONTH:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],STANDALONEMONTH:["January","February","March","April","May","June","July","August","September","October","November","December"],WEEKENDRANGE:[5,6],fullDate:"EEEE, MMMM d, y",longDate:"MMMM d, y",medium:"MMM d, y h:mm:ss a",mediumDate:"MMM d, y",mediumTime:"h:mm:ss a","short":"M/d/yy h:mm a",shortDate:"M/d/yy",shortTime:"h:mm a"},NUMBER_FORMATS:{CURRENCY_SYM:"$",DECIMAL_SEP:".",GROUP_SEP:",",PATTERNS:[{gSize:3,lgSize:3,maxFrac:3,minFrac:0,minInt:1,negPre:"-",negSuf:"",posPre:"",posSuf:""},{gSize:3,lgSize:3,maxFrac:2,minFrac:2,minInt:1,negPre:"-¤",negSuf:"",posPre:"¤",posSuf:""}]},id:"en-us",localeID:"en_US",pluralCat:function(t,e){var i=0|t,o=n(t,e);return 1==i&&0==o.v?r.ONE:r.OTHER}})}]),void Vr(t.document).ready(function(){it(t.document,ot)}))}(window),!window.angular.$$csp().noInlineStyle&&window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>'),function(t,e){"use strict";function n(t,n,r){function i(t,r,i){var a,s;i=i||{},s=i.expires,a=e.isDefined(i.path)?i.path:o,e.isUndefined(r)&&(s="Thu, 01 Jan 1970 00:00:00 GMT",r=""),e.isString(s)&&(s=new Date(s));var u=encodeURIComponent(t)+"="+encodeURIComponent(r);u+=a?";path="+a:"",u+=i.domain?";domain="+i.domain:"",u+=s?";expires="+s.toUTCString():"",u+=i.secure?";secure":"";var c=u.length+1;return c>4096&&n.warn("Cookie '"+t+"' possibly not set or overflowed because it was too large ("+c+" > 4096 bytes)!"),u}var o=r.baseHref(),a=t[0];return function(t,e,n){a.cookie=i(t,e,n)}}e.module("ngCookies",["ng"]).provider("$cookies",[function(){function t(t){return t?e.extend({},n,t):n}var n=this.defaults={};this.$get=["$$cookieReader","$$cookieWriter",function(n,r){return{get:function(t){return n()[t]},getObject:function(t){var n=this.get(t);return n?e.fromJson(n):n},getAll:function(){return n()},put:function(e,n,i){r(e,n,t(i))},putObject:function(t,n,r){this.put(t,e.toJson(n),r)},remove:function(e,n){r(e,void 0,t(n))}}}]}]),e.module("ngCookies").factory("$cookieStore",["$cookies",function(t){return{get:function(e){return t.getObject(e)},put:function(e,n){t.putObject(e,n)},remove:function(e){t.remove(e)}}}]),n.$inject=["$document","$log","$browser"],e.module("ngCookies").provider("$$cookieWriter",function(){this.$get=n})}(window,window.angular),function(t,e){"function"==typeof define&&define.amd?define([],function(){return e()}):"object"==typeof exports?module.exports=e():e()}(this,function(){function t(t,e){"use strict";return function(n){if(!(n&&(angular.isArray(n.files)||angular.isString(n.prefix)&&angular.isString(n.suffix))))throw new Error("Couldn't load static files, no files and prefix or suffix specified!");n.files||(n.files=[{prefix:n.prefix,suffix:n.suffix}]);for(var r=function(r){if(!r||!angular.isString(r.prefix)||!angular.isString(r.suffix))throw new Error("Couldn't load static file, no prefix or suffix specified!");return e(angular.extend({url:[r.prefix,n.key,r.suffix].join(""),method:"GET",params:""},n.$http)).then(function(t){return t.data},function(){return t.reject(n.key)})},i=[],o=n.files.length,a=0;o>a;a++)i.push(r({prefix:n.files[a].prefix,key:n.key,suffix:n.files[a].suffix}));return t.all(i).then(function(t){for(var e=t.length,n={},r=0;e>r;r++)for(var i in t[r])n[i]=t[r][i];return n})}}return t.$inject=["$q","$http"],angular.module("pascalprecht.translate").factory("$translateStaticFilesLoader",t),t.displayName="$translateStaticFilesLoader",
"pascalprecht.translate"}),function(t,e){"function"==typeof define&&define.amd?define([],function(){return e()}):"object"==typeof exports?module.exports=e():e()}(this,function(){function t(t){"use strict";var e={get:function(e){return t.get(e)},set:function(e,n){t.put(e,n)},put:function(e,n){t.put(e,n)}};return e}return t.$inject=["$cookieStore"],angular.module("pascalprecht.translate").factory("$translateCookieStorage",t),t.displayName="$translateCookieStorage","pascalprecht.translate"}),function(t,e){"function"==typeof define&&define.amd?define([],function(){return e()}):"object"==typeof exports?module.exports=e():e()}(this,function(){function t(t,e){"use strict";var n=function(){var e;return{get:function(n){return e||(e=t.localStorage.getItem(n)),e},set:function(n,r){e=r,t.localStorage.setItem(n,r)},put:function(n,r){e=r,t.localStorage.setItem(n,r)}}}(),r="localStorage"in t;if(r){var i="pascalprecht.translate.storageTest";try{null!==t.localStorage?(t.localStorage.setItem(i,"foo"),t.localStorage.removeItem(i),r=!0):r=!1}catch(o){r=!1}}var a=r?n:e;return a}return t.$inject=["$window","$translateCookieStorage"],angular.module("pascalprecht.translate").factory("$translateLocalStorage",t),t.displayName="$translateLocalStorageFactory","pascalprecht.translate"}),function(t,e){"function"==typeof define&&define.amd?define([],function(){return e()}):"object"==typeof exports?module.exports=e():e()}(this,function(){function t(t){"use strict";var e=t.storageKey(),n=t.storage(),r=function(){var r=t.preferredLanguage();angular.isString(r)?t.use(r):n.put(e,t.use())};r.displayName="fallbackFromIncorrectStorageValue",n?n.get(e)?t.use(n.get(e))["catch"](r):r():angular.isString(t.preferredLanguage())&&t.use(t.preferredLanguage())}function e(){"use strict";var t,e,n=null,r=!1,i=!1;e={sanitize:function(t,e){return"text"===e&&(t=a(t)),t},escape:function(t,e){return"text"===e&&(t=o(t)),t},sanitizeParameters:function(t,e){return"params"===e&&(t=s(t,a)),t},escapeParameters:function(t,e){return"params"===e&&(t=s(t,o)),t}},e.escaped=e.escapeParameters,this.addStrategy=function(t,n){return e[t]=n,this},this.removeStrategy=function(t){return delete e[t],this},this.useStrategy=function(t){return r=!0,n=t,this},this.$get=["$injector","$log",function(o,a){var s={},u=function(t,n,r){return angular.forEach(r,function(r){if(angular.isFunction(r))t=r(t,n);else if(angular.isFunction(e[r]))t=e[r](t,n);else{if(!angular.isString(e[r]))throw new Error("pascalprecht.translate.$translateSanitization: Unknown sanitization strategy: '"+r+"'");if(!s[e[r]])try{s[e[r]]=o.get(e[r])}catch(i){throw s[e[r]]=function(){},new Error("pascalprecht.translate.$translateSanitization: Unknown sanitization strategy: '"+r+"'")}t=s[e[r]](t,n)}}),t},c=function(){r||i||(a.warn("pascalprecht.translate.$translateSanitization: No sanitization strategy has been configured. This can have serious security implications. See http://angular-translate.github.io/docs/#/guide/19_security for details."),i=!0)};return o.has("$sanitize")&&(t=o.get("$sanitize")),{useStrategy:function(t){return function(e){t.useStrategy(e)}}(this),sanitize:function(t,e,r){if(n||c(),arguments.length<3&&(r=n),!r)return t;var i=angular.isArray(r)?r:[r];return u(t,e,i)}}}];var o=function(t){var e=angular.element("<div></div>");return e.text(t),e.html()},a=function(e){if(!t)throw new Error("pascalprecht.translate.$translateSanitization: Error cannot find $sanitize service. Either include the ngSanitize module (https://docs.angularjs.org/api/ngSanitize) or use a sanitization strategy which does not depend on $sanitize, such as 'escape'.");return t(e)},s=function(t,e,n){if(angular.isObject(t)){var r=angular.isArray(t)?[]:{};if(n){if(n.indexOf(t)>-1)throw new Error("pascalprecht.translate.$translateSanitization: Error cannot interpolate parameter due recursive object")}else n=[];return n.push(t),angular.forEach(t,function(t,i){r[i]=s(t,e,n)}),n.splice(-1,1),r}return angular.isNumber(t)?t:e(t)}}function n(t,e,n,r){"use strict";var i,o,a,s,u,c,l,f,p,h,d,v,g,m,$,y,b={},w=[],x=t,S=[],C="translate-cloak",E=!1,T=!1,k=".",A=!1,O=0,j=!0,N="default",R={"default":function(t){return(t||"").split("-").join("_")},java:function(t){var e=(t||"").split("-").join("_"),n=e.split("_");return n.length>1?n[0].toLowerCase()+"_"+n[1].toUpperCase():e},bcp47:function(t){var e=(t||"").split("_").join("-"),n=e.split("-");return n.length>1?n[0].toLowerCase()+"-"+n[1].toUpperCase():e},"iso639-1":function(t){var e=(t||"").split("_").join("-"),n=e.split("-");return n[0].toLowerCase()}},D="2.11.0",I=function(){if(angular.isFunction(r.getLocale))return r.getLocale();var t,n,i=e.$get().navigator,o=["language","browserLanguage","systemLanguage","userLanguage"];if(angular.isArray(i.languages))for(t=0;t<i.languages.length;t++)if(n=i.languages[t],n&&n.length)return n;for(t=0;t<o.length;t++)if(n=i[o[t]],n&&n.length)return n;return null};I.displayName="angular-translate/service: getFirstBrowserLanguage";var P=function(){var t=I()||"";return R[N]&&(t=R[N](t)),t};P.displayName="angular-translate/service: getLocale";var _=function(t,e){for(var n=0,r=t.length;r>n;n++)if(t[n]===e)return n;return-1},V=function(){return this.toString().replace(/^\s+|\s+$/g,"")},M=function(t){if(t){for(var e=[],n=angular.lowercase(t),r=0,i=w.length;i>r;r++)e.push(angular.lowercase(w[r]));if(_(e,n)>-1)return t;if(o){var a;for(var s in o)if(o.hasOwnProperty(s)){var u=!1,c=Object.prototype.hasOwnProperty.call(o,s)&&angular.lowercase(s)===angular.lowercase(t);if("*"===s.slice(-1)&&(u=s.slice(0,-1)===t.slice(0,s.length-1)),(c||u)&&(a=o[s],_(e,angular.lowercase(a))>-1))return a}}var l=t.split("_");return l.length>1&&_(e,angular.lowercase(l[0]))>-1?l[0]:void 0}},q=function(t,e){if(!t&&!e)return b;if(t&&!e){if(angular.isString(t))return b[t]}else angular.isObject(b[t])||(b[t]={}),angular.extend(b[t],F(e));return this};this.translations=q,this.cloakClassName=function(t){return t?(C=t,this):C},this.nestedObjectDelimeter=function(t){return t?(k=t,this):k};var F=function(t,e,n,r){var i,o,a,s;e||(e=[]),n||(n={});for(i in t)Object.prototype.hasOwnProperty.call(t,i)&&(s=t[i],angular.isObject(s)?F(s,e.concat(i),n,i):(o=e.length?""+e.join(k)+k+i:i,e.length&&i===r&&(a=""+e.join(k),n[a]="@:"+o),n[o]=s));return n};F.displayName="flatObject",this.addInterpolation=function(t){return S.push(t),this},this.useMessageFormatInterpolation=function(){return this.useInterpolation("$translateMessageFormatInterpolation")},this.useInterpolation=function(t){return h=t,this},this.useSanitizeValueStrategy=function(t){return n.useStrategy(t),this},this.preferredLanguage=function(t){return t?(L(t),this):i};var L=function(t){return t&&(i=t),i};this.translationNotFoundIndicator=function(t){return this.translationNotFoundIndicatorLeft(t),this.translationNotFoundIndicatorRight(t),this},this.translationNotFoundIndicatorLeft=function(t){return t?(g=t,this):g},this.translationNotFoundIndicatorRight=function(t){return t?(m=t,this):m},this.fallbackLanguage=function(t){return H(t),this};var H=function(t){return t?(angular.isString(t)?(s=!0,a=[t]):angular.isArray(t)&&(s=!1,a=t),angular.isString(i)&&_(a,i)<0&&a.push(i),this):s?a[0]:a};this.use=function(t){if(t){if(!b[t]&&!d)throw new Error("$translateProvider couldn't find translationTable for langKey: '"+t+"'");return u=t,this}return u},this.resolveClientLocale=function(){return P()};var U=function(t){return t?(x=t,this):f?f+x:x};this.storageKey=U,this.useUrlLoader=function(t,e){return this.useLoader("$translateUrlLoader",angular.extend({url:t},e))},this.useStaticFilesLoader=function(t){return this.useLoader("$translateStaticFilesLoader",t)},this.useLoader=function(t,e){return d=t,v=e||{},this},this.useLocalStorage=function(){return this.useStorage("$translateLocalStorage")},this.useCookieStorage=function(){return this.useStorage("$translateCookieStorage")},this.useStorage=function(t){return l=t,this},this.storagePrefix=function(t){return t?(f=t,this):t},this.useMissingTranslationHandlerLog=function(){return this.useMissingTranslationHandler("$translateMissingTranslationHandlerLog")},this.useMissingTranslationHandler=function(t){return p=t,this},this.usePostCompiling=function(t){return E=!!t,this},this.forceAsyncReload=function(t){return T=!!t,this},this.uniformLanguageTag=function(t){return t?angular.isString(t)&&(t={standard:t}):t={},N=t.standard,this},this.determinePreferredLanguage=function(t){var e=t&&angular.isFunction(t)?t():P();return i=w.length?M(e)||e:e,this},this.registerAvailableLanguageKeys=function(t,e){return t?(w=t,e&&(o=e),this):w},this.useLoaderCache=function(t){return t===!1?$=void 0:t===!0?$=!0:"undefined"==typeof t?$="$translationCache":t&&($=t),this},this.directivePriority=function(t){return void 0===t?O:(O=t,this)},this.statefulFilter=function(t){return void 0===t?j:(j=t,this)},this.postProcess=function(t){return y=t?t:void 0,this},this.$get=["$log","$injector","$rootScope","$q",function(t,e,n,r){var o,f,N,R=e.get(h||"$translateDefaultInterpolation"),I=!1,B={},W={},z=function(t,e,n,s,c){!u&&i&&(u=i);var p=c&&c!==u?M(c)||c:u;if(c&&ct(c),angular.isArray(t)){var h=function(t){for(var i={},o=[],a=function(t){var o=r.defer(),a=function(e){i[t]=e,o.resolve([t,e])};return z(t,e,n,s,c).then(a,a),o.promise},u=0,l=t.length;l>u;u++)o.push(a(t[u]));return r.all(o).then(function(){return i})};return h(t)}var d=r.defer();t&&(t=V.apply(t));var v=function(){var t=i?W[i]:W[p];if(f=0,l&&!t){var e=o.get(x);if(t=W[e],a&&a.length){var n=_(a,e);f=0===n?1:0,_(a,i)<0&&a.push(i)}}return t}();if(v){var g=function(){c||(p=u),ot(t,e,n,s,p).then(d.resolve,d.reject)};g.displayName="promiseResolved",v["finally"](g)}else ot(t,e,n,s,p).then(d.resolve,d.reject);return d.promise},G=function(t){return g&&(t=[g,t].join(" ")),m&&(t=[t,m].join(" ")),t},J=function(t){u=t,l&&o.put(z.storageKey(),u),n.$emit("$translateChangeSuccess",{language:t}),R.setLocale(u);var e=function(t,e){B[e].setLocale(u)};e.displayName="eachInterpolatorLocaleSetter",angular.forEach(B,e),n.$emit("$translateChangeEnd",{language:t})},K=function(t){if(!t)throw"No language key specified for loading.";var i=r.defer();n.$emit("$translateLoadingStart",{language:t}),I=!0;var o=$;"string"==typeof o&&(o=e.get(o));var a=angular.extend({},v,{key:t,$http:angular.extend({},{cache:o},v.$http)}),s=function(e){var r={};n.$emit("$translateLoadingSuccess",{language:t}),angular.isArray(e)?angular.forEach(e,function(t){angular.extend(r,F(t))}):angular.extend(r,F(e)),I=!1,i.resolve({key:t,table:r}),n.$emit("$translateLoadingEnd",{language:t})};s.displayName="onLoaderSuccess";var u=function(t){n.$emit("$translateLoadingError",{language:t}),i.reject(t),n.$emit("$translateLoadingEnd",{language:t})};return u.displayName="onLoaderError",e.get(d)(a).then(s,u),i.promise};if(l&&(o=e.get(l),!o.get||!o.put))throw new Error("Couldn't use storage '"+l+"', missing get() or put() method!");if(S.length){var Q=function(t){var n=e.get(t);n.setLocale(i||u),B[n.getInterpolationIdentifier()]=n};Q.displayName="interpolationFactoryAdder",angular.forEach(S,Q)}var Y=function(t){var e=r.defer();if(Object.prototype.hasOwnProperty.call(b,t))e.resolve(b[t]);else if(W[t]){var n=function(t){q(t.key,t.table),e.resolve(t.table)};n.displayName="translationTableResolver",W[t].then(n,e.reject)}else e.reject();return e.promise},X=function(t,e,n,i){var o=r.defer(),a=function(r){if(Object.prototype.hasOwnProperty.call(r,e)){i.setLocale(t);var a=r[e];if("@:"===a.substr(0,2))X(t,a.substr(2),n,i).then(o.resolve,o.reject);else{var s=i.interpolate(r[e],n);s=ut(e,r[e],s,n,t),o.resolve(s)}i.setLocale(u)}else o.reject()};return a.displayName="fallbackTranslationResolver",Y(t).then(a,o.reject),o.promise},Z=function(t,e,n,r){var i,o=b[t];if(o&&Object.prototype.hasOwnProperty.call(o,e)){if(r.setLocale(t),i=r.interpolate(o[e],n),"@:"===i.substr(0,2))return Z(t,i.substr(2),n,r);r.setLocale(u)}return i},tt=function(t,n,r){if(p){var i=e.get(p)(t,u,n,r);return void 0!==i?i:t}return t},et=function(t,e,n,i,o){var s=r.defer();if(t<a.length){var u=a[t];X(u,e,n,i).then(function(t){s.resolve(t)},function(){return et(t+1,e,n,i,o).then(s.resolve,s.reject)})}else o?s.resolve(o):p?s.resolve(tt(e,n)):s.reject(tt(e,n));return s.promise},nt=function(t,e,n,r){var i;if(t<a.length){var o=a[t];i=Z(o,e,n,r),i||(i=nt(t+1,e,n,r))}return i},rt=function(t,e,n,r){return et(N>0?N:f,t,e,n,r)},it=function(t,e,n){return nt(N>0?N:f,t,e,n)},ot=function(t,e,n,i,o){var s=r.defer(),u=o?b[o]:b,c=n?B[n]:R;if(u&&Object.prototype.hasOwnProperty.call(u,t)){var l=u[t];if("@:"===l.substr(0,2))z(l.substr(2),e,n,i,o).then(s.resolve,s.reject);else{var f=c.interpolate(l,e);f=ut(t,l,f,e,o),s.resolve(f)}}else{var h;p&&!I&&(h=tt(t,e,i)),o&&a&&a.length?rt(t,e,c,i).then(function(t){s.resolve(t)},function(t){s.reject(G(t))}):p&&!I&&h?i?s.resolve(i):s.resolve(h):i?s.resolve(i):s.reject(G(t))}return s.promise},at=function(t,e,n,r){var i,o=r?b[r]:b,s=R;if(B&&Object.prototype.hasOwnProperty.call(B,n)&&(s=B[n]),o&&Object.prototype.hasOwnProperty.call(o,t)){var u=o[t];i="@:"===u.substr(0,2)?at(u.substr(2),e,n,r):s.interpolate(u,e)}else{var c;p&&!I&&(c=tt(t,e)),r&&a&&a.length?(f=0,i=it(t,e,s)):i=p&&!I&&c?c:G(t)}return i},st=function(t){c===t&&(c=void 0),W[t]=void 0},ut=function(t,n,r,i,o){var a=y;return a&&("string"==typeof a&&(a=e.get(a)),a)?a(t,n,r,i,o):r},ct=function(t){b[t]||!d||W[t]||(W[t]=K(t).then(function(t){q(t.key,t.table)}))};z.preferredLanguage=function(t){return t&&L(t),i},z.cloakClassName=function(){return C},z.nestedObjectDelimeter=function(){return k},z.fallbackLanguage=function(t){if(void 0!==t&&null!==t){if(H(t),d&&a&&a.length)for(var e=0,n=a.length;n>e;e++)W[a[e]]||(W[a[e]]=K(a[e]));z.use(z.use())}return s?a[0]:a},z.useFallbackLanguage=function(t){if(void 0!==t&&null!==t)if(t){var e=_(a,t);e>-1&&(N=e)}else N=0},z.proposedLanguage=function(){return c},z.storage=function(){return o},z.negotiateLocale=M,z.use=function(t){if(!t)return u;var e=r.defer();n.$emit("$translateChangeStart",{language:t});var i=M(t);return w.length>0&&!i?r.reject(t):(i&&(t=i),c=t,!T&&b[t]||!d||W[t]?W[t]?W[t].then(function(t){return c===t.key&&J(t.key),e.resolve(t.key),t},function(t){return!u&&a&&a.length>0?z.use(a[0]).then(e.resolve,e.reject):e.reject(t)}):(e.resolve(t),J(t)):(W[t]=K(t).then(function(n){return q(n.key,n.table),e.resolve(n.key),c===t&&J(n.key),n},function(t){return n.$emit("$translateChangeError",{language:t}),e.reject(t),n.$emit("$translateChangeEnd",{language:t}),r.reject(t)}),W[t]["finally"](function(){st(t)})),e.promise)},z.resolveClientLocale=function(){return P()},z.storageKey=function(){return U()},z.isPostCompilingEnabled=function(){return E},z.isForceAsyncReloadEnabled=function(){return T},z.refresh=function(t){function e(){o.resolve(),n.$emit("$translateRefreshEnd",{language:t})}function i(){o.reject(),n.$emit("$translateRefreshEnd",{language:t})}if(!d)throw new Error("Couldn't refresh translation table, no loader registered!");var o=r.defer();if(n.$emit("$translateRefreshStart",{language:t}),t)if(b[t]){var s=function(n){q(n.key,n.table),t===u&&J(u),e()};s.displayName="refreshPostProcessor",K(t).then(s,i)}else i();else{var c=[],l={};if(a&&a.length)for(var f=0,p=a.length;p>f;f++)c.push(K(a[f])),l[a[f]]=!0;u&&!l[u]&&c.push(K(u));var h=function(t){b={},angular.forEach(t,function(t){q(t.key,t.table)}),u&&J(u),e()};h.displayName="refreshPostProcessor",r.all(c).then(h,i)}return o.promise},z.instant=function(t,e,n,r){var o=r&&r!==u?M(r)||r:u;if(null===t||angular.isUndefined(t))return t;if(r&&ct(r),angular.isArray(t)){for(var s={},c=0,l=t.length;l>c;c++)s[t[c]]=z.instant(t[c],e,n,r);return s}if(angular.isString(t)&&t.length<1)return t;t&&(t=V.apply(t));var f,h=[];i&&h.push(i),o&&h.push(o),a&&a.length&&(h=h.concat(a));for(var d=0,v=h.length;v>d;d++){var $=h[d];if(b[$]&&"undefined"!=typeof b[$][t]&&(f=at(t,e,n,o)),"undefined"!=typeof f)break}return f||""===f||(g||m?f=G(t):(f=R.interpolate(t,e),p&&!I&&(f=tt(t,e)))),f},z.versionInfo=function(){return D},z.loaderCache=function(){return $},z.directivePriority=function(){return O},z.statefulFilter=function(){return j},z.isReady=function(){return A};var lt=r.defer();lt.promise.then(function(){A=!0}),z.onReady=function(t){var e=r.defer();return angular.isFunction(t)&&e.promise.then(t),A?e.resolve():lt.promise.then(e.resolve),e.promise},z.getAvailableLanguageKeys=function(){return w.length>0?w:null};var ft=n.$on("$translateReady",function(){lt.resolve(),ft(),ft=null}),pt=n.$on("$translateChangeEnd",function(){lt.resolve(),pt(),pt=null});if(d){if(angular.equals(b,{})&&z.use()&&z.use(z.use()),a&&a.length)for(var ht=function(t){return q(t.key,t.table),n.$emit("$translateChangeEnd",{language:t.key}),t},dt=0,vt=a.length;vt>dt;dt++){var gt=a[dt];!T&&b[gt]||(W[gt]=K(gt).then(ht))}}else n.$emit("$translateReady",{language:z.use()});return z}]}function r(t,e){"use strict";var n,r={},i="default";return r.setLocale=function(t){n=t},r.getInterpolationIdentifier=function(){return i},r.useSanitizeValueStrategy=function(t){return e.useStrategy(t),this},r.interpolate=function(n,r){r=r||{},r=e.sanitize(r,"params");var i=t(n)(r);return i=e.sanitize(i,"text")},r}function i(t,e,n,r,i,a){"use strict";var s=function(){return this.toString().replace(/^\s+|\s+$/g,"")};return{restrict:"AE",scope:!0,priority:t.directivePriority(),compile:function(e,u){var c=u.translateValues?u.translateValues:void 0,l=u.translateInterpolation?u.translateInterpolation:void 0,f=e[0].outerHTML.match(/translate-value-+/i),p="^(.*)("+n.startSymbol()+".*"+n.endSymbol()+")(.*)",h="^(.*)"+n.startSymbol()+"(.*)"+n.endSymbol()+"(.*)";return function(e,d,v){e.interpolateParams={},e.preText="",e.postText="",e.translateNamespace=o(e);var g={},m=function(t,n,r){if(n.translateValues&&angular.extend(t,i(n.translateValues)(e.$parent)),f)for(var o in r)if(Object.prototype.hasOwnProperty.call(n,o)&&"translateValue"===o.substr(0,14)&&"translateValues"!==o){var a=angular.lowercase(o.substr(14,1))+o.substr(15);t[a]=r[o]}},$=function(t){if(angular.isFunction($._unwatchOld)&&($._unwatchOld(),$._unwatchOld=void 0),angular.equals(t,"")||!angular.isDefined(t)){var r=s.apply(d.text()),i=r.match(p);if(angular.isArray(i)){e.preText=i[1],e.postText=i[3],g.translate=n(i[2])(e.$parent);var o=r.match(h);angular.isArray(o)&&o[2]&&o[2].length&&($._unwatchOld=e.$watch(o[2],function(t){g.translate=t,C()}))}else g.translate=r?r:void 0}else g.translate=t;C()},y=function(t){v.$observe(t,function(e){g[t]=e,C()})};m(e.interpolateParams,v,u);var b=!0;v.$observe("translate",function(t){"undefined"==typeof t?$(""):""===t&&b||(g.translate=t,C()),b=!1});for(var w in v)v.hasOwnProperty(w)&&"translateAttr"===w.substr(0,13)&&y(w);if(v.$observe("translateDefault",function(t){e.defaultText=t,C()}),c&&v.$observe("translateValues",function(t){t&&e.$parent.$watch(function(){angular.extend(e.interpolateParams,i(t)(e.$parent))})}),f){var x=function(t){v.$observe(t,function(n){var r=angular.lowercase(t.substr(14,1))+t.substr(15);e.interpolateParams[r]=n})};for(var S in v)Object.prototype.hasOwnProperty.call(v,S)&&"translateValue"===S.substr(0,14)&&"translateValues"!==S&&x(S)}var C=function(){for(var t in g)g.hasOwnProperty(t)&&void 0!==g[t]&&E(t,g[t],e,e.interpolateParams,e.defaultText,e.translateNamespace)},E=function(e,n,r,i,o,a){n?(a&&"."===n.charAt(0)&&(n=a+n),t(n,i,l,o,r.translateLanguage).then(function(t){T(t,r,!0,e)},function(t){T(t,r,!1,e)})):T(n,r,!1,e)},T=function(e,n,i,o){if(i||"undefined"!=typeof n.defaultText&&(e=n.defaultText),"translate"===o){(i||!i&&"undefined"==typeof v.translateKeepContent)&&d.empty().append(n.preText+e+n.postText);var a=t.isPostCompilingEnabled(),s="undefined"!=typeof u.translateCompile,c=s&&"false"!==u.translateCompile;(a&&!s||c)&&r(d.contents())(n)}else{var l=v.$attr[o];"data-"===l.substr(0,5)&&(l=l.substr(5)),l=l.substr(15),d.attr(l,e)}};(c||f||v.translateDefault)&&e.$watch("interpolateParams",C,!0);var k=e.$on("translateLanguageChanged",C),A=a.$on("$translateChangeSuccess",C);d.text().length?$(v.translate?v.translate:""):v.translate&&$(v.translate),C(),e.$on("$destroy",function(){k(),A()})}}}}function o(t){"use strict";return t.translateNamespace?t.translateNamespace:t.$parent?o(t.$parent):void 0}function a(t,e){"use strict";return{compile:function(n){var r=function(){n.addClass(t.cloakClassName())},i=function(){n.removeClass(t.cloakClassName())};return t.onReady(function(){i()}),r(),function(n,o,a){a.translateCloak&&a.translateCloak.length&&(a.$observe("translateCloak",function(e){t(e).then(i,r)}),e.$on("$translateChangeSuccess",function(){t(a.translateCloak).then(i,r)}))}}}}function s(){"use strict";return{restrict:"A",scope:!0,compile:function(){return{pre:function(t,e,n){t.translateNamespace=o(t),t.translateNamespace&&"."===n.translateNamespace.charAt(0)?t.translateNamespace+=n.translateNamespace:t.translateNamespace=n.translateNamespace}}}}}function o(t){"use strict";return t.translateNamespace?t.translateNamespace:t.$parent?o(t.$parent):void 0}function u(){"use strict";return{restrict:"A",scope:!0,compile:function(){return function(t,e,n){n.$observe("translateLanguage",function(e){t.translateLanguage=e}),t.$watch("translateLanguage",function(){t.$broadcast("translateLanguageChanged")})}}}}function c(t,e){"use strict";var n=function(n,r,i,o){return angular.isObject(r)||(r=t(r)(this)),e.instant(n,r,i,o)};return e.statefulFilter()&&(n.$stateful=!0),n}function l(t){"use strict";return t("translations")}return t.$inject=["$translate"],n.$inject=["$STORAGE_KEY","$windowProvider","$translateSanitizationProvider","pascalprechtTranslateOverrider"],r.$inject=["$interpolate","$translateSanitization"],i.$inject=["$translate","$q","$interpolate","$compile","$parse","$rootScope"],a.$inject=["$translate","$rootScope"],c.$inject=["$parse","$translate"],l.$inject=["$cacheFactory"],angular.module("pascalprecht.translate",["ng"]).run(t),t.displayName="runTranslate",angular.module("pascalprecht.translate").provider("$translateSanitization",e),angular.module("pascalprecht.translate").constant("pascalprechtTranslateOverrider",{}).provider("$translate",n),n.displayName="displayName",angular.module("pascalprecht.translate").factory("$translateDefaultInterpolation",r),r.displayName="$translateDefaultInterpolation",angular.module("pascalprecht.translate").constant("$STORAGE_KEY","NG_TRANSLATE_LANG_KEY"),angular.module("pascalprecht.translate").directive("translate",i),i.displayName="translateDirective",angular.module("pascalprecht.translate").directive("translateCloak",a),a.displayName="translateCloakDirective",angular.module("pascalprecht.translate").directive("translateNamespace",s),s.displayName="translateNamespaceDirective",angular.module("pascalprecht.translate").directive("translateLanguage",u),u.displayName="translateLanguageDirective",angular.module("pascalprecht.translate").filter("translate",c),c.displayName="translateFilterFactory",angular.module("pascalprecht.translate").factory("$translationCache",l),l.displayName="$translationCache","pascalprecht.translate"}),function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("angular-ui-router",[],e):"object"==typeof exports?exports["angular-ui-router"]=e():t["angular-ui-router"]=e()}(this,function(){return function(t){function e(r){if(n[r])return n[r].exports;var i=n[r]={exports:{},id:r,loaded:!1};return t[r].call(i.exports,i,i.exports,e),i.loaded=!0,i.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){"use strict";function r(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}r(n(1)),r(n(53)),r(n(54)),n(56),n(57),n(58),n(59),Object.defineProperty(e,"__esModule",{value:!0}),e["default"]="ui.router"},function(t,e,n){"use strict";function r(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}r(n(2)),r(n(20)),r(n(44)),r(n(40)),r(n(17)),r(n(13)),r(n(45)),r(n(49)),r(n(51));var i=n(52);e.UIRouter=i.UIRouter},function(t,e,n){"use strict";function r(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}r(n(3)),r(n(6)),r(n(7)),r(n(5)),r(n(4)),r(n(8)),r(n(9)),r(n(12))},function(t,e,n){"use strict";function r(t,e,n,r){return void 0===r&&(r=Object.keys(t)),r.filter(function(e){return"function"==typeof t[e]}).forEach(function(r){return e[r]=t[r].bind(n)})}function i(t){void 0===t&&(t={});for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];var i=o.apply(null,[{}].concat(n));return e.extend({},i,c(t||{},Object.keys(i)))}function o(t){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];return e.forEach(n,function(n){e.forEach(n,function(e,n){t.hasOwnProperty(n)||(t[n]=e)})}),t}function a(t,e){var n=[];for(var r in t.path){if(t.path[r]!==e.path[r])break;n.push(t.path[r])}return n}function s(t,e,n){void 0===n&&(n=Object.keys(t));for(var r=0;r<n.length;r++){var i=n[r];if(t[i]!=e[i])return!1}return!0}function u(t,e){var n={},r=O(arguments,2);for(var i in e)t(r,i)&&(n[i]=e[i]);return n}function c(t){return u.apply(null,[j].concat(O(arguments)))}function l(t){return u.apply(null,[k.not(j)].concat(O(arguments)))}function f(t,e){return d(t,k.prop(e))}function p(t,n){var r=T.isArray(t),i=r?[]:{},o=r?function(t){return i.push(t)}:function(t,e){return i[e]=t};return e.forEach(t,function(t,e){n(t,e)&&o(t,e)}),i}function h(t,n){var r;return e.forEach(t,function(t,e){r||n(t,e)&&(r=t)}),r}function d(t,n){var r=T.isArray(t)?[]:{};return e.forEach(t,function(t,e){return r[e]=n(t,e)}),r}function v(t,e){return t.push(e),t}function g(t,e){return void 0===e&&(e="assert failure"),function(n){if(!t(n))throw new Error(T.isFunction(e)?e(n):e);return!0}}function m(){for(var t=[],e=0;e<arguments.length;e++)t[e-0]=arguments[e];if(0===t.length)return[];var n=t.reduce(function(t,e){return Math.min(e.length,t)},9007199254740991);return Array.apply(null,Array(n)).map(function(e,n){return t.map(function(t){return t[n]})})}function $(t,e){var n,r;if(T.isArray(e)&&(n=e[0],r=e[1]),!T.isString(n))throw new Error("invalid parameters to applyPairs");return t[n]=r,t}function y(t){return t.length&&t[t.length-1]||void 0}function b(t,n){return n&&Object.keys(n).forEach(function(t){return delete n[t]}),n||(n={}),e.extend(n,t)}function w(t,e,n){return T.isArray(t)?t.forEach(e,n):void Object.keys(t).forEach(function(n){return e(t[n],n)})}function x(t,e){return Object.keys(e).forEach(function(n){return t[n]=e[n]}),t}function S(t,n){return O(arguments,1).filter(e.identity).reduce(x,t)}function C(t,e){if(t===e)return!0;if(null===t||null===e)return!1;if(t!==t&&e!==e)return!0;var n=typeof t,r=typeof e;if(n!==r||"object"!==n)return!1;var i=[t,e];if(k.all(T.isArray)(i))return E(t,e);if(k.all(T.isDate)(i))return t.getTime()===e.getTime();if(k.all(T.isRegExp)(i))return t.toString()===e.toString();if(k.all(T.isFunction)(i))return!0;var o=[T.isFunction,T.isArray,T.isDate,T.isRegExp];if(o.map(k.any).reduce(function(t,e){return t||!!e(i)},!1))return!1;var a,s={};for(a in t){if(!C(t[a],e[a]))return!1;s[a]=!0}for(a in e)if(!s[a])return!1;return!0}function E(t,e){return t.length!==e.length?!1:m(t,e).reduce(function(t,e){return t&&C(e[0],e[1])},!0)}var T=n(4),k=n(5),A=window.angular||{};e.fromJson=A.fromJson||JSON.parse.bind(JSON),e.toJson=A.toJson||JSON.stringify.bind(JSON),e.copy=A.copy||b,e.forEach=A.forEach||w,e.extend=A.extend||S,e.equals=A.equals||C,e.identity=function(t){return t},e.noop=function(){},e.abstractKey="abstract",e.bindFunctions=r,e.inherit=function(t,n){return e.extend(new(e.extend(function(){},{prototype:t})),n)};var O=function(t,e){return void 0===e&&(e=0),Array.prototype.concat.apply(Array.prototype,Array.prototype.slice.call(t,e))},j=function(t,e){return-1!==t.indexOf(e)};e.removeFrom=k.curry(function(t,e){var n=t.indexOf(e);return n>=0&&t.splice(n,1),t}),e.defaults=i,e.merge=o,e.mergeR=function(t,n){return e.extend(t,n)},e.ancestors=a,e.equalForKeys=s,e.pick=c,e.omit=l,e.pluck=f,e.filter=p,e.find=h,e.mapObj=d,e.map=d,e.values=function(t){return Object.keys(t).map(function(e){return t[e]})},e.allTrueR=function(t,e){return t&&e},e.anyTrueR=function(t,e){return t||e},e.unnestR=function(t,e){return t.concat(e)},e.flattenR=function(t,n){return T.isArray(n)?t.concat(n.reduce(e.flattenR,[])):v(t,n)},e.unnest=function(t){return t.reduce(e.unnestR,[])},e.flatten=function(t){return t.reduce(e.flattenR,[])},e.assertPredicate=g,e.pairs=function(t){return Object.keys(t).map(function(e){return[e,t[e]]})},e.arrayTuples=m,e.applyPairs=$,e.tail=y},function(t,e,n){"use strict";function r(t){if(e.isArray(t)&&t.length){var n=t.slice(0,-1),r=t.slice(-1);return!(n.filter(i.not(e.isString)).length||r.filter(i.not(e.isFunction)).length)}return e.isFunction(t)}var i=n(5),o=Object.prototype.toString,a=function(t){return function(e){return typeof e===t}};e.isUndefined=a("undefined"),e.isDefined=i.not(e.isUndefined),e.isNull=function(t){return null===t},e.isFunction=a("function"),e.isNumber=a("number"),e.isString=a("string"),e.isObject=function(t){return null!==t&&"object"==typeof t},e.isArray=Array.isArray,e.isDate=function(t){return"[object Date]"===o.call(t)},e.isRegExp=function(t){return"[object RegExp]"===o.call(t)},e.isInjectable=r,e.isPromise=i.and(e.isObject,i.pipe(i.prop("then"),e.isFunction))},function(t,e){"use strict";function n(t){function e(n){return n.length>=r?t.apply(null,n):function(){return e(n.concat([].slice.apply(arguments)))}}var n=[].slice.apply(arguments,[1]),r=t.length;return e(n)}function r(){var t=arguments,e=t.length-1;return function(){for(var n=e,r=t[e].apply(this,arguments);n--;)r=t[n].call(this,r);return r}}function i(){for(var t=[],e=0;e<arguments.length;e++)t[e-0]=arguments[e];return r.apply(null,[].slice.call(arguments).reverse())}function o(t,e){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r-0]=arguments[r];return t.apply(null,n)&&e.apply(null,n)}}function a(t,e){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r-0]=arguments[r];return t.apply(null,n)||e.apply(null,n)}}function s(t,e){return function(n){return n[t].apply(n,e)}}function u(t){return function(e){for(var n=0;n<t.length;n++)if(t[n][0](e))return t[n][1](e)}}e.curry=n,e.compose=r,e.pipe=i,e.prop=function(t){return function(e){return e&&e[t]}},e.propEq=n(function(t,e,n){return n&&n[t]===e}),e.parse=function(t){return i.apply(null,t.split(".").map(e.prop))},e.not=function(t){return function(){for(var e=[],n=0;n<arguments.length;n++)e[n-0]=arguments[n];return!t.apply(null,e)}},e.and=o,e.or=a,e.all=function(t){return function(e){return e.reduce(function(e,n){return e&&!!t(n)},!0)}},e.any=function(t){return function(e){return e.reduce(function(e,n){return e||!!t(n)},!1)}},e.none=e.not(e.any),e.is=function(t){return function(e){return null!=e&&e.constructor===t||e instanceof t}},e.eq=function(t){return function(e){return t===e}},e.val=function(t){return function(){return t}},e.invoke=s,e.pattern=u},function(t,e){"use strict";var n=function(t){return function(){throw new Error(t+"(): No coreservices implementation for UI-Router is loaded. You should include one of: ['angular1.js']")}},r={$q:void 0,$injector:void 0,location:{},locationConfig:{},template:{}};e.services=r,["replace","url","path","search","hash","onChange"].forEach(function(t){return r.location[t]=n(t)}),["port","protocol","host","baseHref","html5Mode","hashPrefix"].forEach(function(t){return r.locationConfig[t]=n(t)})},function(t,e){"use strict";var n=function(){function t(t){this.text=t,this.glob=t.split(".")}return t.prototype.matches=function(t){for(var e=t.split("."),n=0,r=this.glob.length;r>n;n++)"*"===this.glob[n]&&(e[n]="*");return"**"===this.glob[0]&&(e=e.slice(e.indexOf(this.glob[1])),e.unshift("**")),"**"===this.glob[this.glob.length-1]&&(e.splice(e.indexOf(this.glob[this.glob.length-2])+1,Number.MAX_VALUE),e.push("**")),this.glob.length!=e.length?!1:e.join("")===this.glob.join("")},t.is=function(t){return t.indexOf("*")>-1},t.fromString=function(e){return this.is(e)?new t(e):null},t}();e.Glob=n},function(t,e){"use strict";var n=function(){function t(t,e){void 0===t&&(t=[]),void 0===e&&(e=null),this._items=t,this._limit=e}return t.prototype.enqueue=function(t){var e=this._items;return e.push(t),
this._limit&&e.length>this._limit&&e.shift(),t},t.prototype.dequeue=function(){return this.size()?this._items.splice(0,1)[0]:void 0},t.prototype.clear=function(){var t=this._items;return this._items=[],t},t.prototype.size=function(){return this._items.length},t.prototype.remove=function(t){var e=this._items.indexOf(t);return e>-1&&this._items.splice(e,1)[0]},t.prototype.peekTail=function(){return this._items[this._items.length-1]},t.prototype.peekHead=function(){return this.size()?this._items[0]:void 0},t}();e.Queue=n},function(t,e,n){"use strict";function r(t,e){return e.length<=t?e:e.substr(0,t-3)+"..."}function i(t,e){for(;e.length<t;)e+=" ";return e}function o(t){return p.is(l.TransitionRejection)(t.reason)?t.reason.toString():"Promise("+JSON.stringify(t)+")"}function a(t){var e=s(t),n=e.match(/^(function [^ ]+\([^)]*\))/);return n?n[1]:e}function s(t){var e=c.isArray(t)?t.slice(-1)[0]:t;return e&&e.toString()||"undefined"}function u(t){function e(t){if(c.isObject(t)){if(-1!==n.indexOf(t))return"[circular ref]";n.push(t)}return v(t)}var n=[];return JSON.stringify(t,function(t,n){return e(n)}).replace(/\\"/g,'"')}var c=n(4),l=n(10),f=n(3),p=n(5),h=n(11),d=n(32);e.maxLength=r,e.padString=i,e.kebobString=function(t){return t.replace(/([A-Z])/g,function(t){return"-"+t.toLowerCase()})},e.functionToString=a,e.fnToString=s;var v=p.pattern([[p.not(c.isDefined),p.val("undefined")],[c.isNull,p.val("null")],[c.isPromise,o],[p.is(h.Transition),p.invoke("toString")],[p.is(d.Resolvable),p.invoke("toString")],[c.isInjectable,a],[p.val(!0),f.identity]]);e.stringify=u},function(t,e,n){"use strict";var r=n(3),i=n(6),o=n(9);!function(t){t[t.SUPERSEDED=2]="SUPERSEDED",t[t.ABORTED=3]="ABORTED",t[t.INVALID=4]="INVALID",t[t.IGNORED=5]="IGNORED"}(e.RejectType||(e.RejectType={}));var a=e.RejectType,s=function(){function t(t,e,n){r.extend(this,{type:t,message:e,detail:n})}return t.prototype.toString=function(){var t=function(t){return t&&t.toString!==Object.prototype.toString?t.toString():o.stringify(t)},e=this.type,n=this.message,r=t(this.detail);return"TransitionRejection(type: "+e+", message: "+n+", detail: "+r+")"},t}();e.TransitionRejection=s;var u=function(){function t(){}return t.prototype.superseded=function(t,e){var n="The transition has been superseded by a different transition (see detail).",o=new s(a.SUPERSEDED,n,t);return e&&e.redirected&&(o.redirected=!0),r.extend(i.services.$q.reject(o),{reason:o})},t.prototype.redirected=function(t){return this.superseded(t,{redirected:!0})},t.prototype.invalid=function(t){var e="This transition is invalid (see detail)",n=new s(a.INVALID,e,t);return r.extend(i.services.$q.reject(n),{reason:n})},t.prototype.ignored=function(t){var e="The transition was ignored.",n=new s(a.IGNORED,e,t);return r.extend(i.services.$q.reject(n),{reason:n})},t.prototype.aborted=function(t){var e="The transition has been aborted.",n=new s(a.ABORTED,e,t);return r.extend(i.services.$q.reject(n),{reason:n})},t}();e.RejectFactory=u},function(t,e,n){"use strict";var r=n(12),i=n(6),o=n(3),a=n(4),s=n(5),u=n(13),c=n(39),l=n(38),f=n(17),p=n(20),h=n(40),d=0,v=new u.RejectFactory,g=s.prop("self"),m=function(){function t(t,e,n){var r=this;if(this._transitionService=n,this._deferred=i.services.$q.defer(),this.promise=this._deferred.promise,this.treeChanges=function(){return r._treeChanges},this.isActive=function(){return r===r._options.current()},!e.valid())throw new Error(e.error());u.HookRegistry.mixin(new u.HookRegistry,this),this._options=o.extend({current:s.val(this)},e.options()),this.$id=d++;var a=l.PathFactory.buildToPath(t,e);a=l.PathFactory.applyViewConfigs(n.$view,a),this._treeChanges=l.PathFactory.treeChanges(t,a,this._options.reloadState),l.PathFactory.bindTransitionResolve(this._treeChanges,this)}return t.prototype.$from=function(){return o.tail(this._treeChanges.from).state},t.prototype.$to=function(){return o.tail(this._treeChanges.to).state},t.prototype.from=function(){return this.$from().self},t.prototype.to=function(){return this.$to().self},t.prototype.is=function(e){return e instanceof t?this.is({to:e.$to().name,from:e.$from().name}):!(e.to&&!u.matchState(this.$to(),e.to)||e.from&&!u.matchState(this.$from(),e.from))},t.prototype.params=function(t){return void 0===t&&(t="to"),this._treeChanges[t].map(s.prop("paramValues")).reduce(o.mergeR,{})},t.prototype.resolves=function(){return o.map(o.tail(this._treeChanges.to).resolveContext.getResolvables(),function(t){return t.data})},t.prototype.addResolves=function(t,e){void 0===e&&(e="");var n="string"==typeof e?e:e.name,r=this._treeChanges.to,i=o.find(r,function(t){return t.state.name===n});o.tail(r).resolveContext.addResolvables(h.Resolvable.makeResolvables(t),i.state)},t.prototype.previous=function(){return this._options.previous||null},t.prototype.options=function(){return this._options},t.prototype.entering=function(){return o.map(this._treeChanges.entering,s.prop("state")).map(g)},t.prototype.exiting=function(){return o.map(this._treeChanges.exiting,s.prop("state")).map(g).reverse()},t.prototype.retained=function(){return o.map(this._treeChanges.retained,s.prop("state")).map(g)},t.prototype.views=function(t,e){void 0===t&&(t="entering");var n=this._treeChanges[t];return n=e?n.filter(s.propEq("state",e)):n,n.map(s.prop("views")).filter(o.identity).reduce(o.unnestR,[])},t.prototype.redirect=function(e){var n=o.extend({},this.options(),e.options(),{previous:this});e=new f.TargetState(e.identifier(),e.$state(),e.params(),n);var r=new t(this._treeChanges.from,e,this._transitionService),i=e.options().reloadState,a=this.treeChanges().to,s=c.Node.matching(r.treeChanges().to,a).filter(function(t){return!i||!i.includes[t.state.name]}),u=function(t,e){return-1===["$stateParams","$transition$"].indexOf(e)};return s.forEach(function(t,e){return o.extend(t.resolves,o.filter(a[e].resolves,u))}),r},t.prototype._changedParams=function(){var t=this._treeChanges,e=t.to,n=t.from;if(!this._options.reload&&o.tail(e).state===o.tail(n).state){var r=e.map(function(t){return t.paramSchema}),i=[e,n].map(function(t){return t.map(function(t){return t.paramValues})}),a=i[0],s=i[1],u=o.arrayTuples(r,a,s);return u.map(function(t){var e=t[0],n=t[1],r=t[2];return p.Param.changed(e,n,r)}).reduce(o.unnestR,[])}},t.prototype.dynamic=function(){var t=this._changedParams();return t?t.map(function(t){return t.dynamic}).reduce(o.anyTrueR,!1):!1},t.prototype.ignored=function(){var t=this._changedParams();return t?0===t.length:!1},t.prototype.hookBuilder=function(){return new u.HookBuilder(this._transitionService,this,{transition:this,current:this._options.current})},t.prototype.run=function(){var t=this,e=this.hookBuilder(),n=u.TransitionHook.runSynchronousHooks,o=function(){return n(e.getOnSuccessHooks(),{},!0)},a=function(t){return n(e.getOnErrorHooks(),{$error$:t},!0)};this.promise.then(o,a);var s=n(e.getOnBeforeHooks());if(u.TransitionHook.isRejection(s)){var c=s.reason;return this._deferred.reject(c),this.promise}if(!this.valid()){var l=new Error(this.error());return this._deferred.reject(l),this.promise}if(this.ignored()){r.trace.traceTransitionIgnored(this);var f=v.ignored();return this._deferred.reject(f.reason),this.promise}var p=function(){t.success=!0,t._deferred.resolve(t),r.trace.traceSuccess(t.$to(),t)},h=function(e){return t.success=!1,t._deferred.reject(e),r.trace.traceError(e,t),i.services.$q.reject(e)};r.trace.traceTransitionStart(this);var d=e.asyncHooks().reduce(function(t,e){return t.then(e.invokeStep)},s);return d.then(p,h),this.promise},t.prototype.valid=function(){return!this.error()},t.prototype.error=function(){var t=this.$to();return t.self[o.abstractKey]?"Cannot transition to abstract state '"+t.name+"'":p.Param.validates(t.parameters(),this.params())?void 0:"Param values not valid for state '"+t.name+"'"},t.prototype.toString=function(){var t=this.from(),e=this.to(),n=function(t){return null!==t["#"]&&void 0!==t["#"]?t:o.omit(t,"#")},r=this.$id,i=a.isObject(t)?t.name:t,u=o.toJson(n(this._treeChanges.from.map(s.prop("paramValues")).reduce(o.mergeR,{}))),c=this.valid()?"":"(X) ",l=a.isObject(e)?e.name:e,f=o.toJson(n(this.params()));return"Transition#"+r+"( '"+i+"'"+u+" -> "+c+"'"+l+"'"+f+" )"},t}();e.Transition=m},function(t,e,n){"use strict";function r(t){return t?"ui-view id#"+t.id+", contextual name '"+t.name+"@"+t.creationContext+"', fqn: '"+t.fqn+"'":"ui-view (defunct)"}function i(t){return a.isNumber(t)?c[t]:c[c[t]]}var o=n(5),a=n(4),s=n(9),u=function(t){return"ViewConfig targeting ui-view: '"+t.viewDecl.$uiViewName+"@"+t.viewDecl.$uiViewContextAnchor+"', context: '"+t.viewDecl.$context.name+"'"};!function(t){t[t.RESOLVE=0]="RESOLVE",t[t.TRANSITION=1]="TRANSITION",t[t.HOOK=2]="HOOK",t[t.INVOKE=3]="INVOKE",t[t.UIVIEW=4]="UIVIEW",t[t.VIEWCONFIG=5]="VIEWCONFIG"}(e.Category||(e.Category={}));var c=e.Category,l=function(){function t(){this._enabled={},this.approximateDigests=0}return t.prototype._set=function(t,e){var n=this;e.length||(e=Object.keys(c).filter(function(t){return isNaN(parseInt(t,10))}).map(function(t){return c[t]})),e.map(i).forEach(function(e){return n._enabled[e]=t})},t.prototype.enable=function(){for(var t=[],e=0;e<arguments.length;e++)t[e-0]=arguments[e];this._set(!0,t)},t.prototype.disable=function(){for(var t=[],e=0;e<arguments.length;e++)t[e-0]=arguments[e];this._set(!1,t)},t.prototype.enabled=function(t){return!!this._enabled[i(t)]},t.prototype.traceTransitionStart=function(t){if(this.enabled(c.TRANSITION)){var e=t.$id,n=this.approximateDigests,r=s.stringify(t);console.log("Transition #"+e+" Digest #"+n+": Started  -> "+r)}},t.prototype.traceTransitionIgnored=function(t){if(this.enabled(c.TRANSITION)){var e=t.$id,n=this.approximateDigests,r=s.stringify(t);console.log("Transition #"+e+" Digest #"+n+": Ignored  <> "+r)}},t.prototype.traceHookInvocation=function(t,e){if(this.enabled(c.HOOK)){var n=o.parse("transition.$id")(e),r=this.approximateDigests,i=o.parse("traceData.hookType")(e)||"internal",a=o.parse("traceData.context.state.name")(e)||o.parse("traceData.context")(e)||"unknown",u=s.functionToString(t.fn);console.log("Transition #"+n+" Digest #"+r+":   Hook -> "+i+" context: "+a+", "+s.maxLength(200,u))}},t.prototype.traceHookResult=function(t,e,n){if(this.enabled(c.HOOK)){var r=o.parse("transition.$id")(n),i=this.approximateDigests,a=s.stringify(t),u=s.stringify(e);console.log("Transition #"+r+" Digest #"+i+":   <- Hook returned: "+s.maxLength(200,a)+", transition result: "+s.maxLength(200,u))}},t.prototype.traceResolvePath=function(t,e){if(this.enabled(c.RESOLVE)){var n=o.parse("transition.$id")(e),r=this.approximateDigests,i=t&&t.toString(),a=e&&e.resolvePolicy;console.log("Transition #"+n+" Digest #"+r+":         Resolving "+i+" ("+a+")")}},t.prototype.traceResolvePathElement=function(t,e,n){if(this.enabled(c.RESOLVE)&&e.length){var r=o.parse("transition.$id")(n),i=this.approximateDigests,a=Object.keys(e).join(", "),s=t&&t.toString(),u=n&&n.resolvePolicy;console.log("Transition #"+r+" Digest #"+i+":         Resolve "+s+" resolvables: ["+a+"] ("+u+")")}},t.prototype.traceResolveResolvable=function(t,e){if(this.enabled(c.RESOLVE)){var n=o.parse("transition.$id")(e),r=this.approximateDigests,i=t&&t.toString();console.log("Transition #"+n+" Digest #"+r+":               Resolving -> "+i)}},t.prototype.traceResolvableResolved=function(t,e){if(this.enabled(c.RESOLVE)){var n=o.parse("transition.$id")(e),r=this.approximateDigests,i=t&&t.toString(),a=s.stringify(t.data);console.log("Transition #"+n+" Digest #"+r+":               <- Resolved  "+i+" to: "+s.maxLength(200,a))}},t.prototype.tracePathElementInvoke=function(t,e,n,r){if(this.enabled(c.INVOKE)){var i=o.parse("transition.$id")(r),a=this.approximateDigests,u=t&&t.state&&t.state.toString(),l=s.functionToString(e);console.log("Transition #"+i+" Digest #"+a+":         Invoke "+r.when+": context: "+u+" "+s.maxLength(200,l))}},t.prototype.traceError=function(t,e){if(this.enabled(c.TRANSITION)){var n=e.$id,r=this.approximateDigests,i=s.stringify(e);console.log("Transition #"+n+" Digest #"+r+": <- Rejected "+i+", reason: "+t)}},t.prototype.traceSuccess=function(t,e){if(this.enabled(c.TRANSITION)){var n=e.$id,r=this.approximateDigests,i=t.name,o=s.stringify(e);console.log("Transition #"+n+" Digest #"+r+": <- Success  "+o+", final state: "+i)}},t.prototype.traceUiViewEvent=function(t,e,n){void 0===n&&(n=""),this.enabled(c.UIVIEW)&&console.log("ui-view: "+s.padString(30,t)+" "+r(e)+n)},t.prototype.traceUiViewConfigUpdated=function(t,e){this.enabled(c.UIVIEW)&&this.traceUiViewEvent("Updating",t," with ViewConfig from context='"+e+"'")},t.prototype.traceUiViewScopeCreated=function(t,e){this.enabled(c.UIVIEW)&&this.traceUiViewEvent("Created scope for",t,", scope #"+e.$id)},t.prototype.traceUiViewFill=function(t,e){this.enabled(c.UIVIEW)&&this.traceUiViewEvent("Fill",t," with: "+s.maxLength(200,e))},t.prototype.traceViewServiceEvent=function(t,e){this.enabled(c.VIEWCONFIG)&&console.log("$view.ViewConfig: "+t+" "+u(e))},t.prototype.traceViewServiceUiViewEvent=function(t,e){this.enabled(c.VIEWCONFIG)&&console.log("$view.ViewConfig: "+t+" "+r(e))},t}();e.Trace=l;var f=new l;e.trace=f},function(t,e,n){"use strict";function r(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}r(n(14)),r(n(15)),r(n(10)),r(n(11)),r(n(16)),r(n(43))},function(t,e,n){"use strict";function r(t){return void 0===t&&(t=!1),function(e,n){var r=t?-1:1,i=(e.node.state.path.length-n.node.state.path.length)*r;return 0!==i?i:n.hook.priority-e.hook.priority}}var i=n(3),o=n(4),a=n(13),s=function(){function t(t,e,n){var o=this;this.$transitions=t,this.transition=e,this.baseHookOptions=n,this.getOnBeforeHooks=function(){return o._buildNodeHooks("onBefore","to",r(),void 0,{async:!1})},this.getOnStartHooks=function(){return o._buildNodeHooks("onStart","to",r())},this.getOnExitHooks=function(){return o._buildNodeHooks("onExit","exiting",r(!0),function(t){return{$state$:t.state}})},this.getOnRetainHooks=function(){return o._buildNodeHooks("onRetain","retained",r(),function(t){return{$state$:t.state}})},this.getOnEnterHooks=function(){return o._buildNodeHooks("onEnter","entering",r(),function(t){return{$state$:t.state}})},this.getOnFinishHooks=function(){return o._buildNodeHooks("onFinish","to",r(),function(t){return{$treeChanges$:o.treeChanges}})},this.getOnSuccessHooks=function(){return o._buildNodeHooks("onSuccess","to",r(),void 0,{async:!1,rejectIfSuperseded:!1})},this.getOnErrorHooks=function(){return o._buildNodeHooks("onError","to",r(),void 0,{async:!1,rejectIfSuperseded:!1})},this.treeChanges=e.treeChanges(),this.toState=i.tail(this.treeChanges.to).state,this.fromState=i.tail(this.treeChanges.from).state,this.transitionOptions=e.options()}return t.prototype.asyncHooks=function(){var t=this.getOnStartHooks(),e=this.getOnExitHooks(),n=this.getOnRetainHooks(),r=this.getOnEnterHooks(),o=this.getOnFinishHooks(),a=[t,e,n,r,o];return a.reduce(i.unnestR,[]).filter(i.identity)},t.prototype._buildNodeHooks=function(t,e,n,r,o){var s=this;void 0===r&&(r=function(t){return{}});var u=this._matchingHooks(t,this.treeChanges);if(!u)return[];var c=function(n){var u=n.matches(s.treeChanges),c=u[e];return c.map(function(e){var u=i.extend({bind:n.bind,traceData:{hookType:t,context:e}},s.baseHookOptions,o),c=new a.TransitionHook(n.callback,r(e),e.resolveContext,u);return{hook:n,node:e,transitionHook:c}})};return u.map(c).reduce(i.unnestR,[]).sort(n).map(function(t){return t.transitionHook})},t.prototype._matchingHooks=function(t,e){return[this.transition,this.$transitions].map(function(e){return e.getHooks(t)}).filter(i.assertPredicate(o.isArray,"broken event named: "+t)).reduce(i.unnestR,[]).filter(function(t){return t.matches(e)})},t}();e.HookBuilder=s},function(t,e,n){"use strict";function r(t,e){function n(t){for(var e=r,n=0;n<e.length;n++){var i=s.Glob.fromString(e[n]);if(i&&i.matches(t.name)||!i&&e[n]===t.name)return!0}return!1}var r=a.isString(e)?[e]:e,i=a.isFunction(r)?r:n;return!!i(t)}function i(t,e){return function(n,r,i){void 0===i&&(i={});var a=new u(n,r,i);return t[e].push(a),function(){o.removeFrom(t[e])(a)}}}var o=n(3),a=n(4),s=n(7);e.matchState=r;var u=function(){function t(t,e,n){void 0===n&&(n={}),this.callback=e,this.matchCriteria=o.extend({to:!0,from:!0,exiting:!0,retained:!0,entering:!0},t),this.priority=n.priority||0,this.bind=n.bind||null}return t._matchingNodes=function(t,e){if(e===!0)return t;var n=t.filter(function(t){return r(t.state,e)});return n.length?n:null},t.prototype.matches=function(e){var n=this.matchCriteria,r=t._matchingNodes,i={to:r([o.tail(e.to)],n.to),from:r([o.tail(e.from)],n.from),exiting:r(e.exiting,n.exiting),retained:r(e.retained,n.retained),entering:r(e.entering,n.entering)},a=["to","from","exiting","retained","entering"].map(function(t){return i[t]}).reduce(o.allTrueR,!0);return a?i:null},t}();e.EventHook=u;var c=function(){function t(){var t=this;this._transitionEvents={onBefore:[],onStart:[],onEnter:[],onRetain:[],onExit:[],onFinish:[],onSuccess:[],onError:[]},this.getHooks=function(e){return t._transitionEvents[e]},this.onBefore=i(this._transitionEvents,"onBefore"),this.onStart=i(this._transitionEvents,"onStart"),this.onEnter=i(this._transitionEvents,"onEnter"),this.onRetain=i(this._transitionEvents,"onRetain"),this.onExit=i(this._transitionEvents,"onExit"),this.onFinish=i(this._transitionEvents,"onFinish"),this.onSuccess=i(this._transitionEvents,"onSuccess"),this.onError=i(this._transitionEvents,"onError")}return t.mixin=function(t,e){Object.keys(t._transitionEvents).concat(["getHooks"]).forEach(function(n){return e[n]=t[n]})},t}();e.HookRegistry=c},function(t,e,n){"use strict";var r=n(3),i=n(9),o=n(4),a=n(5),s=n(12),u=n(6),c=n(10),l=n(17),f=new c.RejectFactory,p={async:!0,rejectIfSuperseded:!0,current:r.noop,transition:null,traceData:{},bind:null},h=function(){function t(t,e,n,i){var u=this;this.fn=t,this.locals=e,this.resolveContext=n,this.options=i,this.isSuperseded=function(){return u.options.current()!==u.options.transition},this.mapHookResult=a.pattern([[this.isSuperseded,function(){return f.superseded(u.options.current())}],[a.eq(!1),function(){return f.aborted("Hook aborted transition")}],[a.is(l.TargetState),function(t){return f.redirected(t)}],[o.isPromise,function(t){return t.then(u.handleHookResult.bind(u))}]]),this.invokeStep=function(t){var e=u,n=e.options,i=e.fn,o=e.resolveContext,a=r.extend({},u.locals,t);if(s.trace.traceHookInvocation(u,n),n.rejectIfSuperseded&&u.isSuperseded())return f.superseded(n.current());if(!n.async){var c=o.invokeNow(i,a,n);return u.handleHookResult(c)}return o.invokeLater(i,a,n).then(u.handleHookResult.bind(u))},this.options=r.defaults(i,p)}return t.prototype.handleHookResult=function(t){if(o.isDefined(t)){s.trace.traceHookResult(t,void 0,this.options);var e=this.mapHookResult(t);return e&&s.trace.traceHookResult(t,e,this.options),e}},t.prototype.toString=function(){var t=this,e=t.options,n=t.fn,r=a.parse("traceData.hookType")(e)||"internal",o=a.parse("traceData.context.state.name")(e)||a.parse("traceData.context")(e)||"unknown",s=i.fnToString(n);return r+" context: "+o+", "+i.maxLength(200,s)},t.runSynchronousHooks=function(e,n,r){void 0===n&&(n={}),void 0===r&&(r=!1);for(var i=[],s=0;s<e.length;s++)try{i.push(e[s].invokeStep(n))}catch(c){if(!r)return f.aborted(c);console.log("Swallowed exception during synchronous hook handler: "+c)}var l=i.filter(t.isRejection);return l.length?l[0]:i.filter(a.not(t.isRejection)).filter(o.isPromise).reduce(function(t,e){return t.then(a.val(e))},u.services.$q.when())},t.isRejection=function(t){return t&&t.reason instanceof c.TransitionRejection&&t},t}();e.TransitionHook=h},function(t,e,n){"use strict";function r(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}r(n(18)),r(n(19)),r(n(26)),r(n(33)),r(n(34)),r(n(35)),r(n(36)),r(n(37)),r(n(27))},function(t,e,n){"use strict";var r=n(4),i=n(3),o=function(){function t(e){this.stateRegistry=e,this.invalidCallbacks=[],i.bindFunctions(t.prototype,this,this)}return t.prototype.decorator=function(t,e){return this.stateRegistry.decorator(t,e)||this},t.prototype.state=function(t,e){return r.isObject(t)?e=t:e.name=t,this.stateRegistry.register(e),this},t.prototype.onInvalid=function(t){this.invalidCallbacks.push(t)},t}();e.StateProvider=o},function(t,e,n){"use strict";var r=n(3),i=n(4),o=n(5),a=n(20),s=function(t){if(!i.isString(t))return!1;var e="^"===t.charAt(0);return{val:e?t.substring(1):t,root:e}},u=function(){function t(t,e){this.matcher=t;var n=this,i=function(t){return""===t.name},u=function(){return t.find("")};this.builders={self:[function(t){return t.self.$$state=function(){return t},t.self}],parent:[function(e){return i(e)?null:t.find(n.parentName(e))||u()}],data:[function(t){return t.parent&&t.parent.data&&(t.data=t.self.data=r.inherit(t.parent.data,t.data)),t.data}],url:[function(t){var n=t,i=s(n.url),o=t.parent,a=i?e.compile(i.val,{params:t.params||{},paramMap:function(t,e){return n.reloadOnSearch===!1&&e&&(t=r.extend(t||{},{dynamic:!0})),t}}):n.url;if(!a)return null;if(!e.isMatcher(a))throw new Error("Invalid url '"+a+"' in state '"+t+"'");return i&&i.root?a:(o&&o.navigable||u()).url.append(a)}],navigable:[function(t){return!i(t)&&t.url?t:t.parent?t.parent.navigable:null}],params:[function(t){var e=function(t,e){return a.Param.fromConfig(e,null,t)},n=t.url&&t.url.parameters({inherit:!1})||[],i=r.values(r.map(r.omit(t.params||{},n.map(o.prop("id"))),e));return n.concat(i).map(function(t){return[t.id,t]}).reduce(r.applyPairs,{})}],views:[],path:[function(t){return t.parent?t.parent.path.concat(t):[t]}],includes:[function(t){var e=t.parent?r.extend({},t.parent.includes):{};return e[t.name]=!0,e}]}}return t.prototype.builder=function(t,e){var n=this.builders,r=n[t]||[];return i.isString(t)&&!i.isDefined(e)?r.length>1?r:r[0]:i.isString(t)&&i.isFunction(e)?(n[t]=r,n[t].push(e),function(){return n[t].splice(n[t].indexOf(e,1))&&null}):void 0},t.prototype.build=function(t){var e=this,n=e.matcher,i=e.builders,o=this.parentName(t);if(o&&!n.find(o))return null;for(var a in i)if(i.hasOwnProperty(a)){var s=i[a].reduce(function(t,e){return function(n){return e(n,t)}},r.noop);t[a]=s(t)}return t},t.prototype.parentName=function(t){var e=t.name||"";return-1!==e.indexOf(".")?e.substring(0,e.lastIndexOf(".")):t.parent?i.isString(t.parent)?t.parent:t.parent.name:""},t.prototype.name=function(t){var e=t.name;if(-1!==e.indexOf(".")||!t.parent)return e;var n=i.isString(t.parent)?t.parent:t.parent.name;return n?n+"."+e:e},t}();e.StateBuilder=u},function(t,e,n){"use strict";function r(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}r(n(21)),r(n(24)),r(n(25)),r(n(23))},function(t,e,n){"use strict";function r(t){return t=v(t)&&{value:t}||t,s.extend(t,{$$fn:c.isInjectable(t.value)?t.value:function(){return t.value}})}function i(t,e,n,r){if(t.type&&e&&"string"!==e.name)throw new Error("Param '"+r+"' has two type configurations.");return t.type&&e&&"string"===e.name&&h.paramTypes.type(t.type)?h.paramTypes.type(t.type):e?e:t.type?t.type instanceof p.Type?t.type:h.paramTypes.type(t.type):n===g.CONFIG?h.paramTypes.type("any"):h.paramTypes.type("string")}function o(t,e){var n=t.squash;if(!e||n===!1)return!1;if(!c.isDefined(n)||null==n)return f.matcherConfig.defaultSquashPolicy();if(n===!0||c.isString(n))return n;throw new Error("Invalid squash policy: '"+n+"'. Valid policies: false, true, or arbitrary string")}function a(t,e,n,r){var i,o,a=[{from:"",to:n||e?void 0:""},{from:null,to:n||e?void 0:""}];return i=c.isArray(t.replace)?t.replace:[],c.isString(r)&&i.push({from:r,to:void 0}),o=s.map(i,u.prop("from")),s.filter(a,function(t){return-1===o.indexOf(t.from)}).concat(i)}var s=n(3),u=n(5),c=n(4),l=n(6),f=n(22),p=n(23),h=n(24),d=Object.prototype.hasOwnProperty,v=function(t){return 0===["value","type","squash","array","dynamic"].filter(d.bind(t||{})).length};!function(t){t[t.PATH=0]="PATH",t[t.SEARCH=1]="SEARCH",t[t.CONFIG=2]="CONFIG"}(e.DefType||(e.DefType={}));var g=e.DefType,m=function(){function t(t,e,n,u){function c(){var e={array:u===g.SEARCH?"auto":!1},r=t.match(/\[\]$/)?{array:!0}:{};return s.extend(e,r,n).array}n=r(n),e=i(n,e,u,t);var l=c();e=l?e.$asArray(l,u===g.SEARCH):e;var f=void 0!==n.value,p=n.dynamic===!0,h=o(n,f),d=a(n,l,f,h);s.extend(this,{id:t,type:e,location:u,squash:h,replace:d,isOptional:f,dynamic:p,config:n,array:l})}return t.prototype.isDefaultValue=function(t){return this.isOptional&&this.type.equals(this.value(),t)},t.prototype.value=function(t){var e=this,n=function(){if(!l.services.$injector)throw new Error("Injectable functions cannot be called at configuration time");var t=l.services.$injector.invoke(e.config.$$fn);if(null!==t&&void 0!==t&&!e.type.is(t))throw new Error("Default value ("+t+") for parameter '"+e.id+"' is not an instance of Type ("+e.type.name+")");return t},r=function(t){var n=s.map(s.filter(e.replace,u.propEq("from",t)),u.prop("to"));return n.length?n[0]:t};return t=r(t),c.isDefined(t)?this.type.$normalize(t):n()},t.prototype.isSearch=function(){return this.location===g.SEARCH},t.prototype.validates=function(t){if((!c.isDefined(t)||null===t)&&this.isOptional)return!0;var e=this.type.$normalize(t);if(!this.type.is(e))return!1;var n=this.type.encode(e);return!(c.isString(n)&&!this.type.pattern.exec(n))},t.prototype.toString=function(){return"{Param:"+this.id+" "+this.type+" squash: '"+this.squash+"' optional: "+this.isOptional+"}"},t.fromConfig=function(e,n,r){return new t(e,n,r,g.CONFIG)},t.fromPath=function(e,n,r){return new t(e,n,r,g.PATH)},t.fromSearch=function(e,n,r){return new t(e,n,r,g.SEARCH)},t.values=function(t,e){return void 0===e&&(e={}),t.map(function(t){return[t.id,t.value(e[t.id])]}).reduce(s.applyPairs,{})},t.changed=function(t,e,n){return void 0===e&&(e={}),void 0===n&&(n={}),t.filter(function(t){return!t.type.equals(e[t.id],n[t.id])})},t.equals=function(e,n,r){return void 0===n&&(n={}),void 0===r&&(r={}),0===t.changed(e,n,r).length},t.validates=function(t,e){return void 0===e&&(e={}),t.map(function(t){return t.validates(e[t.id])}).reduce(s.allTrueR,!0)},t}();e.Param=m},function(t,e,n){"use strict";var r=n(4),i=function(){function t(){this._isCaseInsensitive=!1,this._isStrictMode=!0,this._defaultSquashPolicy=!1}return t.prototype.caseInsensitive=function(t){return this._isCaseInsensitive=r.isDefined(t)?t:this._isCaseInsensitive},t.prototype.strictMode=function(t){return this._isStrictMode=r.isDefined(t)?t:this._isStrictMode},t.prototype.defaultSquashPolicy=function(t){if(r.isDefined(t)&&t!==!0&&t!==!1&&!r.isString(t))throw new Error("Invalid squash policy: "+t+". Valid policies: false, true, arbitrary-string");return this._defaultSquashPolicy=r.isDefined(t)?t:this._defaultSquashPolicy},t}();e.MatcherConfig=i,e.matcherConfig=new i},function(t,e,n){"use strict";function r(t,e){function n(t){return o.isArray(t)?t:o.isDefined(t)?[t]:[]}function r(t){switch(t.length){case 0:return;case 1:return"auto"===e?t[0]:t;default:return t}}function a(t,e){return function(a){if(o.isArray(a)&&0===a.length)return a;var s=n(a),u=i.map(s,t);return e===!0?0===i.filter(u,function(t){return!t}).length:r(u)}}function s(t){return function(e,r){var i=n(e),o=n(r);if(i.length!==o.length)return!1;for(var a=0;a<i.length;a++)if(!t(i[a],o[a]))return!1;return!0}}var u=this;["encode","decode","equals","$normalize"].map(function(e){u[e]=("equals"===e?s:a)(t[e].bind(t))}),i.extend(this,{name:t.name,pattern:t.pattern,is:a(t.is.bind(t),!0),$arrayMode:e})}var i=n(3),o=n(4),a=function(){function t(t){this.pattern=/.*/,i.extend(this,t)}return t.prototype.is=function(t,e){return!0},t.prototype.encode=function(t,e){return t},t.prototype.decode=function(t,e){return t},t.prototype.equals=function(t,e){return t==e},t.prototype.$subPattern=function(){var t=this.pattern.toString();return t.substr(1,t.length-2)},t.prototype.toString=function(){return"{Type:"+this.name+"}"},t.prototype.$normalize=function(t){return this.is(t)?t:this.decode(t)},t.prototype.$asArray=function(t,e){if(!t)return this;if("auto"===t&&!e)throw new Error("'auto' array mode is for query parameters only");return new r(this,t)},t}();e.Type=a},function(t,e,n){"use strict";function r(t){return null!=t?t.toString().replace(/~/g,"~~").replace(/\//g,"~2F"):t}function i(t){return null!=t?t.toString().replace(/~2F/g,"/").replace(/~~/g,"~"):t}var o=n(3),a=n(4),s=n(5),u=n(6),c=n(23),l=function(){function t(){this.enqueue=!0,this.typeQueue=[],this.defaultTypes={hash:{encode:r,decode:i,is:s.is(String),pattern:/.*/,equals:s.val(!0)},string:{encode:r,decode:i,is:s.is(String),pattern:/[^\/]*/},"int":{encode:r,decode:function(t){return parseInt(t,10)},is:function(t){return a.isDefined(t)&&this.decode(t.toString())===t},pattern:/-?\d+/},bool:{encode:function(t){return t&&1||0},decode:function(t){return 0!==parseInt(t,10)},is:s.is(Boolean),pattern:/0|1/},date:{encode:function(t){return this.is(t)?[t.getFullYear(),("0"+(t.getMonth()+1)).slice(-2),("0"+t.getDate()).slice(-2)].join("-"):void 0},decode:function(t){if(this.is(t))return t;var e=this.capture.exec(t);return e?new Date(e[1],e[2]-1,e[3]):void 0},is:function(t){return t instanceof Date&&!isNaN(t.valueOf())},equals:function(t,e){return["getFullYear","getMonth","getDate"].reduce(function(n,r){return n&&t[r]()===e[r]()},!0)},pattern:/[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,capture:/([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/},json:{encode:o.toJson,decode:o.fromJson,is:s.is(Object),equals:o.equals,pattern:/[^\/]*/},any:{encode:o.identity,decode:o.identity,equals:o.equals,pattern:/.*/}};var t=function(t,e){return new c.Type(o.extend({name:e},t))};this.types=o.inherit(o.map(this.defaultTypes,t),{})}return t.prototype.type=function(t,e,n){if(!a.isDefined(e))return this.types[t];if(this.types.hasOwnProperty(t))throw new Error("A type named '"+t+"' has already been defined.");return this.types[t]=new c.Type(o.extend({name:t},e)),n&&(this.typeQueue.push({name:t,def:n}),this.enqueue||this._flushTypeQueue()),this},t.prototype._flushTypeQueue=function(){for(;this.typeQueue.length;){var t=this.typeQueue.shift();if(t.pattern)throw new Error("You cannot override a type's .pattern at runtime.");o.extend(this.types[t.name],u.services.$injector.invoke(t.def))}},t}();e.ParamTypes=l,e.paramTypes=new l},function(t,e,n){"use strict";var r=n(3),i=function(){function t(t){void 0===t&&(t={}),r.extend(this,t)}return t.prototype.$inherit=function(t,e,n){var i,o=r.ancestors(e,n),a={},s=[];for(var u in o)if(o[u]&&o[u].params&&(i=Object.keys(o[u].params),i.length))for(var c in i)s.indexOf(i[c])>=0||(s.push(i[c]),a[i[c]]=this[i[c]]);return r.extend({},a,t)},t}();e.StateParams=i},function(t,e,n){"use strict";var r=n(5),i=n(21),o=n(10),a=n(27),s=n(28),u=n(29),c=n(30),l=n(6),f=function(){function t(t,e,n,r,i,o){this.transition=t,this.$transitions=e,this.$urlRouter=n,this.$view=r,this.$state=i,this.globals=o,this.$q=l.services.$q,this.viewHooks=new s.ViewHooks(t,r),this.enterExitHooks=new u.EnterExitHooks(t),this.resolveHooks=new c.ResolveHooks(t),this.treeChanges=t.treeChanges(),this.registerUpdateGlobalState(),this.viewHooks.registerHooks(),this.enterExitHooks.registerHooks(),this.resolveHooks.registerHooks()}return t.prototype.runTransition=function(){var t=this;return this.globals.transitionHistory.enqueue(this.transition),this.transition.run().then(function(t){return t.to()})["catch"](function(e){return t.transRejected(e)})},t.prototype.registerUpdateGlobalState=function(){this.transition.onSuccess({},this.updateUrl.bind(this),{priority:9999})},t.prototype.transRejected=function(t){var e=this,n=e.transition,s=e.$state,u=e.$q;if(t instanceof o.TransitionRejection){if(t.type===o.RejectType.IGNORED){var c=s.$current.parameters().filter(r.prop("dynamic"));return i.Param.equals(c,s.params,n.params())||this.updateUrl(),s.current}if(t.type===o.RejectType.SUPERSEDED&&t.redirected&&t.detail instanceof a.TargetState)return this._redirectMgr(n.redirect(t.detail)).runTransition();t.type===o.RejectType.ABORTED&&this.$urlRouter.update()}return this.$transitions.defaultErrorHandler()(t),
u.reject(t)},t.prototype.updateUrl=function(){var t=this.transition,e=this,n=e.$urlRouter,r=e.$state,i=t.options();t.$to();i.location&&r.$current.navigable&&n.push(r.$current.navigable.url,r.params,{replace:"replace"===i.location}),n.update(!0)},t.prototype._redirectMgr=function(e){var n=this,r=n.$transitions,i=n.$urlRouter,o=n.$view,a=n.$state,s=n.globals;return new t(e,r,i,o,a,s)},t}();e.TransitionManager=f},function(t,e){"use strict";var n=function(){function t(t,e,n,r){void 0===n&&(n={}),void 0===r&&(r={}),this._identifier=t,this._definition=e,this._options=r,this._params=n||{}}return t.prototype.name=function(){return this._definition&&this._definition.name||this._identifier},t.prototype.identifier=function(){return this._identifier},t.prototype.params=function(){return this._params},t.prototype.$state=function(){return this._definition},t.prototype.state=function(){return this._definition&&this._definition.self},t.prototype.options=function(){return this._options},t.prototype.exists=function(){return!(!this._definition||!this._definition.self)},t.prototype.valid=function(){return!this.error()},t.prototype.error=function(){var t=this.options().relative;if(!this._definition&&t){var e=t.name?t.name:t;return"Could not resolve '"+this.name()+"' from state '"+e+"'"}return this._definition?this._definition.self?void 0:"State '"+this.name()+"' has an invalid definition":"No such state '"+this.name()+"'"},t}();e.TargetState=n},function(t,e,n){"use strict";var r=n(3),i=n(6),o=function(){function t(t,e){this.transition=t,this.$view=e,this.treeChanges=t.treeChanges(),this.enteringViews=t.views("entering"),this.exitingViews=t.views("exiting")}return t.prototype.loadAllEnteringViews=function(){return i.services.$q.all(this.enteringViews.map(function(t){return t.load()})).then(r.noop)},t.prototype.updateViews=function(){var t=this.$view;this.exitingViews.forEach(function(e){return t.deactivateViewConfig(e)}),this.enteringViews.forEach(function(e){return t.activateViewConfig(e)}),t.sync()},t.prototype.registerHooks=function(){this.enteringViews.length&&this.transition.onStart({},this.loadAllEnteringViews.bind(this)),(this.exitingViews.length||this.enteringViews.length)&&this.transition.onSuccess({},this.updateViews.bind(this))},t}();e.ViewHooks=o},function(t,e){"use strict";var n=function(){function t(t){this.transition=t}return t.prototype.registerHooks=function(){this.registerOnEnterHooks(),this.registerOnRetainHooks(),this.registerOnExitHooks()},t.prototype.registerOnEnterHooks=function(){var t=this;this.transition.entering().filter(function(t){return!!t.onEnter}).forEach(function(e){return t.transition.onEnter({entering:e.name},e.onEnter)})},t.prototype.registerOnRetainHooks=function(){var t=this;this.transition.retained().filter(function(t){return!!t.onRetain}).forEach(function(e){return t.transition.onRetain({retained:e.name},e.onRetain)})},t.prototype.registerOnExitHooks=function(){var t=this;this.transition.exiting().filter(function(t){return!!t.onExit}).forEach(function(e){return t.transition.onExit({exiting:e.name},e.onExit)})},t}();e.EnterExitHooks=n},function(t,e,n){"use strict";var r=n(3),i=n(5),o=n(31),a=n(5),s=n(32),u=o.ResolvePolicy[o.ResolvePolicy.LAZY],c=o.ResolvePolicy[o.ResolvePolicy.EAGER],l=function(){function t(t){this.transition=t}return t.prototype.registerHooks=function(){function t(t){return r.tail(n.to).resolveContext.resolvePath(r.extend({transition:t},{resolvePolicy:c}))}function e(t,e){var o=r.find(n.entering,i.propEq("state",t)),a=o.resolveContext,c=new s.Resolvable("$resolve$",function(){return r.map(a.getResolvables(),function(t){return t.data})}),l=r.extend({transition:e},{resolvePolicy:u});return a.resolvePathElement(o.state,l).then(function(){return c.resolveResolvable(a)}).then(function(){return a.addResolvables({$resolve$:c},o.state)})}var n=this.transition.treeChanges();t.$inject=["$transition$"],e.$inject=["$state$","$transition$"],this.transition.onStart({},t,{priority:1e3}),this.transition.onEnter({entering:a.val(!0)},e,{priority:1e3})},t}();e.ResolveHooks=l},function(t,e){"use strict";!function(t){t[t.JIT=0]="JIT",t[t.LAZY=1]="LAZY",t[t.EAGER=2]="EAGER"}(e.ResolvePolicy||(e.ResolvePolicy={}));e.ResolvePolicy},function(t,e,n){"use strict";var r=n(3),i=n(5),o=n(4),a=n(6),s=n(12),u=function(){function t(t,e,n){this.promise=void 0,r.extend(this,{name:t,resolveFn:e,deps:a.services.$injector.annotate(e,a.services.$injector.strictDi),data:n})}return t.prototype.resolveResolvable=function(t,e){var n=this;void 0===e&&(e={});var i=this,o=i.name,u=i.deps,c=i.resolveFn;s.trace.traceResolveResolvable(this,e);var l=a.services.$q.defer();this.promise=l.promise;var f=t.getResolvables(null,{omitOwnLocals:[o]}),p=r.pick(f,u),h=r.map(p,function(n){return n.get(t,e)});return a.services.$q.all(h).then(function(t){try{var e=a.services.$injector.invoke(c,null,t);l.resolve(e)}catch(r){l.reject(r)}return n.promise}).then(function(t){return n.data=t,s.trace.traceResolvableResolved(n,e),n.promise})},t.prototype.get=function(t,e){return this.promise||this.resolveResolvable(t,e)},t.prototype.toString=function(){return"Resolvable(name: "+this.name+", requires: ["+this.deps+"])"},t.makeResolvables=function(e){var n=r.filter(e,i.not(o.isInjectable)),a=Object.keys(n);if(a.length)throw new Error("Invalid resolve key/value: "+a[0]+"/"+n[a[0]]);return r.map(e,function(e,n){return new t(n,e)})},t}();e.Resolvable=u},function(t,e,n){"use strict";var r=n(3),i=n(5),o=function(){function t(t){r.extend(this,t)}return t.prototype.is=function(t){return this===t||this.self===t||this.fqn()===t},t.prototype.fqn=function(){if(!(this.parent&&this.parent instanceof this.constructor))return this.name;var t=this.parent.fqn();return t?t+"."+this.name:this.name},t.prototype.root=function(){return this.parent&&this.parent.root()||this},t.prototype.parameters=function(t){t=r.defaults(t,{inherit:!0});var e=t.inherit&&this.parent&&this.parent.parameters()||[];return e.concat(r.values(this.params))},t.prototype.parameter=function(t,e){return void 0===e&&(e={}),this.url&&this.url.parameter(t,e)||r.find(r.values(this.params),i.propEq("id",t))||e.inherit&&this.parent&&this.parent.parameter(t)},t.prototype.toString=function(){return this.fqn()},t}();e.State=o},function(t,e,n){"use strict";var r=n(4),i=function(){function t(t){this._states=t}return t.prototype.isRelative=function(t){return t=t||"",0===t.indexOf(".")||0===t.indexOf("^")},t.prototype.find=function(t,e){if(t||""===t){var n=r.isString(t),i=n?t:t.name;this.isRelative(i)&&(i=this.resolvePath(i,e));var o=this._states[i];return!o||!n&&(n||o!==t&&o.self!==t)?void 0:o}},t.prototype.resolvePath=function(t,e){if(!e)throw new Error("No reference point given for path '"+t+"'");for(var n=this.find(e),r=t.split("."),i=0,o=r.length,a=n;o>i;i++)if(""!==r[i]||0!==i){if("^"!==r[i])break;if(!a.parent)throw new Error("Path '"+t+"' not valid for state '"+n.name+"'");a=a.parent}else a=n;var s=r.slice(i).join(".");return a.name+(a.name&&s?".":"")+s},t}();e.StateMatcher=i},function(t,e,n){"use strict";var r=n(3),i=n(4),o=n(17),a=function(){function t(t,e,n){this.states=t,this.builder=e,this.$urlRouterProvider=n,this.queue=[]}return t.prototype.register=function(t){var e=this,n=e.states,a=e.queue,s=e.$state,u=r.inherit(new o.State,r.extend({},t,{self:t,resolve:t.resolve||{},toString:function(){return t.name}}));if(!i.isString(u.name))throw new Error("State must have a valid name");if(n.hasOwnProperty(u.name)||-1!==r.pluck(a,"name").indexOf(u.name))throw new Error("State '"+u.name+"' is already defined");return a.push(u),this.$state&&this.flush(s),u},t.prototype.flush=function(t){for(var e,n,r,i=this,o=i.queue,a=i.states,s=i.builder,u=[],c={};o.length>0;)if(n=o.shift(),e=s.build(n),r=u.indexOf(n),e){if(a.hasOwnProperty(n.name))throw new Error("State '"+name+"' is already defined");a[n.name]=n,this.attachRoute(t,n),r>=0&&u.splice(r,1)}else{var l=c[n.name];if(c[n.name]=o.length,r>=0&&l===o.length)throw new Error("Cannot register orphaned state '"+n.name+"'");0>r&&u.push(n),o.push(n)}return a},t.prototype.autoFlush=function(t){this.$state=t,this.flush(t)},t.prototype.attachRoute=function(t,e){var n=this.$urlRouterProvider;!e[r.abstractKey]&&e.url&&n.when(e.url,["$match","$stateParams",function(n,i){t.$current.navigable===e&&r.equalForKeys(n,i)||t.transitionTo(e,n,{inherit:!0})}])},t}();e.StateQueueManager=a},function(t,e,n){"use strict";var r=n(34),i=n(19),o=n(35),a=function(){function t(t,e){this.states={},this.matcher=new r.StateMatcher(this.states),this.builder=new i.StateBuilder(this.matcher,t),this.stateQueue=new o.StateQueueManager(this.states,this.builder,e);var n={name:"",url:"^",views:null,params:{"#":{value:null,type:"hash"}},"abstract":!0},a=this._root=this.stateQueue.register(n);a.navigable=null}return t.prototype.root=function(){return this._root},t.prototype.register=function(t){return this.stateQueue.register(t)},t.prototype.get=function(t,e){var n=this;if(0===arguments.length)return Object.keys(this.states).map(function(t){return n.states[t].self});var r=this.matcher.find(t,e);return r&&r.self||null},t.prototype.decorator=function(t,e){return this.builder.builder(t,e)},t}();e.StateRegistry=a},function(t,e,n){"use strict";var r=n(3),i=n(4),o=n(8),a=n(6),s=n(38),u=n(39),c=n(43),l=n(10),f=n(27),p=n(26),h=n(21),d=n(7),v=n(3),g=n(3),m=function(){function t(e,n,r,i,o,a){this.$view=e,this.$urlRouter=n,this.$transitions=r,this.stateRegistry=i,this.stateProvider=o,this.globals=a,this.rejectFactory=new l.RejectFactory;var s=["current","$current","params","transition"],u=Object.keys(t.prototype).filter(function(t){return-1===s.indexOf(t)});g.bindFunctions(t.prototype,this,this,u)}return Object.defineProperty(t.prototype,"transition",{get:function(){return this.globals.transition},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"params",{get:function(){return this.globals.params},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"current",{get:function(){return this.globals.current},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"$current",{get:function(){return this.globals.$current},enumerable:!0,configurable:!0}),t.prototype._handleInvalidTargetState=function(t,e){function n(){var t=l.dequeue();return void 0===t?p.invalid(e.error()):v(t).then(g).then(function(t){return t||n()})}var r=this,i=function(){return r.globals.transitionHistory.peekTail()},u=i(),c=s.PathFactory.makeTargetState(t),l=new o.Queue([].concat(this.stateProvider.invalidCallbacks)),p=this.rejectFactory,h=a.services.$q,d=a.services.$injector,v=function(t){return h.when(d.invoke(t,null,{$to$:e,$from$:c}))},g=function(t){if(t instanceof f.TargetState){var e=t;return e=r.target(e.identifier(),e.params(),e.options()),e.valid()?i()!==u?p.superseded():r.transitionTo(e.identifier(),e.params(),e.options()):p.invalid(e.error())}};return n()},t.prototype.reload=function(t){return this.transitionTo(this.current,this.params,{reload:i.isDefined(t)?t:!0,inherit:!1,notify:!1})},t.prototype.go=function(t,e,n){var i={relative:this.$current,inherit:!0},o=r.defaults(n,i,c.defaultTransOpts);return this.transitionTo(t,e,o)},t.prototype.target=function(t,e,n){if(void 0===n&&(n={}),i.isObject(n.reload)&&!n.reload.name)throw new Error("Invalid reload state object");if(n.reloadState=n.reload===!0?this.stateRegistry.root():this.stateRegistry.matcher.find(n.reload,n.relative),n.reload&&!n.reloadState)throw new Error("No such reload state '"+(i.isString(n.reload)?n.reload:n.reload.name)+"'");var r=this.stateRegistry.matcher.find(t,n.relative);return new f.TargetState(t,r,e,n)},t.prototype.transitionTo=function(t,e,n){var i=this;void 0===e&&(e={}),void 0===n&&(n={});var o=this.globals.transitionHistory;n=r.defaults(n,c.defaultTransOpts),n=r.extend(n,{current:o.peekTail.bind(o)});var l=this.target(t,e,n),f=this.globals.successfulTransitions.peekTail(),h=function(){return s.PathFactory.bindTransNodesToPath([new u.Node(i.stateRegistry.root())])},d=f?f.treeChanges().to:h();if(!l.exists())return this._handleInvalidTargetState(d,l);if(!l.valid())return a.services.$q.reject(l.error());var v=this.$transitions.create(d,l),g=new p.TransitionManager(v,this.$transitions,this.$urlRouter,this.$view,this,this.globals),m=g.runTransition();return r.extend(m,{transition:v})},t.prototype.is=function(t,e,n){n=r.defaults(n,{relative:this.$current});var o=this.stateRegistry.matcher.find(t,n.relative);if(i.isDefined(o))return this.$current!==o?!1:i.isDefined(e)&&null!==e?h.Param.equals(o.parameters(),this.params,e):!0},t.prototype.includes=function(t,e,n){n=r.defaults(n,{relative:this.$current});var o=i.isString(t)&&d.Glob.fromString(t);if(o){if(!o.matches(this.$current.name))return!1;t=this.$current.name}var a=this.stateRegistry.matcher.find(t,n.relative),s=this.$current.includes;if(i.isDefined(a))return i.isDefined(s[a.name])?e?v.equalForKeys(h.Param.values(a.parameters(),e),this.params,Object.keys(e)):!0:!1},t.prototype.href=function(t,e,n){var o={lossy:!0,inherit:!0,absolute:!1,relative:this.$current};n=r.defaults(n,o);var a=this.stateRegistry.matcher.find(t,n.relative);if(!i.isDefined(a))return null;n.inherit&&(e=this.params.$inherit(e||{},this.$current,a));var s=a&&n.lossy?a.navigable:a;return s&&void 0!==s.url&&null!==s.url?this.$urlRouter.href(s.url,h.Param.values(a.parameters(),e),{absolute:n.absolute}):null},t.prototype.get=function(t,e){return 0===arguments.length?this.stateRegistry.get():this.stateRegistry.get(t,e||this.$current)},t}();e.StateService=m},function(t,e,n){"use strict";var r=n(3),i=n(5),o=n(17),a=n(39),s=n(40),u=function(){function t(){}return t.makeTargetState=function(t){var e=r.tail(t).state;return new o.TargetState(e,e,t.map(i.prop("paramValues")).reduce(r.mergeR,{}))},t.buildPath=function(t){var e=t.params();return t.$state().path.map(function(t){return new a.Node(t).applyRawParams(e)})},t.buildToPath=function(e,n){var r=t.buildPath(n);return n.options().inherit?t.inheritParams(e,r,Object.keys(n.params())):r},t.applyViewConfigs=function(t,e){return e.map(function(e){return r.extend(e,{views:r.values(e.state.views||{}).map(function(n){return t.createViewConfig(e,n)})})})},t.inheritParams=function(t,e,n){function o(t,e){var n=r.find(t,i.propEq("state",e));return r.extend({},n&&n.paramValues)}void 0===n&&(n=[]);var s=i.curry(function(t,e,n){var i=r.extend({},n&&n.paramValues),s=r.pick(i,e);i=r.omit(i,e);var u=o(t,n.state)||{},c=r.extend(i,u,s);return new a.Node(n.state).applyRawParams(c)});return e.map(s(t,n))},t.bindTransNodesToPath=function(t){var e=new s.ResolveContext(t);return t.forEach(function(t){t.resolveContext=e.isolateRootTo(t.state),t.resolveInjector=new s.ResolveInjector(t.resolveContext,t.state),t.resolves.$stateParams=new s.Resolvable("$stateParams",function(){return t.paramValues},t.paramValues)}),t},t.treeChanges=function(e,n,r){function o(t,e){var r=a.Node.clone(t);return r.paramValues=n[e].paramValues,r}for(var s=0,u=Math.min(e.length,n.length),c=function(t){return t.parameters({inherit:!1}).filter(i.not(i.prop("dynamic"))).map(i.prop("id"))},l=function(t,e){return t.equals(e,c(t.state))};u>s&&e[s].state!==r&&l(e[s],n[s]);)s++;var f,p,h,d,v,g,m,$;return f=e,p=f.slice(0,s),h=f.slice(s),g=p.map(o),m=n.slice(s),$=g.concat(m),v=t.bindTransNodesToPath($),d=v.slice(s),{from:f,to:v,retained:p,exiting:h,entering:d}},t.bindTransitionResolve=function(t,e){var n=t.to[0];n.resolves.$transition$=new s.Resolvable("$transition$",function(){return e},e)},t.subPath=function(t,e){var n=r.find(t,function(t){return t.state===e}),i=t.indexOf(n);if(-1===i)throw new Error("The path does not contain the state: "+e);return t.slice(0,i+1)},t.paramValues=function(t){return t.reduce(function(t,e){return r.extend(t,e.paramValues)},{})},t}();e.PathFactory=u},function(t,e,n){"use strict";var r=n(3),i=n(5),o=n(40),a=function(){function t(e){if(e instanceof t){var n=e;this.state=n.state,this.paramSchema=n.paramSchema.slice(),this.paramValues=r.extend({},n.paramValues),this.resolves=r.extend({},n.resolves),this.views=n.views&&n.views.slice(),this.resolveContext=n.resolveContext,this.resolveInjector=n.resolveInjector}else this.state=e,this.paramSchema=e.parameters({inherit:!1}),this.paramValues={},this.resolves=r.mapObj(e.resolve,function(t,e){return new o.Resolvable(e,t)})}return t.prototype.applyRawParams=function(t){var e=function(e){return[e.id,e.value(t[e.id])]};return this.paramValues=this.paramSchema.reduce(function(t,n){return r.applyPairs(t,e(n))},{}),this},t.prototype.parameter=function(t){return r.find(this.paramSchema,i.propEq("id",t))},t.prototype.equals=function(t,e){var n=this;void 0===e&&(e=this.paramSchema.map(i.prop("id")));var o=function(e){return n.parameter(e).type.equals(n.paramValues[e],t.paramValues[e])};return this.state===t.state&&e.map(o).reduce(r.allTrueR,!0)},t.clone=function(e){return new t(e)},t.matching=function(t,e){var n=t.reduce(function(t,n,r){return t===r&&r<e.length&&n.state===e[r].state?r+1:t},0);return t.slice(0,n)},t}();e.Node=a},function(t,e,n){"use strict";function r(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}r(n(31)),r(n(32)),r(n(41)),r(n(42))},function(t,e,n){"use strict";function r(t,e){var n=a.isString(t)?t:null,r=a.isObject(t)?t:{},i=r[e.name]||n||p;return c.ResolvePolicy[i]}var i=n(3),o=n(5),a=n(4),s=n(12),u=n(6),c=n(31),l=n(3),f=n(38),p=c.ResolvePolicy[c.ResolvePolicy.LAZY],h=function(){function t(t){this._path=t,i.extend(this,{_nodeFor:function(t){return i.find(this._path,o.propEq("state",t))},_pathTo:function(t){return f.PathFactory.subPath(this._path,t)}})}return t.prototype.getResolvables=function(t,e){e=i.defaults(e,{omitOwnLocals:[]});var n=t?this._pathTo(t):this._path,r=i.tail(n);return n.reduce(function(t,n){var o=n===r?e.omitOwnLocals:[],a=i.omit(n.resolves,o);return i.extend(t,a)},{})},t.prototype.getResolvablesForFn=function(t){var e=u.services.$injector.annotate(t,u.services.$injector.strictDi);return i.pick(this.getResolvables(),e)},t.prototype.isolateRootTo=function(e){return new t(this._pathTo(e))},t.prototype.addResolvables=function(t,e){i.extend(this._nodeFor(e).resolves,t)},t.prototype.getOwnResolvables=function(t){return i.extend({},this._nodeFor(t).resolves)},t.prototype.resolvePath=function(t){var e=this;void 0===t&&(t={}),s.trace.traceResolvePath(this._path,t);var n=function(n){return e.resolvePathElement(n.state,t)};return u.services.$q.all(i.map(this._path,n)).then(function(t){return t.reduce(l.mergeR,{})})},t.prototype.resolvePathElement=function(t,e){var n=this;void 0===e&&(e={});var o=e&&e.resolvePolicy,a=c.ResolvePolicy[o||p],l=this.getOwnResolvables(t),f=function(e){return r(t.resolvePolicy,e)>=a},h=i.filter(l,f),d=function(r){return r.get(n.isolateRootTo(t),e)},v=i.map(h,d);return s.trace.traceResolvePathElement(this,h,e),u.services.$q.all(v)},t.prototype.invokeLater=function(t,e,n){var r=this;void 0===e&&(e={}),void 0===n&&(n={});var o=this.getResolvablesForFn(t);s.trace.tracePathElementInvoke(i.tail(this._path),t,Object.keys(o),i.extend({when:"Later"},n));var a=function(t){return t.get(r,n)},c=i.map(o,a);return u.services.$q.all(c).then(function(){try{return r.invokeNow(t,e,n)}catch(i){return u.services.$q.reject(i)}})},t.prototype.invokeNow=function(t,e,n){void 0===n&&(n={});var r=this.getResolvablesForFn(t);s.trace.tracePathElementInvoke(i.tail(this._path),t,Object.keys(r),i.extend({when:"Now  "},n));var a=i.map(r,o.prop("data"));return u.services.$injector.invoke(t,n.bind||null,i.extend({},e,a))},t}();e.ResolveContext=h},function(t,e,n){"use strict";var r=n(3),i=function(){function t(t,e){this._resolveContext=t,this._state=e}return t.prototype.invokeLater=function(t,e){return this._resolveContext.invokeLater(t,e)},t.prototype.invokeNow=function(t,e){return this._resolveContext.invokeNow(null,t,e)},t.prototype.getLocals=function(t){var e=this,n=function(t){return t.get(e._resolveContext)};return r.map(this._resolveContext.getResolvablesForFn(t),n)},t}();e.ResolveInjector=i},function(t,e,n){"use strict";var r=n(11),i=n(15);e.defaultTransOpts={location:!0,relative:null,inherit:!1,notify:!0,reload:!1,custom:{},current:function(){return null}};var o=function(){function t(t){this.$view=t,this._defaultErrorHandler=function(t){t instanceof Error&&console.error(t)},i.HookRegistry.mixin(new i.HookRegistry,this)}return t.prototype.defaultErrorHandler=function(t){return this._defaultErrorHandler=t||this._defaultErrorHandler},t.prototype.create=function(t,e){return new r.Transition(t,e,this)},t}();e.TransitionService=o},function(t,e,n){"use strict";function r(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}r(n(39)),r(n(38))},function(t,e,n){"use strict";function r(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}r(n(46)),r(n(22)),r(n(47)),r(n(48))},function(t,e,n){"use strict";function r(t,e){var n=["",""],r=t.replace(/[\\\[\]\^$*+?.()|{}]/g,"\\$&");if(!e)return r;switch(e.squash){case!1:n=["(",")"+(e.isOptional?"?":"")];break;case!0:r=r.replace(/\/$/,""),n=["(?:/(",")|/)?"];break;default:n=["("+e.squash+"|",")?"]}return r+n[0]+e.type.pattern.source+n[1]}var i=n(3),o=n(5),a=n(4),s=n(20),u=n(4),c=n(21),l=n(3),f=n(3),p=function(t,e,n){return t[e]=t[e]||n()},h=function(){function t(e,n){var a=this;this.pattern=e,this.config=n,this._cache={path:[],pattern:null},this._children=[],this._params=[],this._segments=[],this._compiled=[],this.config=i.defaults(this.config,{params:{},strict:!0,caseInsensitive:!1,paramMap:i.identity});for(var u,c,l,f=/([:*])([\w\[\]]+)|\{([\w\[\]]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,p=/([:]?)([\w\[\].-]+)|\{([\w\[\].-]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,h=0,d=[],v=function(n){if(!t.nameValidator.test(n))throw new Error("Invalid parameter name '"+n+"' in pattern '"+e+"'");if(i.find(a._params,o.propEq("id",n)))throw new Error("Duplicate parameter name '"+n+"' in pattern '"+e+"'")},g=function(t,n){var r=t[2]||t[3],o=n?t[4]:t[4]||("*"===t[1]?".*":null);return{id:r,regexp:o,cfg:a.config.params[r],segment:e.substring(h,t.index),type:o?s.paramTypes.type(o||"string")||i.inherit(s.paramTypes.type("string"),{pattern:new RegExp(o,a.config.caseInsensitive?"i":void 0)}):null}};(u=f.exec(e))&&(c=g(u,!1),!(c.segment.indexOf("?")>=0));)v(c.id),this._params.push(s.Param.fromPath(c.id,c.type,this.config.paramMap(c.cfg,!1))),this._segments.push(c.segment),d.push([c.segment,i.tail(this._params)]),h=f.lastIndex;l=e.substring(h);var m=l.indexOf("?");if(m>=0){var $=l.substring(m);if(l=l.substring(0,m),$.length>0)for(h=0;u=p.exec($);)c=g(u,!0),v(c.id),this._params.push(s.Param.fromSearch(c.id,c.type,this.config.paramMap(c.cfg,!0))),h=f.lastIndex}this._segments.push(l),i.extend(this,{_compiled:d.map(function(t){return r.apply(null,t)}).concat(r(l)),prefix:this._segments[0]}),Object.freeze(this)}return t.prototype.append=function(t){return this._children.push(t),i.forEach(t._cache,function(e,n){return t._cache[n]=a.isArray(e)?[]:null}),t._cache.path=this._cache.path.concat(this),t},t.prototype.isRoot=function(){return 0===this._cache.path.length},t.prototype.toString=function(){return this.pattern},t.prototype.exec=function(t,e,n,r){function a(t){var e=function(t){return t.split("").reverse().join("")},n=function(t){return t.replace(/\\-/g,"-")},r=e(t).split(/-(?!\\)/),o=i.map(r,e);return i.map(o,n).reverse()}var s=this;void 0===e&&(e={}),void 0===r&&(r={});var c=p(this._cache,"pattern",function(){return new RegExp(["^",i.unnest(s._cache.path.concat(s).map(o.prop("_compiled"))).join(""),s.config.strict===!1?"/?":"","$"].join(""),s.config.caseInsensitive?"i":void 0)}).exec(t);if(!c)return null;var l=this.parameters(),f=l.filter(function(t){return!t.isSearch()}),h=l.filter(function(t){return t.isSearch()}),d=this._cache.path.concat(this).map(function(t){return t._segments.length-1}).reduce(function(t,e){return t+e}),v={};if(d!==c.length-1)throw new Error("Unbalanced capture group in route '"+this.pattern+"'");for(var g=0;d>g;g++){for(var m=f[g],$=c[g+1],y=0;y<m.replace.length;y++)m.replace[y].from===$&&($=m.replace[y].to);$&&m.array===!0&&($=a($)),u.isDefined($)&&($=m.type.decode($)),v[m.id]=m.value($)}return i.forEach(h,function(t){for(var n=e[t.id],r=0;r<t.replace.length;r++)t.replace[r].from===n&&(n=t.replace[r].to);u.isDefined(n)&&(n=t.type.decode(n)),v[t.id]=t.value(n)}),n&&(v["#"]=n),v},t.prototype.parameters=function(t){return void 0===t&&(t={}),t.inherit===!1?this._params:i.unnest(this._cache.path.concat(this).map(o.prop("_params")))},t.prototype.parameter=function(t,e){void 0===e&&(e={});var n=i.tail(this._cache.path);return i.find(this._params,o.propEq("id",t))||e.inherit!==!1&&n&&n.parameter(t)||null},t.prototype.validates=function(t){var e=this,n=function(t,e){return!t||t.validates(e)};return i.pairs(t||{}).map(function(t){var r=t[0],i=t[1];return n(e.parameter(r),i)}).reduce(i.allTrueR,!0)},t.prototype.format=function(e){function n(t){var n=t.value(e[t.id]),r=t.isDefaultValue(n),i=r?t.squash:!1,o=t.type.encode(n);return{param:t,value:n,isDefaultValue:r,squash:i,encoded:o}}if(void 0===e&&(e={}),!this.validates(e))return null;var r=this._cache.path.slice().concat(this),o=r.map(t.pathSegmentsAndParams).reduce(l.unnestR,[]),s=r.map(t.queryParams).reduce(l.unnestR,[]),u=o.reduce(function(e,r){if(a.isString(r))return e+r;var o=n(r),s=o.squash,u=o.encoded,c=o.param;return s===!0?e.match(/\/$/)?e.slice(0,-1):e:a.isString(s)?e+s:s!==!1?e:null==u?e:a.isArray(u)?e+i.map(u,t.encodeDashes).join("-"):c.type.raw?e+u:e+encodeURIComponent(u)},""),c=s.map(function(t){var e=n(t),r=e.squash,o=e.encoded,s=e.isDefaultValue;if(!(null==o||s&&r!==!1)&&(a.isArray(o)||(o=[o]),0!==o.length))return t.type.raw||(o=i.map(o,encodeURIComponent)),o.map(function(e){return t.id+"="+e})}).filter(i.identity).reduce(l.unnestR,[]).join("&");return u+(c?"?"+c:"")+(e["#"]?"#"+e["#"]:"")},t.encodeDashes=function(t){return encodeURIComponent(t).replace(/-/g,function(t){return"%5C%"+t.charCodeAt(0).toString(16).toUpperCase()})},t.pathSegmentsAndParams=function(t){var e=t._segments,n=t._params.filter(function(t){return t.location===c.DefType.PATH});return f.arrayTuples(e,n.concat(void 0)).reduce(l.unnestR,[]).filter(function(t){return""!==t&&u.isDefined(t)})},t.queryParams=function(t){return t._params.filter(function(t){return t.location===c.DefType.SEARCH})},t.nameValidator=/^\w+([-.]+\w+)*(?:\[\])?$/,t}();e.UrlMatcher=h},function(t,e,n){"use strict";function r(){return{strict:a.matcherConfig.strictMode(),caseInsensitive:a.matcherConfig.caseInsensitive()}}var i=n(3),o=n(4),a=n(45),s=n(20),u=function(){function t(){i.extend(this,{UrlMatcher:a.UrlMatcher,Param:s.Param})}return t.prototype.caseInsensitive=function(t){return a.matcherConfig.caseInsensitive(t)},t.prototype.strictMode=function(t){return a.matcherConfig.strictMode(t)},t.prototype.defaultSquashPolicy=function(t){return a.matcherConfig.defaultSquashPolicy(t)},t.prototype.compile=function(t,e){return new a.UrlMatcher(t,i.extend(r(),e))},t.prototype.isMatcher=function(t){if(!o.isObject(t))return!1;var e=!0;return i.forEach(a.UrlMatcher.prototype,function(n,r){o.isFunction(n)&&(e=e&&o.isDefined(t[r])&&o.isFunction(t[r]))}),e},t.prototype.type=function(t,e,n){var r=s.paramTypes.type(t,e,n);return o.isDefined(e)?this:r},t.prototype.$get=function(){return s.paramTypes.enqueue=!1,s.paramTypes._flushTypeQueue(),this},t}();e.UrlMatcherFactory=u},function(t,e,n){"use strict";function r(t){var e=/^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(t.source);return null!=e?e[1].replace(/\\(.)/g,"$1"):""}function i(t,e){return t.replace(/\$(\$|\d{1,2})/,function(t,n){return e["$"===n?0:Number(n)]})}function o(t,e,n,r){if(!r)return!1;var i=t.invoke(n,n,{$match:r,$stateParams:e});return c.isDefined(i)?i:!0}function a(t,e,n){var r=l.services.locationConfig.baseHref();return"/"===r?t:e?r.slice(0,-1)+t:n?r.slice(1)+t:t}function s(t,e,n){function r(t){var e=t(l.services.$injector,f);return e?(c.isString(e)&&(f.replace(),f.url(e)),!0):!1}if(!n||!n.defaultPrevented){var i,o=t.length;for(i=0;o>i;i++)if(r(t[i]))return;e&&r(e)}}var u=n(3),c=n(4),l=n(6),f=l.services.location,p=function(){function t(t,e){this.$urlMatcherFactory=t,this.$stateParams=e,this.rules=[],this.otherwiseFn=null,this.interceptDeferred=!1}return t.prototype.rule=function(t){if(!c.isFunction(t))throw new Error("'rule' must be a function");return this.rules.push(t),this},t.prototype.otherwise=function(t){if(!c.isFunction(t)&&!c.isString(t))throw new Error("'rule' must be a string or function");return this.otherwiseFn=c.isString(t)?function(){return t}:t,this},t.prototype.when=function(t,e){var n,a=this,s=a.$urlMatcherFactory,p=a.$stateParams,h=c.isString(e);if(c.isString(t)&&(t=s.compile(t)),!h&&!c.isFunction(e)&&!c.isArray(e))throw new Error("invalid 'handler' in when()");var d={matcher:function(t,e){return h&&(n=s.compile(e),e=["$match",n.format.bind(n)]),u.extend(function(){return o(l.services.$injector,p,e,t.exec(f.path(),f.search(),f.hash()))},{prefix:c.isString(t.prefix)?t.prefix:""})},regex:function(t,e){if(t.global||t.sticky)throw new Error("when() RegExp must not be global or sticky");return h&&(n=e,e=["$match",function(t){return i(n,t)}]),u.extend(function(){return o(l.services.$injector,p,e,t.exec(f.path()))},{prefix:r(t)})}},v={matcher:s.isMatcher(t),regex:t instanceof RegExp};for(var g in v)if(v[g])return this.rule(d[g](t,e));throw new Error("invalid 'what' in when()")},t.prototype.deferIntercept=function(t){void 0===t&&(t=!0),this.interceptDeferred=t},t}();e.UrlRouterProvider=p;var h=function(){function t(e){this.urlRouterProvider=e,u.bindFunctions(t.prototype,this,this)}return t.prototype.sync=function(){s(this.urlRouterProvider.rules,this.urlRouterProvider.otherwiseFn)},t.prototype.listen=function(){var t=this;return this.listener=this.listener||f.onChange(function(e){return s(t.urlRouterProvider.rules,t.urlRouterProvider.otherwiseFn,e)})},t.prototype.update=function(t){return t?void(this.location=f.url()):void(f.url()!==this.location&&(f.url(this.location),f.replace()))},t.prototype.push=function(t,e,n){f.url(t.format(e||{})),n&&n.replace&&f.replace()},t.prototype.href=function(t,e,n){if(!t.validates(e))return null;var r=t.format(e);n=n||{};var i=l.services.locationConfig,o=i.html5Mode();if(o||null===r||(r="#"+i.hashPrefix()+r),r=a(r,o,n.absolute),!n.absolute||!r)return r;var s=!o&&r?"/":"",u=i.port();return u=80===u||443===u?"":":"+u,[i.protocol(),"://",i.host(),u,s,r].join("")},t}();e.UrlRouter=h},function(t,e,n){"use strict";function r(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}r(n(50))},function(t,e,n){"use strict";var r=n(3),i=n(5),o=n(4),a=n(2),s=function(){function t(){var t=this;this.uiViews=[],this.viewConfigs=[],this._viewConfigFactories={},this.sync=function(){function e(t){return t.fqn.split(".").length}function n(t){for(var e=t.viewDecl.$context,n=0;++n&&e.parent;)e=e.parent;return n}var o=t.uiViews.map(function(t){return[t.fqn,t]}).reduce(r.applyPairs,{}),a=function(t){return function(e){var n=e.viewDecl,i=n.$uiViewName.split("."),a=t.fqn.split(".");if(!r.equals(i,a.slice(0-i.length)))return!1;var s=1-i.length||void 0,u=a.slice(0,s).join("."),c=o[u].creationContext;return n.$uiViewContextAnchor===(c&&c.name)}},s=i.curry(function(t,e,n,r){return e*(t(n)-t(r))}),u=function(e){var r=t.viewConfigs.filter(a(e));return r.length>1&&r.sort(s(n,-1)),[e,r[0]]},c=function(e){var n=e[0],r=e[1];-1!==t.uiViews.indexOf(n)&&n.configUpdated(r)};t.uiViews.sort(s(e,1)).map(u).forEach(c)}}return t.prototype.rootContext=function(t){return this._rootContext=t||this._rootContext},t.prototype.viewConfigFactory=function(t,e){this._viewConfigFactories[t]=e},t.prototype.createViewConfig=function(t,e){var n=this._viewConfigFactories[e.$type];if(!n)throw new Error("ViewService: No view config factory registered for type "+e.$type);return n(t,e)},t.prototype.deactivateViewConfig=function(t){a.trace.traceViewServiceEvent("<- Removing",t),r.removeFrom(this.viewConfigs,t)},t.prototype.activateViewConfig=function(t){a.trace.traceViewServiceEvent("-> Registering",t),this.viewConfigs.push(t)},t.prototype.registerUiView=function(t){
a.trace.traceViewServiceUiViewEvent("-> Registering",t);var e=this.uiViews,n=function(e){return e.fqn===t.fqn};return e.filter(n).length&&a.trace.traceViewServiceUiViewEvent("!!!! duplicate uiView named:",t),e.push(t),this.sync(),function(){var n=e.indexOf(t);return 0>=n?void a.trace.traceViewServiceUiViewEvent("Tried removing non-registered uiView",t):(a.trace.traceViewServiceUiViewEvent("<- Deregistering",t),void r.removeFrom(e)(t))}},t.prototype.available=function(){return this.uiViews.map(i.prop("fqn"))},t.prototype.active=function(){return this.uiViews.filter(i.prop("$config")).map(i.prop("name"))},t.normalizeUiViewTarget=function(t,e){void 0===e&&(e="");var n=e.split("@"),r=n[0]||"$default",i=o.isString(n[1])?n[1]:"^",a=/^(\^(?:\.\^)*)\.(.*$)/.exec(r);a&&(i=a[1],r=a[2]),"!"===r.charAt(0)&&(r=r.substr(1),i="");var s=/^(\^(?:\.\^)*)$/;if(s.exec(i)){var u=i.split(".").reduce(function(t,e){return t.parent},t);i=u.name}return{uiViewName:r,uiViewContextAnchor:i}},t}();e.ViewService=s},function(t,e,n){"use strict";var r=n(25),i=n(8),o=n(3),a=function(){function t(t){var e=this;this.params=new r.StateParams,this.transitionHistory=new i.Queue([],1),this.successfulTransitions=new i.Queue([],1);var n=function(t){e.transition=t,e.transitionHistory.enqueue(t);var n=function(){e.successfulTransitions.enqueue(t),e.$current=t.$to(),e.current=e.$current.self,o.copy(t.params(),e.params)};t.onSuccess({},n,{priority:1e4});var r=function(){e.transition===t&&(e.transition=null)};t.promise.then(r,r)};t.onBefore({},["$transition$",n])}return t}();e.UIRouterGlobals=a},function(t,e,n){"use strict";var r=n(47),i=n(48),o=n(18),a=n(48),s=n(43),u=n(50),c=n(36),l=n(37),f=n(51),p=function(){function t(){this.viewService=new u.ViewService,this.transitionService=new s.TransitionService(this.viewService),this.globals=new f.UIRouterGlobals(this.transitionService),this.urlMatcherFactory=new r.UrlMatcherFactory,this.urlRouterProvider=new i.UrlRouterProvider(this.urlMatcherFactory,this.globals.params),this.urlRouter=new a.UrlRouter(this.urlRouterProvider),this.stateRegistry=new c.StateRegistry(this.urlMatcherFactory,this.urlRouterProvider),this.stateProvider=new o.StateProvider(this.stateRegistry),this.stateService=new l.StateService(this.viewService,this.urlRouter,this.transitionService,this.stateRegistry,this.stateProvider,this.globals),this.viewService.rootContext(this.stateRegistry.root()),this.globals.$current=this.stateRegistry.root(),this.globals.current=this.globals.$current.self}return t}();e.UIRouter=p},function(t,e,n){"use strict";function r(t){var e=f.services.$injector,n=e.get("$controller"),r=e.instantiate;try{var i;return e.instantiate=function(t){e.instantiate=r,i=e.annotate(t)},n(t,{$scope:{}}),i}finally{e.instantiate=r}}function i(t,e){f.services.$injector=t,f.services.$q=e}function o(t){function e(e,r,i,o,a,s){return o.$on("$locationChangeSuccess",function(t){return n.forEach(function(e){return e(t)})}),f.services.locationConfig.html5Mode=function(){var e=t.html5Mode();return e=d.isObject(e)?e.enabled:e,e&&i.history},f.services.template.get=function(t){return a.get(t,{cache:s,headers:{Accept:"text/html"}}).then(h.prop("data"))},p.bindFunctions(e,f.services.location,e,["replace","url","path","search","hash"]),p.bindFunctions(e,f.services.locationConfig,e,["port","protocol","host"]),p.bindFunctions(r,f.services.locationConfig,r,["baseHref"]),x}x=new l.UIRouter,x.stateRegistry.decorator("views",y.ng1ViewsBuilder),x.viewService.viewConfigFactory("ng1",y.ng1ViewConfigFactory),p.bindFunctions(t,f.services.locationConfig,t,["hashPrefix"]);var n=[];f.services.location.onChange=function(t){return n.push(t),function(){return p.removeFrom(n)(t)}},this.$get=e,e.$inject=["$location","$browser","$sniffer","$rootScope","$http","$templateCache"]}function a(){return x.urlRouterProvider.$get=function(){return x.urlRouter.update(!0),this.interceptDeferred||x.urlRouter.listen(),x.urlRouter},x.urlRouterProvider}function s(){return x.stateProvider.$get=function(){return x.stateRegistry.stateQueue.autoFlush(x.stateService),x.stateService},x.stateProvider}function u(){function t(t){var e=function(e){function n(){}var i=p.find(t.treeChanges().to,h.propEq("state",e.viewDecl.$context));if(!i)return f.services.$q.when();var o=i.resolveContext,a=r(e.controller),s=o.getResolvables();return n.$inject=a.filter(function(t){return s.hasOwnProperty(t)}),o.invokeLater(n).then(function(){return e.locals=p.map(s,function(t){return t.data})})},n=t.views("entering").filter(function(t){return!!t.controller}).map(e);return f.services.$q.all(n).then(p.noop)}return t.$inject=["$transition$"],x.transitionService.onFinish({},t),x.transitionService.$get=function(){return x.transitionService},x.transitionService}function c(t){t.$watch(function(){$.trace.approximateDigests++})}var l=n(52),f=n(6),p=n(3),h=n(5),d=n(4),v=n(44),g=n(40),m=n(17),$=n(12),y=n(54),b=n(55),w=angular.module("ui.router.angular1",[]);angular.module("ui.router.util",["ng","ui.router.init"]),angular.module("ui.router.router",["ui.router.util"]),angular.module("ui.router.state",["ui.router.router","ui.router.util","ui.router.angular1"]),angular.module("ui.router",["ui.router.init","ui.router.state","ui.router.angular1"]),angular.module("ui.router.compat",["ui.router"]),e.annotateController=r,i.$inject=["$injector","$q"],w.run(i);var x=null;o.$inject=["$locationProvider"];var S=function(){return{resolve:function(t,e,n){void 0===e&&(e={});var r=new v.Node(new m.State({params:{}})),i=new v.Node(new m.State({params:{}})),o=new g.ResolveContext([r,i]);o.addResolvables(g.Resolvable.makeResolvables(t),i.state);var a=function(t){var n=function(t){return g.Resolvable.makeResolvables(p.map(t,function(t){return function(){return t}}))};return o.addResolvables(n(t),r.state),o.addResolvables(n(e),i.state),o.resolvePath()};return n?n.then(a):a({})}}};angular.module("ui.router.init",[]).provider("ng1UIRouter",o),angular.module("ui.router.init").run(["ng1UIRouter",function(t){}]),angular.module("ui.router.util").provider("$urlMatcherFactory",["ng1UIRouterProvider",function(){return x.urlMatcherFactory}]),angular.module("ui.router.util").run(["$urlMatcherFactory",function(t){}]),angular.module("ui.router.router").provider("$urlRouter",["ng1UIRouterProvider",a]),angular.module("ui.router.router").run(["$urlRouter",function(t){}]),angular.module("ui.router.state").provider("$state",["ng1UIRouterProvider",s]),angular.module("ui.router.state").run(["$state",function(t){}]),angular.module("ui.router.state").factory("$stateParams",["ng1UIRouter",function(t){return t.globals.params}]),angular.module("ui.router.state").provider("$transitions",["ng1UIRouterProvider",u]),angular.module("ui.router.util").factory("$templateFactory",["ng1UIRouter",function(){return new b.TemplateFactory}]),angular.module("ui.router").factory("$view",function(){return x.viewService}),angular.module("ui.router").factory("$resolve",S),angular.module("ui.router").service("$trace",function(){return $.trace}),c.$inject=["$rootScope"],e.watchDigests=c,angular.module("ui.router").run(c)},function(t,e,n){"use strict";function r(t){var e=["templateProvider","templateUrl","template","notify","async"],n=["controller","controllerProvider","controllerAs","resolveAs"],r=["component","bindings"],c=e.concat(n),l=r.concat(c),f={},p=t.views||{$default:o.pick(t,l)};return o.forEach(p,function(e,n){if(n=n||"$default",u.isString(e)&&(e={component:e}),Object.keys(e).length){if(e.component){if(c.map(function(t){return u.isDefined(e[t])}).reduce(o.anyTrueR,!1))throw new Error("Cannot combine: "+r.join("|")+" with: "+c.join("|")+" in stateview: 'name@"+t.name+"'");e.templateProvider=["$injector",function(t){var n=function(t){return e.bindings&&e.bindings[t]||t},r=angular.version.minor>=3?"::":"",o=i(t,e.component).map(function(t){return a.kebobString(t)+"='"+r+"$resolve."+n(t)+"'"}).join(" "),s=a.kebobString(e.component);return"<"+s+" "+o+"></"+s+">"}]}e.resolveAs=e.resolveAs||"$resolve",e.$type="ng1",e.$context=t,e.$name=n;var l=s.ViewService.normalizeUiViewTarget(e.$context,e.$name);e.$uiViewName=l.uiViewName,e.$uiViewContextAnchor=l.uiViewContextAnchor,f[n]=e}}),f}function i(t,e){var n=t.get(e+"Directive");if(!n||!n.length)throw new Error("Unable to find component named '"+e+"'");return n.map(d).reduce(o.unnestR,[])}var o=n(3),a=n(9),s=n(50),u=n(4),c=n(6),l=n(12),f=n(55);e.ng1ViewConfigFactory=function(t,e){return new v(t,e)},e.ng1ViewsBuilder=r;var p=function(t){return Object.keys(t||{}).map(function(e){return[e,/^[=<](.*)/.exec(t[e])]}).filter(function(t){return u.isDefined(t[1])}).map(function(t){return t[1][1]||t[0]})},h=function(t){return Object.keys(t||{}).filter(function(e){return!!/[=<]/.exec(t[e].mode)}).map(function(e){return t[e].attrName})},d=function(t){return u.isObject(t.bindToController)?p(t.bindToController):t.$$bindings&&t.$$bindings.bindToController?h(t.$$bindings.bindToController):t.$$isolateBindings?h(t.$$isolateBindings):p(t.scope)},v=function(){function t(t,e){this.node=t,this.viewDecl=e,this.loaded=!1}return t.prototype.load=function(){var t=this,e=c.services.$q;if(!this.hasTemplate())throw new Error("No template configuration specified for '"+this.viewDecl.$uiViewName+"@"+this.viewDecl.$uiViewContextAnchor+"'");var n=this.node.resolveContext,r=this.node.paramValues,i={template:e.when(this.getTemplate(r,new f.TemplateFactory,n)),controller:e.when(this.getController(n))};return e.all(i).then(function(e){l.trace.traceViewServiceEvent("Loaded",t),t.controller=e.controller,t.template=e.template})},t.prototype.hasTemplate=function(){return!!(this.viewDecl.template||this.viewDecl.templateUrl||this.viewDecl.templateProvider)},t.prototype.getTemplate=function(t,e,n){return e.fromConfig(this.viewDecl,t,n.invokeLater.bind(n))},t.prototype.getController=function(t){var e=this.viewDecl.controllerProvider;return u.isInjectable(e)?t.invokeLater(e,{}):this.viewDecl.controller},t}();e.Ng1ViewConfig=v},function(t,e,n){"use strict";var r=n(4),i=n(6),o=function(){function t(){}return t.prototype.fromConfig=function(t,e,n){return r.isDefined(t.template)?this.fromString(t.template,e):r.isDefined(t.templateUrl)?this.fromUrl(t.templateUrl,e):r.isDefined(t.templateProvider)?this.fromProvider(t.templateProvider,e,n):null},t.prototype.fromString=function(t,e){return r.isFunction(t)?t(e):t},t.prototype.fromUrl=function(t,e){return r.isFunction(t)&&(t=t(e)),null==t?null:i.services.template.get(t)},t.prototype.fromProvider=function(t,e,n){return n(t)},t}();e.TemplateFactory=o},function(t,e,n){"use strict";function r(t,e){var n,r=t.match(/^\s*({[^}]*})\s*$/);if(r&&(t=e+"("+r[1]+")"),n=t.replace(/\n/g," ").match(/^([^(]+?)\s*(\((.*)\))?$/),!n||4!==n.length)throw new Error("Invalid state ref '"+t+"'");return{state:n[1],paramExpr:n[3]||null}}function i(t){var e=t.parent().inheritedData("$uiView"),n=l.parse("$cfg.node.state")(e);return n&&n.name?n:void 0}function o(t){var e="[object SVGAnimatedString]"===Object.prototype.toString.call(t.prop("href")),n="FORM"===t[0].nodeName;return{attr:n?"action":e?"xlink:href":"href",isAnchor:"A"===t.prop("tagName").toUpperCase(),clickable:!n}}function a(t,e,n,r,i){return function(o){var a=o.which||o.button,s=i();if(!(a>1||o.ctrlKey||o.metaKey||o.shiftKey||t.attr("target"))){var u=n(function(){e.go(s.state,s.params,s.options)});o.preventDefault();var c=r.isAnchor&&!s.href?1:0;o.preventDefault=function(){c--<=0&&n.cancel(u)}}}}function s(t,e){return{relative:i(t)||e.$current,inherit:!0}}var u=n(3),c=n(4),l=n(5),f=["$state","$timeout",function(t,e){return{restrict:"A",require:["?^uiSrefActive","?^uiSrefActiveEq"],link:function(n,i,c,l){var f=r(c.uiSref,t.current.name),p={state:f.state,href:null,params:null,options:null},h=o(i),d=l[1]||l[0],v=null;p.options=u.extend(s(i,t),c.uiSrefOpts?n.$eval(c.uiSrefOpts):{});var g=function(e){e&&(p.params=angular.copy(e)),p.href=t.href(f.state,p.params,p.options),v&&v(),d&&(v=d.$$addStateInfo(f.state,p.params)),null!==p.href&&c.$set(h.attr,p.href)};f.paramExpr&&(n.$watch(f.paramExpr,function(t){t!==p.params&&g(t)},!0),p.params=angular.copy(n.$eval(f.paramExpr))),g(),h.clickable&&i.bind("click",a(i,t,e,h,function(){return p}))}}}],p=["$state","$timeout",function(t,e){return{restrict:"A",require:["?^uiSrefActive","?^uiSrefActiveEq"],link:function(n,r,i,s){function u(e){h.state=e[0],h.params=e[1],h.options=e[2],h.href=t.href(h.state,h.params,h.options),d&&d(),l&&(d=l.$$addStateInfo(h.state,h.params)),h.href&&i.$set(c.attr,h.href)}var c=o(r),l=s[1]||s[0],f=[i.uiState,i.uiStateParams||null,i.uiStateOpts||null],p="["+f.map(function(t){return t||"null"}).join(", ")+"]",h={state:null,params:null,options:null,href:null},d=null;n.$watch(p,u,!0),u(n.$eval(p)),c.clickable&&r.bind("click",a(r,t,e,c,function(){return h}))}}}],h=["$state","$stateParams","$interpolate","$transitions",function(t,e,n,o){return{restrict:"A",controller:["$scope","$element","$attrs","$timeout",function(e,a,s,l){function f(e,n,r){var o=t.get(e,i(a)),s=p(e,n),u={state:o||{name:e},params:n,hash:s};return b.push(u),w[s]=r,function(){var t=b.indexOf(u);-1!==t&&b.splice(t,1)}}function p(t,n){if(!c.isString(t))throw new Error("state should be a string");return c.isObject(n)?t+u.toJson(n):(n=e.$eval(n),c.isObject(n)?t+u.toJson(n):t)}function h(){for(var t=0;t<b.length;t++)g(b[t].state,b[t].params)?d(a,w[b[t].hash]):v(a,w[b[t].hash]),m(b[t].state,b[t].params)?d(a,$):v(a,$)}function d(t,e){l(function(){t.addClass(e)})}function v(t,e){t.removeClass(e)}function g(e,n){return t.includes(e.name,n)}function m(e,n){return t.is(e.name,n)}var $,y,b=[],w={};$=n(s.uiSrefActiveEq||"",!1)(e);try{y=e.$eval(s.uiSrefActive)}catch(x){}y=y||n(s.uiSrefActive||"",!1)(e),c.isObject(y)&&u.forEach(y,function(n,i){if(c.isString(n)){var o=r(n,t.current.name);f(o.state,e.$eval(o.paramExpr),i)}}),this.$$addStateInfo=function(t,e){if(!(c.isObject(y)&&b.length>0)){var n=f(t,e,y);return h(),n}},e.$on("$stateChangeSuccess",h);var S=["$transition$",function(t){t.promise.then(h)}],C=o.onStart({},S);e.$on("$destroy",C),h()}]}}];angular.module("ui.router.state").directive("uiSref",f).directive("uiSrefActive",h).directive("uiSrefActiveEq",h).directive("uiState",p)},function(t,e){"use strict";function n(t){var e=function(e,n,r){return t.is(e,n,r)};return e.$stateful=!0,e}function r(t){var e=function(e,n,r){return t.includes(e,n,r)};return e.$stateful=!0,e}n.$inject=["$state"],e.$IsStateFilter=n,r.$inject=["$state"],e.$IncludedByStateFilter=r,angular.module("ui.router.state").filter("isState",n).filter("includedByState",r)},function(t,e,n){"use strict";function r(t,e,n,r,u){var f=c.parse("viewDecl.controllerAs"),p=c.parse("viewDecl.resolveAs"),h=c.parse("node.resolveContext");return{restrict:"ECA",priority:-400,compile:function(r){var u=r.html();return function(r,c){var d=c.data("$uiView");if(d){var v=d.$cfg||{viewDecl:{}};c.html(v.template||u),s.trace.traceUiViewFill(d.$uiView,c.html());var g=t(c.contents()),m=v.controller,$=f(v),y=p(v),b=h(v),w=b&&o.map(b.getResolvables(),function(t){return t.data});if(r[y]=w,m){var x=e(m,o.extend({},w,{$scope:r,$element:c}));$&&(r[$]=x,r[$][y]=w),c.data("$ngControllerController",x),c.children().data("$ngControllerController",x),i(n,x,r,v)}if(a.isString(v.viewDecl.component))var S=v.viewDecl.component,C=l.kebobString(S),E=function(){var t=[].slice.call(c[0].children).filter(function(t){return t&&t.tagName&&t.tagName.toLowerCase()===C});return t&&angular.element(t).data("$"+S+"Controller")},T=r.$watch(E,function(t){t&&(i(n,t,r,v),T())});g(r)}}}}}function i(t,e,n,r){!a.isFunction(e.$onInit)||r.viewDecl.component&&p||e.$onInit();var i={bind:e};if(a.isFunction(e.uiOnParamsChanged)){var s=function(t){var n=r.node.resolveContext,i=n.getResolvables().$transition$.data;if(t!==i&&-1===t.exiting().indexOf(r.node.state.self)){var a=t.params("to"),s=t.params("from"),u=t.treeChanges().to.map(function(t){return t.paramSchema}).reduce(o.unnestR,[]),c=t.treeChanges().from.map(function(t){return t.paramSchema}).reduce(o.unnestR,[]),l=u.filter(function(t){var e=c.indexOf(t);return-1===e||!c[e].type.equals(a[t.id],s[t.id])});if(l.length){var f=l.map(function(t){return t.id});e.uiOnParamsChanged(o.filter(a,function(t,e){return-1!==f.indexOf(e)}),t)}}};n.$on("$destroy",t.onSuccess({},["$transition$",s]),i);var c=function(t,e){t.type===u.RejectType.IGNORED&&s(e)};n.$on("$destroy",t.onError({},["$error$","$transition$",c]),i)}if(a.isFunction(e.uiCanExit)){var l={exiting:r.node.state.name};n.$on("$destroy",t.onBefore(l,e.uiCanExit,i))}}var o=n(3),a=n(4),s=n(12),u=n(10),c=n(5),l=n(9),f=["$view","$animate","$uiViewScroll","$interpolate","$q",function(t,e,n,r,i){function o(t,n){return{enter:function(t,n,r){angular.version.minor>2?e.enter(t,null,n).then(r):e.enter(t,null,n,r)},leave:function(t,n){angular.version.minor>2?e.leave(t).then(n):e.leave(t,n)}}}function u(t,e){return t===e}var l={$cfg:{viewDecl:{$context:t.rootContext()}},$uiView:{}},f={count:0,restrict:"ECA",terminal:!0,priority:400,transclude:"element",compile:function(e,p,h){return function(e,p,d){function v(t){u(E,t)||(s.trace.traceUiViewConfigUpdated(A,t&&t.viewDecl&&t.viewDecl.$context),E=t,m(t))}function g(){if($&&(s.trace.traceUiViewEvent("Removing (previous) el",$.data("$uiView")),$.remove(),$=null),b&&(s.trace.traceUiViewEvent("Destroying scope",A),b.$destroy(),b=null),y){var t=y.data("$uiView");s.trace.traceUiViewEvent("Animate out",t),C.leave(y,function(){t.$$animLeave.resolve(),$=null}),$=y,y=null}}function m(t){var r=e.$new();s.trace.traceUiViewScopeCreated(A,r);var o=i.defer(),u=i.defer(),c={$cfg:t,$uiView:A,$animEnter:o.promise,$animLeave:u.promise,$$animLeave:u},l=h(r,function(t){C.enter(t.data("$uiView",c),p,function(){o.resolve(),b&&b.$emit("$viewContentAnimationEnded"),(a.isDefined(S)&&!S||e.$eval(S))&&n(t)}),g()});y=l,b=r,b.$emit("$viewContentLoaded",t||E),b.$eval(x)}var $,y,b,w,x=d.onload||"",S=d.autoscroll,C=o(d,e),E=void 0,T=p.inheritedData("$uiView")||l,k=r(d.uiView||d.name||"")(e)||"$default",A={id:f.count++,name:k,fqn:T.$uiView.fqn?T.$uiView.fqn+"."+k:k,config:null,configUpdated:v,get creationContext(){return c.parse("$cfg.viewDecl.$context")(T)}};s.trace.traceUiViewEvent("Linking",A),p.data("$uiView",{$uiView:A}),m(),w=t.registerUiView(A),e.$on("$destroy",function(){s.trace.traceUiViewEvent("Destroying/Unregistering",A),w()})}}};return f}];r.$inject=["$compile","$controller","$transitions","$view","$timeout"];var p="function"==typeof angular.module("ui.router").component;angular.module("ui.router.state").directive("uiView",f),angular.module("ui.router.state").directive("uiView",r)},function(t,e){"use strict";function n(){var t=!1;this.useAnchorScroll=function(){t=!0},this.$get=["$anchorScroll","$timeout",function(e,n){return t?e:function(t){return n(function(){t[0].scrollIntoView()},0,!1)}}]}angular.module("ui.router.state").provider("$uiViewScroll",n)}])}),"undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery");+function(t){"use strict";var e=t.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1==e[0]&&9==e[1]&&e[2]<1||e[0]>2)throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher, but lower than version 3")}(jQuery),+function(t){"use strict";function e(){var t=document.createElement("bootstrap"),e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var n in e)if(void 0!==t.style[n])return{end:e[n]};return!1}t.fn.emulateTransitionEnd=function(e){var n=!1,r=this;t(this).one("bsTransitionEnd",function(){n=!0});var i=function(){n||t(r).trigger(t.support.transition.end)};return setTimeout(i,e),this},t(function(){t.support.transition=e(),t.support.transition&&(t.event.special.bsTransitionEnd={bindType:t.support.transition.end,delegateType:t.support.transition.end,handle:function(e){return t(e.target).is(this)?e.handleObj.handler.apply(this,arguments):void 0}})})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var n=t(this),i=n.data("bs.alert");i||n.data("bs.alert",i=new r(this)),"string"==typeof e&&i[e].call(n)})}var n='[data-dismiss="alert"]',r=function(e){t(e).on("click",n,this.close)};r.VERSION="3.3.6",r.TRANSITION_DURATION=150,r.prototype.close=function(e){function n(){a.detach().trigger("closed.bs.alert").remove()}var i=t(this),o=i.attr("data-target");o||(o=i.attr("href"),o=o&&o.replace(/.*(?=#[^\s]*$)/,""));var a=t(o);e&&e.preventDefault(),a.length||(a=i.closest(".alert")),a.trigger(e=t.Event("close.bs.alert")),e.isDefaultPrevented()||(a.removeClass("in"),t.support.transition&&a.hasClass("fade")?a.one("bsTransitionEnd",n).emulateTransitionEnd(r.TRANSITION_DURATION):n())};var i=t.fn.alert;t.fn.alert=e,t.fn.alert.Constructor=r,t.fn.alert.noConflict=function(){return t.fn.alert=i,this},t(document).on("click.bs.alert.data-api",n,r.prototype.close)}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var r=t(this),i=r.data("bs.button"),o="object"==typeof e&&e;i||r.data("bs.button",i=new n(this,o)),"toggle"==e?i.toggle():e&&i.setState(e)})}var n=function(e,r){this.$element=t(e),this.options=t.extend({},n.DEFAULTS,r),this.isLoading=!1};n.VERSION="3.3.6",n.DEFAULTS={loadingText:"loading..."},n.prototype.setState=function(e){var n="disabled",r=this.$element,i=r.is("input")?"val":"html",o=r.data();e+="Text",null==o.resetText&&r.data("resetText",r[i]()),setTimeout(t.proxy(function(){r[i](null==o[e]?this.options[e]:o[e]),"loadingText"==e?(this.isLoading=!0,r.addClass(n).attr(n,n)):this.isLoading&&(this.isLoading=!1,r.removeClass(n).removeAttr(n))},this),0)},n.prototype.toggle=function(){var t=!0,e=this.$element.closest('[data-toggle="buttons"]');if(e.length){var n=this.$element.find("input");"radio"==n.prop("type")?(n.prop("checked")&&(t=!1),e.find(".active").removeClass("active"),this.$element.addClass("active")):"checkbox"==n.prop("type")&&(n.prop("checked")!==this.$element.hasClass("active")&&(t=!1),this.$element.toggleClass("active")),n.prop("checked",this.$element.hasClass("active")),t&&n.trigger("change")}else this.$element.attr("aria-pressed",!this.$element.hasClass("active")),this.$element.toggleClass("active")};var r=t.fn.button;t.fn.button=e,t.fn.button.Constructor=n,t.fn.button.noConflict=function(){return t.fn.button=r,this},t(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(n){var r=t(n.target);r.hasClass("btn")||(r=r.closest(".btn")),e.call(r,"toggle"),t(n.target).is('input[type="radio"]')||t(n.target).is('input[type="checkbox"]')||n.preventDefault()}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(e){t(e.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(e.type))})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var r=t(this),i=r.data("bs.carousel"),o=t.extend({},n.DEFAULTS,r.data(),"object"==typeof e&&e),a="string"==typeof e?e:o.slide;i||r.data("bs.carousel",i=new n(this,o)),"number"==typeof e?i.to(e):a?i[a]():o.interval&&i.pause().cycle()})}var n=function(e,n){this.$element=t(e),this.$indicators=this.$element.find(".carousel-indicators"),this.options=n,this.paused=null,this.sliding=null,this.interval=null,this.$active=null,this.$items=null,this.options.keyboard&&this.$element.on("keydown.bs.carousel",t.proxy(this.keydown,this)),"hover"==this.options.pause&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",t.proxy(this.pause,this)).on("mouseleave.bs.carousel",t.proxy(this.cycle,this))};n.VERSION="3.3.6",n.TRANSITION_DURATION=600,n.DEFAULTS={interval:5e3,pause:"hover",wrap:!0,keyboard:!0},n.prototype.keydown=function(t){if(!/input|textarea/i.test(t.target.tagName)){switch(t.which){case 37:this.prev();break;case 39:this.next();break;default:return}t.preventDefault()}},n.prototype.cycle=function(e){return e||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(t.proxy(this.next,this),this.options.interval)),this},n.prototype.getItemIndex=function(t){return this.$items=t.parent().children(".item"),this.$items.index(t||this.$active)},n.prototype.getItemForDirection=function(t,e){var n=this.getItemIndex(e),r="prev"==t&&0===n||"next"==t&&n==this.$items.length-1;if(r&&!this.options.wrap)return e;var i="prev"==t?-1:1,o=(n+i)%this.$items.length;return this.$items.eq(o)},n.prototype.to=function(t){var e=this,n=this.getItemIndex(this.$active=this.$element.find(".item.active"));return t>this.$items.length-1||0>t?void 0:this.sliding?this.$element.one("slid.bs.carousel",function(){e.to(t)}):n==t?this.pause().cycle():this.slide(t>n?"next":"prev",this.$items.eq(t))},n.prototype.pause=function(e){return e||(this.paused=!0),this.$element.find(".next, .prev").length&&t.support.transition&&(this.$element.trigger(t.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},n.prototype.next=function(){return this.sliding?void 0:this.slide("next")},n.prototype.prev=function(){return this.sliding?void 0:this.slide("prev")},n.prototype.slide=function(e,r){var i=this.$element.find(".item.active"),o=r||this.getItemForDirection(e,i),a=this.interval,s="next"==e?"left":"right",u=this;if(o.hasClass("active"))return this.sliding=!1;var c=o[0],l=t.Event("slide.bs.carousel",{relatedTarget:c,direction:s});if(this.$element.trigger(l),!l.isDefaultPrevented()){if(this.sliding=!0,a&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var f=t(this.$indicators.children()[this.getItemIndex(o)]);f&&f.addClass("active")}var p=t.Event("slid.bs.carousel",{relatedTarget:c,direction:s});return t.support.transition&&this.$element.hasClass("slide")?(o.addClass(e),o[0].offsetWidth,i.addClass(s),o.addClass(s),i.one("bsTransitionEnd",function(){o.removeClass([e,s].join(" ")).addClass("active"),i.removeClass(["active",s].join(" ")),u.sliding=!1,setTimeout(function(){u.$element.trigger(p)},0)}).emulateTransitionEnd(n.TRANSITION_DURATION)):(i.removeClass("active"),o.addClass("active"),this.sliding=!1,this.$element.trigger(p)),a&&this.cycle(),this}};var r=t.fn.carousel;t.fn.carousel=e,t.fn.carousel.Constructor=n,t.fn.carousel.noConflict=function(){return t.fn.carousel=r,this};var i=function(n){var r,i=t(this),o=t(i.attr("data-target")||(r=i.attr("href"))&&r.replace(/.*(?=#[^\s]+$)/,""));if(o.hasClass("carousel")){var a=t.extend({},o.data(),i.data()),s=i.attr("data-slide-to");s&&(a.interval=!1),e.call(o,a),s&&o.data("bs.carousel").to(s),n.preventDefault()}};t(document).on("click.bs.carousel.data-api","[data-slide]",i).on("click.bs.carousel.data-api","[data-slide-to]",i),t(window).on("load",function(){t('[data-ride="carousel"]').each(function(){var n=t(this);e.call(n,n.data())})})}(jQuery),+function(t){"use strict";function e(e){var n,r=e.attr("data-target")||(n=e.attr("href"))&&n.replace(/.*(?=#[^\s]+$)/,"");return t(r)}function n(e){return this.each(function(){var n=t(this),i=n.data("bs.collapse"),o=t.extend({},r.DEFAULTS,n.data(),"object"==typeof e&&e);!i&&o.toggle&&/show|hide/.test(e)&&(o.toggle=!1),i||n.data("bs.collapse",i=new r(this,o)),"string"==typeof e&&i[e]()})}var r=function(e,n){this.$element=t(e),this.options=t.extend({},r.DEFAULTS,n),this.$trigger=t('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()};r.VERSION="3.3.6",r.TRANSITION_DURATION=350,r.DEFAULTS={toggle:!0},r.prototype.dimension=function(){var t=this.$element.hasClass("width");return t?"width":"height"},r.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var e,i=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(!(i&&i.length&&(e=i.data("bs.collapse"),e&&e.transitioning))){var o=t.Event("show.bs.collapse");if(this.$element.trigger(o),!o.isDefaultPrevented()){i&&i.length&&(n.call(i,"hide"),e||i.data("bs.collapse",null));var a=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[a](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1;var s=function(){this.$element.removeClass("collapsing").addClass("collapse in")[a](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!t.support.transition)return s.call(this);var u=t.camelCase(["scroll",a].join("-"));this.$element.one("bsTransitionEnd",t.proxy(s,this)).emulateTransitionEnd(r.TRANSITION_DURATION)[a](this.$element[0][u])}}}},r.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var e=t.Event("hide.bs.collapse");if(this.$element.trigger(e),!e.isDefaultPrevented()){var n=this.dimension();this.$element[n](this.$element[n]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1;var i=function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};return t.support.transition?void this.$element[n](0).one("bsTransitionEnd",t.proxy(i,this)).emulateTransitionEnd(r.TRANSITION_DURATION):i.call(this)}}},r.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},r.prototype.getParent=function(){return t(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(t.proxy(function(n,r){var i=t(r);this.addAriaAndCollapsedClass(e(i),i)},this)).end()},r.prototype.addAriaAndCollapsedClass=function(t,e){var n=t.hasClass("in");t.attr("aria-expanded",n),e.toggleClass("collapsed",!n).attr("aria-expanded",n)};var i=t.fn.collapse;t.fn.collapse=n,t.fn.collapse.Constructor=r,t.fn.collapse.noConflict=function(){return t.fn.collapse=i,this},t(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(r){var i=t(this);i.attr("data-target")||r.preventDefault();var o=e(i),a=o.data("bs.collapse"),s=a?"toggle":i.data();n.call(o,s)})}(jQuery),+function(t){"use strict";function e(e){var n=e.attr("data-target");n||(n=e.attr("href"),n=n&&/#[A-Za-z]/.test(n)&&n.replace(/.*(?=#[^\s]*$)/,""));var r=n&&t(n);return r&&r.length?r:e.parent()}function n(n){n&&3===n.which||(t(i).remove(),t(o).each(function(){var r=t(this),i=e(r),o={relatedTarget:this};i.hasClass("open")&&(n&&"click"==n.type&&/input|textarea/i.test(n.target.tagName)&&t.contains(i[0],n.target)||(i.trigger(n=t.Event("hide.bs.dropdown",o)),n.isDefaultPrevented()||(r.attr("aria-expanded","false"),i.removeClass("open").trigger(t.Event("hidden.bs.dropdown",o)))))}))}function r(e){return this.each(function(){var n=t(this),r=n.data("bs.dropdown");r||n.data("bs.dropdown",r=new a(this)),"string"==typeof e&&r[e].call(n)})}var i=".dropdown-backdrop",o='[data-toggle="dropdown"]',a=function(e){t(e).on("click.bs.dropdown",this.toggle)};a.VERSION="3.3.6",a.prototype.toggle=function(r){var i=t(this);if(!i.is(".disabled, :disabled")){var o=e(i),a=o.hasClass("open");if(n(),!a){"ontouchstart"in document.documentElement&&!o.closest(".navbar-nav").length&&t(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(t(this)).on("click",n);var s={relatedTarget:this};if(o.trigger(r=t.Event("show.bs.dropdown",s)),r.isDefaultPrevented())return;i.trigger("focus").attr("aria-expanded","true"),o.toggleClass("open").trigger(t.Event("shown.bs.dropdown",s))}return!1}},a.prototype.keydown=function(n){if(/(38|40|27|32)/.test(n.which)&&!/input|textarea/i.test(n.target.tagName)){var r=t(this);if(n.preventDefault(),n.stopPropagation(),!r.is(".disabled, :disabled")){var i=e(r),a=i.hasClass("open");if(!a&&27!=n.which||a&&27==n.which)return 27==n.which&&i.find(o).trigger("focus"),r.trigger("click");var s=" li:not(.disabled):visible a",u=i.find(".dropdown-menu"+s);if(u.length){var c=u.index(n.target);38==n.which&&c>0&&c--,40==n.which&&c<u.length-1&&c++,~c||(c=0),u.eq(c).trigger("focus");
}}}};var s=t.fn.dropdown;t.fn.dropdown=r,t.fn.dropdown.Constructor=a,t.fn.dropdown.noConflict=function(){return t.fn.dropdown=s,this},t(document).on("click.bs.dropdown.data-api",n).on("click.bs.dropdown.data-api",".dropdown form",function(t){t.stopPropagation()}).on("click.bs.dropdown.data-api",o,a.prototype.toggle).on("keydown.bs.dropdown.data-api",o,a.prototype.keydown).on("keydown.bs.dropdown.data-api",".dropdown-menu",a.prototype.keydown)}(jQuery),+function(t){"use strict";function e(e,r){return this.each(function(){var i=t(this),o=i.data("bs.modal"),a=t.extend({},n.DEFAULTS,i.data(),"object"==typeof e&&e);o||i.data("bs.modal",o=new n(this,a)),"string"==typeof e?o[e](r):a.show&&o.show(r)})}var n=function(e,n){this.options=n,this.$body=t(document.body),this.$element=t(e),this.$dialog=this.$element.find(".modal-dialog"),this.$backdrop=null,this.isShown=null,this.originalBodyPad=null,this.scrollbarWidth=0,this.ignoreBackdropClick=!1,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,t.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};n.VERSION="3.3.6",n.TRANSITION_DURATION=300,n.BACKDROP_TRANSITION_DURATION=150,n.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},n.prototype.toggle=function(t){return this.isShown?this.hide():this.show(t)},n.prototype.show=function(e){var r=this,i=t.Event("show.bs.modal",{relatedTarget:e});this.$element.trigger(i),this.isShown||i.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',t.proxy(this.hide,this)),this.$dialog.on("mousedown.dismiss.bs.modal",function(){r.$element.one("mouseup.dismiss.bs.modal",function(e){t(e.target).is(r.$element)&&(r.ignoreBackdropClick=!0)})}),this.backdrop(function(){var i=t.support.transition&&r.$element.hasClass("fade");r.$element.parent().length||r.$element.appendTo(r.$body),r.$element.show().scrollTop(0),r.adjustDialog(),i&&r.$element[0].offsetWidth,r.$element.addClass("in"),r.enforceFocus();var o=t.Event("shown.bs.modal",{relatedTarget:e});i?r.$dialog.one("bsTransitionEnd",function(){r.$element.trigger("focus").trigger(o)}).emulateTransitionEnd(n.TRANSITION_DURATION):r.$element.trigger("focus").trigger(o)}))},n.prototype.hide=function(e){e&&e.preventDefault(),e=t.Event("hide.bs.modal"),this.$element.trigger(e),this.isShown&&!e.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),t(document).off("focusin.bs.modal"),this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"),this.$dialog.off("mousedown.dismiss.bs.modal"),t.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",t.proxy(this.hideModal,this)).emulateTransitionEnd(n.TRANSITION_DURATION):this.hideModal())},n.prototype.enforceFocus=function(){t(document).off("focusin.bs.modal").on("focusin.bs.modal",t.proxy(function(t){this.$element[0]===t.target||this.$element.has(t.target).length||this.$element.trigger("focus")},this))},n.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",t.proxy(function(t){27==t.which&&this.hide()},this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},n.prototype.resize=function(){this.isShown?t(window).on("resize.bs.modal",t.proxy(this.handleUpdate,this)):t(window).off("resize.bs.modal")},n.prototype.hideModal=function(){var t=this;this.$element.hide(),this.backdrop(function(){t.$body.removeClass("modal-open"),t.resetAdjustments(),t.resetScrollbar(),t.$element.trigger("hidden.bs.modal")})},n.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},n.prototype.backdrop=function(e){var r=this,i=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var o=t.support.transition&&i;if(this.$backdrop=t(document.createElement("div")).addClass("modal-backdrop "+i).appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",t.proxy(function(t){return this.ignoreBackdropClick?void(this.ignoreBackdropClick=!1):void(t.target===t.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus():this.hide()))},this)),o&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!e)return;o?this.$backdrop.one("bsTransitionEnd",e).emulateTransitionEnd(n.BACKDROP_TRANSITION_DURATION):e()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var a=function(){r.removeBackdrop(),e&&e()};t.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",a).emulateTransitionEnd(n.BACKDROP_TRANSITION_DURATION):a()}else e&&e()},n.prototype.handleUpdate=function(){this.adjustDialog()},n.prototype.adjustDialog=function(){var t=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&t?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!t?this.scrollbarWidth:""})},n.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},n.prototype.checkScrollbar=function(){var t=window.innerWidth;if(!t){var e=document.documentElement.getBoundingClientRect();t=e.right-Math.abs(e.left)}this.bodyIsOverflowing=document.body.clientWidth<t,this.scrollbarWidth=this.measureScrollbar()},n.prototype.setScrollbar=function(){var t=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"",this.bodyIsOverflowing&&this.$body.css("padding-right",t+this.scrollbarWidth)},n.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad)},n.prototype.measureScrollbar=function(){var t=document.createElement("div");t.className="modal-scrollbar-measure",this.$body.append(t);var e=t.offsetWidth-t.clientWidth;return this.$body[0].removeChild(t),e};var r=t.fn.modal;t.fn.modal=e,t.fn.modal.Constructor=n,t.fn.modal.noConflict=function(){return t.fn.modal=r,this},t(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(n){var r=t(this),i=r.attr("href"),o=t(r.attr("data-target")||i&&i.replace(/.*(?=#[^\s]+$)/,"")),a=o.data("bs.modal")?"toggle":t.extend({remote:!/#/.test(i)&&i},o.data(),r.data());r.is("a")&&n.preventDefault(),o.one("show.bs.modal",function(t){t.isDefaultPrevented()||o.one("hidden.bs.modal",function(){r.is(":visible")&&r.trigger("focus")})}),e.call(o,a,this)})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var r=t(this),i=r.data("bs.tooltip"),o="object"==typeof e&&e;!i&&/destroy|hide/.test(e)||(i||r.data("bs.tooltip",i=new n(this,o)),"string"==typeof e&&i[e]())})}var n=function(t,e){this.type=null,this.options=null,this.enabled=null,this.timeout=null,this.hoverState=null,this.$element=null,this.inState=null,this.init("tooltip",t,e)};n.VERSION="3.3.6",n.TRANSITION_DURATION=150,n.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},n.prototype.init=function(e,n,r){if(this.enabled=!0,this.type=e,this.$element=t(n),this.options=this.getOptions(r),this.$viewport=this.options.viewport&&t(t.isFunction(this.options.viewport)?this.options.viewport.call(this,this.$element):this.options.viewport.selector||this.options.viewport),this.inState={click:!1,hover:!1,focus:!1},this.$element[0]instanceof document.constructor&&!this.options.selector)throw new Error("`selector` option must be specified when initializing "+this.type+" on the window.document object!");for(var i=this.options.trigger.split(" "),o=i.length;o--;){var a=i[o];if("click"==a)this.$element.on("click."+this.type,this.options.selector,t.proxy(this.toggle,this));else if("manual"!=a){var s="hover"==a?"mouseenter":"focusin",u="hover"==a?"mouseleave":"focusout";this.$element.on(s+"."+this.type,this.options.selector,t.proxy(this.enter,this)),this.$element.on(u+"."+this.type,this.options.selector,t.proxy(this.leave,this))}}this.options.selector?this._options=t.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},n.prototype.getDefaults=function(){return n.DEFAULTS},n.prototype.getOptions=function(e){return e=t.extend({},this.getDefaults(),this.$element.data(),e),e.delay&&"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),e},n.prototype.getDelegateOptions=function(){var e={},n=this.getDefaults();return this._options&&t.each(this._options,function(t,r){n[t]!=r&&(e[t]=r)}),e},n.prototype.enter=function(e){var n=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);return n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n)),e instanceof t.Event&&(n.inState["focusin"==e.type?"focus":"hover"]=!0),n.tip().hasClass("in")||"in"==n.hoverState?void(n.hoverState="in"):(clearTimeout(n.timeout),n.hoverState="in",n.options.delay&&n.options.delay.show?void(n.timeout=setTimeout(function(){"in"==n.hoverState&&n.show()},n.options.delay.show)):n.show())},n.prototype.isInStateTrue=function(){for(var t in this.inState)if(this.inState[t])return!0;return!1},n.prototype.leave=function(e){var n=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);return n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n)),e instanceof t.Event&&(n.inState["focusout"==e.type?"focus":"hover"]=!1),n.isInStateTrue()?void 0:(clearTimeout(n.timeout),n.hoverState="out",n.options.delay&&n.options.delay.hide?void(n.timeout=setTimeout(function(){"out"==n.hoverState&&n.hide()},n.options.delay.hide)):n.hide())},n.prototype.show=function(){var e=t.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(e);var r=t.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(e.isDefaultPrevented()||!r)return;var i=this,o=this.tip(),a=this.getUID(this.type);this.setContent(),o.attr("id",a),this.$element.attr("aria-describedby",a),this.options.animation&&o.addClass("fade");var s="function"==typeof this.options.placement?this.options.placement.call(this,o[0],this.$element[0]):this.options.placement,u=/\s?auto?\s?/i,c=u.test(s);c&&(s=s.replace(u,"")||"top"),o.detach().css({top:0,left:0,display:"block"}).addClass(s).data("bs."+this.type,this),this.options.container?o.appendTo(this.options.container):o.insertAfter(this.$element),this.$element.trigger("inserted.bs."+this.type);var l=this.getPosition(),f=o[0].offsetWidth,p=o[0].offsetHeight;if(c){var h=s,d=this.getPosition(this.$viewport);s="bottom"==s&&l.bottom+p>d.bottom?"top":"top"==s&&l.top-p<d.top?"bottom":"right"==s&&l.right+f>d.width?"left":"left"==s&&l.left-f<d.left?"right":s,o.removeClass(h).addClass(s)}var v=this.getCalculatedOffset(s,l,f,p);this.applyPlacement(v,s);var g=function(){var t=i.hoverState;i.$element.trigger("shown.bs."+i.type),i.hoverState=null,"out"==t&&i.leave(i)};t.support.transition&&this.$tip.hasClass("fade")?o.one("bsTransitionEnd",g).emulateTransitionEnd(n.TRANSITION_DURATION):g()}},n.prototype.applyPlacement=function(e,n){var r=this.tip(),i=r[0].offsetWidth,o=r[0].offsetHeight,a=parseInt(r.css("margin-top"),10),s=parseInt(r.css("margin-left"),10);isNaN(a)&&(a=0),isNaN(s)&&(s=0),e.top+=a,e.left+=s,t.offset.setOffset(r[0],t.extend({using:function(t){r.css({top:Math.round(t.top),left:Math.round(t.left)})}},e),0),r.addClass("in");var u=r[0].offsetWidth,c=r[0].offsetHeight;"top"==n&&c!=o&&(e.top=e.top+o-c);var l=this.getViewportAdjustedDelta(n,e,u,c);l.left?e.left+=l.left:e.top+=l.top;var f=/top|bottom/.test(n),p=f?2*l.left-i+u:2*l.top-o+c,h=f?"offsetWidth":"offsetHeight";r.offset(e),this.replaceArrow(p,r[0][h],f)},n.prototype.replaceArrow=function(t,e,n){this.arrow().css(n?"left":"top",50*(1-t/e)+"%").css(n?"top":"left","")},n.prototype.setContent=function(){var t=this.tip(),e=this.getTitle();t.find(".tooltip-inner")[this.options.html?"html":"text"](e),t.removeClass("fade in top bottom left right")},n.prototype.hide=function(e){function r(){"in"!=i.hoverState&&o.detach(),i.$element.removeAttr("aria-describedby").trigger("hidden.bs."+i.type),e&&e()}var i=this,o=t(this.$tip),a=t.Event("hide.bs."+this.type);return this.$element.trigger(a),a.isDefaultPrevented()?void 0:(o.removeClass("in"),t.support.transition&&o.hasClass("fade")?o.one("bsTransitionEnd",r).emulateTransitionEnd(n.TRANSITION_DURATION):r(),this.hoverState=null,this)},n.prototype.fixTitle=function(){var t=this.$element;(t.attr("title")||"string"!=typeof t.attr("data-original-title"))&&t.attr("data-original-title",t.attr("title")||"").attr("title","")},n.prototype.hasContent=function(){return this.getTitle()},n.prototype.getPosition=function(e){e=e||this.$element;var n=e[0],r="BODY"==n.tagName,i=n.getBoundingClientRect();null==i.width&&(i=t.extend({},i,{width:i.right-i.left,height:i.bottom-i.top}));var o=r?{top:0,left:0}:e.offset(),a={scroll:r?document.documentElement.scrollTop||document.body.scrollTop:e.scrollTop()},s=r?{width:t(window).width(),height:t(window).height()}:null;return t.extend({},i,a,s,o)},n.prototype.getCalculatedOffset=function(t,e,n,r){return"bottom"==t?{top:e.top+e.height,left:e.left+e.width/2-n/2}:"top"==t?{top:e.top-r,left:e.left+e.width/2-n/2}:"left"==t?{top:e.top+e.height/2-r/2,left:e.left-n}:{top:e.top+e.height/2-r/2,left:e.left+e.width}},n.prototype.getViewportAdjustedDelta=function(t,e,n,r){var i={top:0,left:0};if(!this.$viewport)return i;var o=this.options.viewport&&this.options.viewport.padding||0,a=this.getPosition(this.$viewport);if(/right|left/.test(t)){var s=e.top-o-a.scroll,u=e.top+o-a.scroll+r;s<a.top?i.top=a.top-s:u>a.top+a.height&&(i.top=a.top+a.height-u)}else{var c=e.left-o,l=e.left+o+n;c<a.left?i.left=a.left-c:l>a.right&&(i.left=a.left+a.width-l)}return i},n.prototype.getTitle=function(){var t,e=this.$element,n=this.options;return t=e.attr("data-original-title")||("function"==typeof n.title?n.title.call(e[0]):n.title)},n.prototype.getUID=function(t){do t+=~~(1e6*Math.random());while(document.getElementById(t));return t},n.prototype.tip=function(){if(!this.$tip&&(this.$tip=t(this.options.template),1!=this.$tip.length))throw new Error(this.type+" `template` option must consist of exactly 1 top-level element!");return this.$tip},n.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},n.prototype.enable=function(){this.enabled=!0},n.prototype.disable=function(){this.enabled=!1},n.prototype.toggleEnabled=function(){this.enabled=!this.enabled},n.prototype.toggle=function(e){var n=this;e&&(n=t(e.currentTarget).data("bs."+this.type),n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n))),e?(n.inState.click=!n.inState.click,n.isInStateTrue()?n.enter(n):n.leave(n)):n.tip().hasClass("in")?n.leave(n):n.enter(n)},n.prototype.destroy=function(){var t=this;clearTimeout(this.timeout),this.hide(function(){t.$element.off("."+t.type).removeData("bs."+t.type),t.$tip&&t.$tip.detach(),t.$tip=null,t.$arrow=null,t.$viewport=null})};var r=t.fn.tooltip;t.fn.tooltip=e,t.fn.tooltip.Constructor=n,t.fn.tooltip.noConflict=function(){return t.fn.tooltip=r,this}}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var r=t(this),i=r.data("bs.popover"),o="object"==typeof e&&e;!i&&/destroy|hide/.test(e)||(i||r.data("bs.popover",i=new n(this,o)),"string"==typeof e&&i[e]())})}var n=function(t,e){this.init("popover",t,e)};if(!t.fn.tooltip)throw new Error("Popover requires tooltip.js");n.VERSION="3.3.6",n.DEFAULTS=t.extend({},t.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),n.prototype=t.extend({},t.fn.tooltip.Constructor.prototype),n.prototype.constructor=n,n.prototype.getDefaults=function(){return n.DEFAULTS},n.prototype.setContent=function(){var t=this.tip(),e=this.getTitle(),n=this.getContent();t.find(".popover-title")[this.options.html?"html":"text"](e),t.find(".popover-content").children().detach().end()[this.options.html?"string"==typeof n?"html":"append":"text"](n),t.removeClass("fade top bottom left right in"),t.find(".popover-title").html()||t.find(".popover-title").hide()},n.prototype.hasContent=function(){return this.getTitle()||this.getContent()},n.prototype.getContent=function(){var t=this.$element,e=this.options;return t.attr("data-content")||("function"==typeof e.content?e.content.call(t[0]):e.content)},n.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")};var r=t.fn.popover;t.fn.popover=e,t.fn.popover.Constructor=n,t.fn.popover.noConflict=function(){return t.fn.popover=r,this}}(jQuery),+function(t){"use strict";function e(n,r){this.$body=t(document.body),this.$scrollElement=t(t(n).is(document.body)?window:n),this.options=t.extend({},e.DEFAULTS,r),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",t.proxy(this.process,this)),this.refresh(),this.process()}function n(n){return this.each(function(){var r=t(this),i=r.data("bs.scrollspy"),o="object"==typeof n&&n;i||r.data("bs.scrollspy",i=new e(this,o)),"string"==typeof n&&i[n]()})}e.VERSION="3.3.6",e.DEFAULTS={offset:10},e.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},e.prototype.refresh=function(){var e=this,n="offset",r=0;this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight(),t.isWindow(this.$scrollElement[0])||(n="position",r=this.$scrollElement.scrollTop()),this.$body.find(this.selector).map(function(){var e=t(this),i=e.data("target")||e.attr("href"),o=/^#./.test(i)&&t(i);return o&&o.length&&o.is(":visible")&&[[o[n]().top+r,i]]||null}).sort(function(t,e){return t[0]-e[0]}).each(function(){e.offsets.push(this[0]),e.targets.push(this[1])})},e.prototype.process=function(){var t,e=this.$scrollElement.scrollTop()+this.options.offset,n=this.getScrollHeight(),r=this.options.offset+n-this.$scrollElement.height(),i=this.offsets,o=this.targets,a=this.activeTarget;if(this.scrollHeight!=n&&this.refresh(),e>=r)return a!=(t=o[o.length-1])&&this.activate(t);if(a&&e<i[0])return this.activeTarget=null,this.clear();for(t=i.length;t--;)a!=o[t]&&e>=i[t]&&(void 0===i[t+1]||e<i[t+1])&&this.activate(o[t])},e.prototype.activate=function(e){this.activeTarget=e,this.clear();var n=this.selector+'[data-target="'+e+'"],'+this.selector+'[href="'+e+'"]',r=t(n).parents("li").addClass("active");r.parent(".dropdown-menu").length&&(r=r.closest("li.dropdown").addClass("active")),r.trigger("activate.bs.scrollspy")},e.prototype.clear=function(){t(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};var r=t.fn.scrollspy;t.fn.scrollspy=n,t.fn.scrollspy.Constructor=e,t.fn.scrollspy.noConflict=function(){return t.fn.scrollspy=r,this},t(window).on("load.bs.scrollspy.data-api",function(){t('[data-spy="scroll"]').each(function(){var e=t(this);n.call(e,e.data())})})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var r=t(this),i=r.data("bs.tab");i||r.data("bs.tab",i=new n(this)),"string"==typeof e&&i[e]()})}var n=function(e){this.element=t(e)};n.VERSION="3.3.6",n.TRANSITION_DURATION=150,n.prototype.show=function(){var e=this.element,n=e.closest("ul:not(.dropdown-menu)"),r=e.data("target");if(r||(r=e.attr("href"),r=r&&r.replace(/.*(?=#[^\s]*$)/,"")),!e.parent("li").hasClass("active")){var i=n.find(".active:last a"),o=t.Event("hide.bs.tab",{relatedTarget:e[0]}),a=t.Event("show.bs.tab",{relatedTarget:i[0]});if(i.trigger(o),e.trigger(a),!a.isDefaultPrevented()&&!o.isDefaultPrevented()){var s=t(r);this.activate(e.closest("li"),n),this.activate(s,s.parent(),function(){i.trigger({type:"hidden.bs.tab",relatedTarget:e[0]}),e.trigger({type:"shown.bs.tab",relatedTarget:i[0]})})}}},n.prototype.activate=function(e,r,i){function o(){a.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!1),e.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",!0),s?(e[0].offsetWidth,e.addClass("in")):e.removeClass("fade"),e.parent(".dropdown-menu").length&&e.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!0),i&&i()}var a=r.find("> .active"),s=i&&t.support.transition&&(a.length&&a.hasClass("fade")||!!r.find("> .fade").length);a.length&&s?a.one("bsTransitionEnd",o).emulateTransitionEnd(n.TRANSITION_DURATION):o(),a.removeClass("in")};var r=t.fn.tab;t.fn.tab=e,t.fn.tab.Constructor=n,t.fn.tab.noConflict=function(){return t.fn.tab=r,this};var i=function(n){n.preventDefault(),e.call(t(this),"show")};t(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',i).on("click.bs.tab.data-api",'[data-toggle="pill"]',i)}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var r=t(this),i=r.data("bs.affix"),o="object"==typeof e&&e;i||r.data("bs.affix",i=new n(this,o)),"string"==typeof e&&i[e]()})}var n=function(e,r){this.options=t.extend({},n.DEFAULTS,r),this.$target=t(this.options.target).on("scroll.bs.affix.data-api",t.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",t.proxy(this.checkPositionWithEventLoop,this)),this.$element=t(e),this.affixed=null,this.unpin=null,this.pinnedOffset=null,this.checkPosition()};n.VERSION="3.3.6",n.RESET="affix affix-top affix-bottom",n.DEFAULTS={offset:0,target:window},n.prototype.getState=function(t,e,n,r){var i=this.$target.scrollTop(),o=this.$element.offset(),a=this.$target.height();if(null!=n&&"top"==this.affixed)return n>i?"top":!1;if("bottom"==this.affixed)return null!=n?i+this.unpin<=o.top?!1:"bottom":t-r>=i+a?!1:"bottom";var s=null==this.affixed,u=s?i:o.top,c=s?a:e;return null!=n&&n>=i?"top":null!=r&&u+c>=t-r?"bottom":!1},n.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(n.RESET).addClass("affix");var t=this.$target.scrollTop(),e=this.$element.offset();return this.pinnedOffset=e.top-t},n.prototype.checkPositionWithEventLoop=function(){setTimeout(t.proxy(this.checkPosition,this),1)},n.prototype.checkPosition=function(){if(this.$element.is(":visible")){var e=this.$element.height(),r=this.options.offset,i=r.top,o=r.bottom,a=Math.max(t(document).height(),t(document.body).height());"object"!=typeof r&&(o=i=r),"function"==typeof i&&(i=r.top(this.$element)),"function"==typeof o&&(o=r.bottom(this.$element));var s=this.getState(a,e,i,o);if(this.affixed!=s){null!=this.unpin&&this.$element.css("top","");var u="affix"+(s?"-"+s:""),c=t.Event(u+".bs.affix");if(this.$element.trigger(c),c.isDefaultPrevented())return;this.affixed=s,this.unpin="bottom"==s?this.getPinnedOffset():null,this.$element.removeClass(n.RESET).addClass(u).trigger(u.replace("affix","affixed")+".bs.affix")}"bottom"==s&&this.$element.offset({top:a-e-o})}};var r=t.fn.affix;t.fn.affix=e,t.fn.affix.Constructor=n,t.fn.affix.noConflict=function(){return t.fn.affix=r,this},t(window).on("load",function(){t('[data-spy="affix"]').each(function(){var n=t(this),r=n.data();r.offset=r.offset||{},null!=r.offsetBottom&&(r.offset.bottom=r.offsetBottom),null!=r.offsetTop&&(r.offset.top=r.offsetTop),e.call(n,r)})})}(jQuery);
//# sourceMappingURL=data:application/json;base64,
